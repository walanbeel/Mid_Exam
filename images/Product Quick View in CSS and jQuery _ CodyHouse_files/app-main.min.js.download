/*
chroma.js - JavaScript library for color conversions

Copyright (c) 2011-2017, Gregor Aisch
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. The name Gregor Aisch may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/
(function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,_,aa,ba,ca,da,ea,fa,ga,ha,ia,ja,ka,la,ma,na,oa,pa,qa,ra,sa,ta,ua,va,wa,xa,ya,za,Aa,Ba,Ca=[].slice;xa=function(){var a,b,c,d,e;for(a={},e="Boolean Number String Function Array Date RegExp Undefined Null".split(" "),d=0,b=e.length;d<b;d++)c=e[d],a["[object "+c+"]"]=c.toLowerCase();return function(b){var c;return c=Object.prototype.toString.call(b),a[c]||"object"}}(),U=function(a,b,c){return null==b&&(b=0),null==c&&(c=1),a<b&&(a=b),a>c&&(a=c),a},ya=function(a){return a.length>=3?Array.prototype.slice.call(a):a[0]},u=function(a){var b,c;for(a._clipped=!1,a._unclipped=a.slice(0),b=c=0;c<3;b=++c)b<3?((a[b]<0||a[b]>255)&&(a._clipped=!0),a[b]<0&&(a[b]=0),a[b]>255&&(a[b]=255)):3===b&&(a[b]<0&&(a[b]=0),a[b]>1&&(a[b]=1));return a._clipped||delete a._unclipped,a},d=Math.PI,sa=Math.round,w=Math.cos,B=Math.floor,ba=Math.pow,V=Math.log,ua=Math.sin,va=Math.sqrt,n=Math.atan2,Y=Math.max,m=Math.abs,g=2*d,e=d/3,b=d/180,f=180/d,t=function(){return arguments[0]instanceof a?arguments[0]:function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,arguments,function(){})},t.default=t,l=[],"undefined"!=typeof module&&null!==module&&null!=module.exports&&(module.exports=t),"function"==typeof define&&define.amd?define([],function(){return t}):(ra="undefined"!=typeof exports&&null!==exports?exports:this,ra.chroma=t),t.version="1.4.0",k={},i=[],j=!1,a=function(){function a(){var a,b,c,d,e,f,g,h,l;for(f=this,b=[],h=0,d=arguments.length;h<d;h++)null!=(a=arguments[h])&&b.push(a);if(b.length>1&&(g=b[b.length-1]),null!=k[g])f._rgb=u(k[g](ya(b.slice(0,-1))));else{for(j||(i=i.sort(function(a,b){return b.p-a.p}),j=!0),l=0,e=i.length;l<e&&(c=i[l],!(g=c.test.apply(c,b)));l++);g&&(f._rgb=u(k[g].apply(k,b)))}null==f._rgb&&console.warn("unknown format: "+b),null==f._rgb&&(f._rgb=[0,0,0]),3===f._rgb.length&&f._rgb.push(1)}return a.prototype.toString=function(){return this.hex()},a}(),t._input=k,t.brewer=r={OrRd:["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000"],PuBu:["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#045a8d","#023858"],BuPu:["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#810f7c","#4d004b"],Oranges:["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#a63603","#7f2704"],BuGn:["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#006d2c","#00441b"],YlOrBr:["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#993404","#662506"],YlGn:["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529"],Reds:["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15","#67000d"],RdPu:["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177","#49006a"],Greens:["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#006d2c","#00441b"],YlGnBu:["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"],Purples:["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#54278f","#3f007d"],GnBu:["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#0868ac","#084081"],Greys:["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525","#000000"],YlOrRd:["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#bd0026","#800026"],PuRd:["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#980043","#67001f"],Blues:["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"],PuBuGn:["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016c59","#014636"],Viridis:["#440154","#482777","#3f4a8a","#31678e","#26838f","#1f9d8a","#6cce5a","#b6de2b","#fee825"],Spectral:["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"],RdYlGn:["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"],RdBu:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"],PiYG:["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"],PRGn:["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"],RdYlBu:["#a50026","#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"],BrBG:["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"],RdGy:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"],PuOr:["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"],Set2:["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494","#b3b3b3"],Accent:["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17","#666666"],Set1:["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf","#999999"],Set3:["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5","#ffed6f"],Dark2:["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"],Paired:["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928"],Pastel2:["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc","#cccccc"],Pastel1:["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec","#f2f2f2"]},function(){var a,b;b=[];for(a in r)b.push(r[a.toLowerCase()]=r[a])}(),za={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflower:"#6495ed",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",laserlemon:"#ffff54",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrod:"#fafad2",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",maroon2:"#7f0000",maroon3:"#b03060",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",purple2:"#7f007f",purple3:"#a020f0",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"},t.colors=za,P=function(){var a,b,d,e,f,g,h,i,j;return b=ya(arguments),f=b[0],a=b[1],d=b[2],i=(f+16)/116,h=isNaN(a)?i:i+a/500,j=isNaN(d)?i:i-d/200,i=c.Yn*Q(i),h=c.Xn*Q(h),j=c.Zn*Q(j),g=Ba(3.2404542*h-1.5371385*i-.4985314*j),e=Ba(-.969266*h+1.8760108*i+.041556*j),d=Ba(.0556434*h-.2040259*i+1.0572252*j),[g,e,d,b.length>3?b[3]:1]},Ba=function(a){return 255*(a<=.00304?12.92*a:1.055*ba(a,1/2.4)-.055)},Q=function(a){return a>c.t1?a*a*a:c.t2*(a-c.t0)},c={Kn:18,Xn:.95047,Yn:1,Zn:1.08883,t0:.137931034,t1:.206896552,t2:.12841855,t3:.008856452},ja=function(){var a,b,c,d,e,f,g,h;return d=ya(arguments),c=d[0],b=d[1],a=d[2],e=oa(c,b,a),f=e[0],g=e[1],h=e[2],[116*g-16,500*(f-g),200*(g-h)]},pa=function(a){return(a/=255)<=.04045?a/12.92:ba((a+.055)/1.055,2.4)},Aa=function(a){return a>c.t3?ba(a,1/3):a/c.t2+c.t0},oa=function(){var a,b,d,e,f,g,h;return e=ya(arguments),d=e[0],b=e[1],a=e[2],d=pa(d),b=pa(b),a=pa(a),f=Aa((.4124564*d+.3575761*b+.1804375*a)/c.Xn),g=Aa((.2126729*d+.7151522*b+.072175*a)/c.Yn),h=Aa((.0193339*d+.119192*b+.9503041*a)/c.Zn),[f,g,h]},t.lab=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["lab"]),function(){})},k.lab=P,a.prototype.lab=function(){return ja(this._rgb)},o=function(a){var b,c,d,e,f,g,h,i,j,k,l;return a=function(){var b,c,d;for(d=[],c=0,b=a.length;c<b;c++)e=a[c],d.push(t(e));return d}(),2===a.length?(j=function(){var b,c,d;for(d=[],c=0,b=a.length;c<b;c++)e=a[c],d.push(e.lab());return d}(),f=j[0],g=j[1],b=function(a){var b,c;return c=function(){var c,d;for(d=[],b=c=0;c<=2;b=++c)d.push(f[b]+a*(g[b]-f[b]));return d}(),t.lab.apply(t,c)}):3===a.length?(k=function(){var b,c,d;for(d=[],c=0,b=a.length;c<b;c++)e=a[c],d.push(e.lab());return d}(),f=k[0],g=k[1],h=k[2],b=function(a){var b,c;return c=function(){var c,d;for(d=[],b=c=0;c<=2;b=++c)d.push((1-a)*(1-a)*f[b]+2*(1-a)*a*g[b]+a*a*h[b]);return d}(),t.lab.apply(t,c)}):4===a.length?(l=function(){var b,c,d;for(d=[],c=0,b=a.length;c<b;c++)e=a[c],d.push(e.lab());return d}(),f=l[0],g=l[1],h=l[2],i=l[3],b=function(a){var b,c;return c=function(){var c,d;for(d=[],b=c=0;c<=2;b=++c)d.push((1-a)*(1-a)*(1-a)*f[b]+3*(1-a)*(1-a)*a*g[b]+3*(1-a)*a*a*h[b]+a*a*a*i[b]);return d}(),t.lab.apply(t,c)}):5===a.length&&(c=o(a.slice(0,3)),d=o(a.slice(2,5)),b=function(a){return a<.5?c(2*a):d(2*(a-.5))}),b},t.bezier=function(a){var b;return b=o(a),b.scale=function(){return t.scale(b)},b},t.cubehelix=function(a,b,c,d,e){var f,h,i;return null==a&&(a=300),null==b&&(b=-1.5),null==c&&(c=1),null==d&&(d=1),null==e&&(e=[0,1]),f=0,"array"===xa(e)?h=e[1]-e[0]:(h=0,e=[e,e]),i=function(i){var j,k,l,m,n,o,p,q,r;return j=g*((a+120)/360+b*i),p=ba(e[0]+h*i,d),o=0!==f?c[0]+i*f:c,k=o*p*(1-p)/2,m=w(j),r=ua(j),q=p+k*(-.14861*m+1.78277*r),n=p+k*(-.29227*m-.90649*r),l=p+k*(1.97294*m),t(u([255*q,255*n,255*l,1]))},i.start=function(b){return null==b?a:(a=b,i)},i.rotations=function(a){return null==a?b:(b=a,i)},i.gamma=function(a){return null==a?d:(d=a,i)},i.hue=function(a){return null==a?c:(c=a,"array"===xa(c)?0===(f=c[1]-c[0])&&(c=c[1]):f=0,i)},i.lightness=function(a){return null==a?e:("array"===xa(a)?(e=a,h=a[1]-a[0]):(e=[a,a],h=0),i)},i.scale=function(){return t.scale(i)},i.hue(c),i},t.random=function(){var b,c,d;for(c="0123456789abcdef",b="#",d=0;d<6;++d)b+=c.charAt(B(16*Math.random()));return new a(b)},l=[],I=function(a,b,c,d){var e,f,g,h;for(null==c&&(c=.5),null==d&&(d="rgb"),"object"!==xa(a)&&(a=t(a)),"object"!==xa(b)&&(b=t(b)),g=0,f=l.length;g<f;g++)if(e=l[g],d===e[0]){h=e[1](a,b,c,d);break}if(null==h)throw"color mode "+d+" is not supported";return h.alpha(a.alpha()+c*(b.alpha()-a.alpha()))},t.interpolate=I,a.prototype.interpolate=function(a,b,c){return I(this,a,b,c)},t.mix=I,a.prototype.mix=a.prototype.interpolate,k.rgb=function(){var a,b,c,d;b=ya(arguments),c=[];for(a in b)d=b[a],c.push(d);return c},t.rgb=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["rgb"]),function(){})},a.prototype.rgb=function(a){return null==a&&(a=!0),a?this._rgb.map(Math.round).slice(0,3):this._rgb.slice(0,3)},a.prototype.rgba=function(a){return null==a&&(a=!0),a?[Math.round(this._rgb[0]),Math.round(this._rgb[1]),Math.round(this._rgb[2]),this._rgb[3]]:this._rgb.slice(0)},i.push({p:3,test:function(a){var b;return b=ya(arguments),"array"===xa(b)&&3===b.length?"rgb":4===b.length&&"number"===xa(b[3])&&b[3]>=0&&b[3]<=1?"rgb":void 0}}),k.lrgb=k.rgb,L=function(b,c,d,e){var f,g;return f=b._rgb,g=c._rgb,new a(va(ba(f[0],2)*(1-d)+ba(g[0],2)*d),va(ba(f[1],2)*(1-d)+ba(g[1],2)*d),va(ba(f[2],2)*(1-d)+ba(g[2],2)*d),e)},h=function(b){var c,d,e,f,g,h;for(d=1/b.length,h=[0,0,0,0],f=0,e=b.length;f<e;f++)c=b[f],g=c._rgb,h[0]+=ba(g[0],2)*d,h[1]+=ba(g[1],2)*d,h[2]+=ba(g[2],2)*d,h[3]+=g[3]*d;return h[0]=va(h[0]),h[1]=va(h[1]),h[2]=va(h[2]),h[3]>1&&(h[3]=1),new a(u(h))},l.push(["lrgb",L]),t.average=function(a,b){var c,e,f,g,i,j,k,l,m,o,p,q,r;if(null==b&&(b="rgb"),m=a.length,a=a.map(function(a){return t(a)}),k=a.splice(0,1)[0],"lrgb"===b)return h(a);q=k.get(b),g=[],i=0,j=0;for(l in q)q[l]=q[l]||0,g.push(isNaN(q[l])?0:1),"h"!==b.charAt(l)||isNaN(q[l])||(c=q[l]/180*d,i+=w(c),j+=ua(c));for(e=k.alpha(),p=0,o=a.length;p<o;p++){f=a[p],r=f.get(b),e+=f.alpha();for(l in q)isNaN(r[l])||(g[l]+=1,"h"===b.charAt(l)?(c=r[l]/180*d,i+=w(c),j+=ua(c)):q[l]+=r[l])}for(l in q)if("h"===b.charAt(l)){for(c=n(j/g[l],i/g[l])/d*180;c<0;)c+=360;for(;c>=360;)c-=360;q[l]=c}else q[l]=q[l]/g[l];return t(q,b).alpha(e/m)},D=function(a){var b,c,d,e,f,g;if(a.match(/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/))return 4!==a.length&&7!==a.length||(a=a.substr(1)),3===a.length&&(a=a.split(""),a=a[0]+a[0]+a[1]+a[1]+a[2]+a[2]),g=parseInt(a,16),e=g>>16,d=g>>8&255,c=255&g,[e,d,c,1];if(a.match(/^#?([A-Fa-f0-9]{8})$/))return 9===a.length&&(a=a.substr(1)),g=parseInt(a,16),e=g>>24&255,d=g>>16&255,c=g>>8&255,b=sa((255&g)/255*100)/100,[e,d,c,b];if(null!=k.css&&(f=k.css(a)))return f;throw"unknown color: "+a},fa=function(a,b){var c,d,e,f,g,h,i;return null==b&&(b="auto"),g=a[0],e=a[1],d=a[2],c=a[3],"auto"===b&&(b=c<1?"rgba":"rgb"),g=Math.round(g),e=Math.round(e),d=Math.round(d),i=g<<16|e<<8|d,h="000000"+i.toString(16),h=h.substr(h.length-6),f="0"+sa(255*c).toString(16),f=f.substr(f.length-2),"#"+function(){switch(b.toLowerCase()){case"rgba":return h+f;case"argb":return f+h;default:return h}}()},k.hex=function(a){return D(a)},t.hex=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["hex"]),function(){})},a.prototype.hex=function(a){return null==a&&(a="auto"),fa(this._rgb,a)},i.push({p:4,test:function(a){if(1===arguments.length&&"string"===xa(a))return"hex"}}),G=function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n;if(a=ya(arguments),e=a[0],k=a[1],g=a[2],0===k)i=d=b=255*g;else{for(n=[0,0,0],c=[0,0,0],m=g<.5?g*(1+k):g+k-g*k,l=2*g-m,e/=360,n[0]=e+1/3,n[1]=e,n[2]=e-1/3,f=h=0;h<=2;f=++h)n[f]<0&&(n[f]+=1),n[f]>1&&(n[f]-=1),6*n[f]<1?c[f]=l+6*(m-l)*n[f]:2*n[f]<1?c[f]=m:3*n[f]<2?c[f]=l+(m-l)*(2/3-n[f])*6:c[f]=l;j=[sa(255*c[0]),sa(255*c[1]),sa(255*c[2])],i=j[0],d=j[1],b=j[2]}return a.length>3?[i,d,b,a[3]]:[i,d,b]},ha=function(a,b,c){var d,e,f,g,h;return void 0!==a&&a.length>=3&&(g=a,a=g[0],b=g[1],c=g[2]),a/=255,b/=255,c/=255,f=Math.min(a,b,c),Y=Math.max(a,b,c),e=(Y+f)/2,Y===f?(h=0,d=Number.NaN):h=e<.5?(Y-f)/(Y+f):(Y-f)/(2-Y-f),a===Y?d=(b-c)/(Y-f):b===Y?d=2+(c-a)/(Y-f):c===Y&&(d=4+(a-b)/(Y-f)),d*=60,d<0&&(d+=360),[d,h,e]},t.hsl=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["hsl"]),function(){})},k.hsl=G,a.prototype.hsl=function(){return ha(this._rgb)},H=function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;if(a=ya(arguments),e=a[0],p=a[1],r=a[2],r*=255,0===p)i=d=b=r;else switch(360===e&&(e=0),e>360&&(e-=360),e<0&&(e+=360),e/=60,f=B(e),c=e-f,g=r*(1-p),h=r*(1-p*c),q=r*(1-p*(1-c)),f){case 0:j=[r,q,g],i=j[0],d=j[1],b=j[2];break;case 1:k=[h,r,g],i=k[0],d=k[1],b=k[2];break;case 2:l=[g,r,q],i=l[0],d=l[1],b=l[2];break;case 3:m=[g,h,r],i=m[0],d=m[1],b=m[2];break;case 4:n=[q,g,r],i=n[0],d=n[1],b=n[2];break;case 5:o=[r,g,h],i=o[0],d=o[1],b=o[2]}return[i,d,b,a.length>3?a[3]:1]},ia=function(){var a,b,c,d,e,f,g,h,i;return g=ya(arguments),f=g[0],c=g[1],a=g[2],e=Math.min(f,c,a),Y=Math.max(f,c,a),b=Y-e,i=Y/255,0===Y?(d=Number.NaN,h=0):(h=b/Y,f===Y&&(d=(c-a)/b),c===Y&&(d=2+(a-f)/b),a===Y&&(d=4+(f-c)/b),(d*=60)<0&&(d+=360)),[d,h,i]},t.hsv=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["hsv"]),function(){})},k.hsv=H,a.prototype.hsv=function(){return ia(this._rgb)},_=function(a){var b,c,d;return"number"===xa(a)&&a>=0&&a<=16777215?(d=a>>16,c=a>>8&255,b=255&a,[d,c,b,1]):(console.warn("unknown num color: "+a),[0,0,0,1])},ma=function(){var a,b,c,d;return d=ya(arguments),c=d[0],b=d[1],a=d[2],(c<<16)+(b<<8)+a},t.num=function(b){return new a(b,"num")},a.prototype.num=function(a){return null==a&&(a="rgb"),ma(this._rgb,a)},k.num=_,i.push({p:1,test:function(a){if(1===arguments.length&&"number"===xa(a)&&a>=0&&a<=16777215)return"num"}}),C=function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;if(c=ya(arguments),h=c[0],e=c[1],b=c[2],e/=100,g=g/100*255,a=255*e,0===e)l=g=d=b;else switch(360===h&&(h=0),h>360&&(h-=360),h<0&&(h+=360),h/=60,i=B(h),f=h-i,j=b*(1-e),k=j+a*(1-f),s=j+a*f,t=j+a,i){case 0:m=[t,s,j],l=m[0],g=m[1],d=m[2];break;case 1:n=[k,t,j],l=n[0],g=n[1],d=n[2];break;case 2:o=[j,t,s],l=o[0],g=o[1],d=o[2];break;case 3:p=[j,k,t],l=p[0],g=p[1],d=p[2];break;case 4:q=[s,j,t],l=q[0],g=q[1],d=q[2];break;case 5:r=[t,j,k],l=r[0],g=r[1],d=r[2]}return[l,g,d,c.length>3?c[3]:1]},ea=function(){var a,b,c,d,e,f,g,h,i;return i=ya(arguments),h=i[0],e=i[1],b=i[2],g=Math.min(h,e,b),Y=Math.max(h,e,b),d=Y-g,c=100*d/255,a=g/(255-d)*100,0===d?f=Number.NaN:(h===Y&&(f=(e-b)/d),e===Y&&(f=2+(b-h)/d),b===Y&&(f=4+(h-e)/d),(f*=60)<0&&(f+=360)),[f,c,a]},t.hcg=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["hcg"]),function(){})},k.hcg=C,a.prototype.hcg=function(){return ea(this._rgb)},x=function(a){var b,c,d,e,f,g,h,i;if(a=a.toLowerCase(),null!=t.colors&&t.colors[a])return D(t.colors[a]);if(f=a.match(/rgb\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*\)/)){for(h=f.slice(1,4),e=g=0;g<=2;e=++g)h[e]=+h[e];h[3]=1}else if(f=a.match(/rgba\(\s*(\-?\d+),\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*([01]|[01]?\.\d+)\)/))for(h=f.slice(1,5),e=i=0;i<=3;e=++i)h[e]=+h[e];else if(f=a.match(/rgb\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/)){for(h=f.slice(1,4),e=b=0;b<=2;e=++b)h[e]=sa(2.55*h[e]);h[3]=1}else if(f=a.match(/rgba\(\s*(\-?\d+(?:\.\d+)?)%,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/)){for(h=f.slice(1,5),e=c=0;c<=2;e=++c)h[e]=sa(2.55*h[e]);h[3]=+h[3]}else(f=a.match(/hsl\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*\)/))?(d=f.slice(1,4),d[1]*=.01,d[2]*=.01,h=G(d),h[3]=1):(f=a.match(/hsla\(\s*(\-?\d+(?:\.\d+)?),\s*(\-?\d+(?:\.\d+)?)%\s*,\s*(\-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)/))&&(d=f.slice(1,4),d[1]*=.01,d[2]*=.01,h=G(d),h[3]=+f[4]);return h},da=function(a){var b;return b=a[3]<1?"rgba":"rgb","rgb"===b?b+"("+a.slice(0,3).map(sa).join(",")+")":"rgba"===b?b+"("+a.slice(0,3).map(sa).join(",")+","+a[3]+")":void 0},qa=function(a){return sa(100*a)/100},F=function(a,b){var c;return c=b<1?"hsla":"hsl",a[0]=qa(a[0]||0),a[1]=qa(100*a[1])+"%",a[2]=qa(100*a[2])+"%","hsla"===c&&(a[3]=b),c+"("+a.join(",")+")"},k.css=function(a){return x(a)},t.css=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["css"]),function(){})},a.prototype.css=function(a){return null==a&&(a="rgb"),"rgb"===a.slice(0,3)?da(this._rgb):"hsl"===a.slice(0,3)?F(this.hsl(),this.alpha()):void 0},k.named=function(a){return D(za[a])},i.push({p:5,test:function(a){if(1===arguments.length&&null!=za[a])return"named"}}),a.prototype.name=function(a){var b,c;arguments.length&&(za[a]&&(this._rgb=D(za[a])),this._rgb[3]=1),b=this.hex("rgb");for(c in za)if(b===za[c])return c;return b},R=function(){var a,c,d,e;return e=ya(arguments),d=e[0],a=e[1],c=e[2],c*=b,[d,w(c)*a,ua(c)*a]},S=function(){var a,b,c,d,e,f,g,h,i,j,k;return c=ya(arguments),h=c[0],e=c[1],g=c[2],j=R(h,e,g),a=j[0],b=j[1],d=j[2],k=P(a,b,d),i=k[0],f=k[1],d=k[2],[i,f,d,c.length>3?c[3]:1]},O=function(){var a,b,c,d,e,g;return g=ya(arguments),e=g[0],a=g[1],b=g[2],c=va(a*a+b*b),d=(n(b,a)*f+360)%360,0===sa(1e4*c)&&(d=Number.NaN),[e,c,d]},ka=function(){var a,b,c,d,e,f,g;return f=ya(arguments),e=f[0],c=f[1],b=f[2],g=ja(e,c,b),d=g[0],a=g[1],b=g[2],O(d,a,b)},t.lch=function(){var b;return b=ya(arguments),new a(b,"lch")},t.hcl=function(){var b;return b=ya(arguments),new a(b,"hcl")},k.lch=S,k.hcl=function(){var a,b,c,d;return d=ya(arguments),b=d[0],a=d[1],c=d[2],S([c,a,b])},a.prototype.lch=function(){return ka(this._rgb)},a.prototype.hcl=function(){return ka(this._rgb).reverse()},ca=function(a){var b,c,d,e,f,g,h,i,j;return null==a&&(a="rgb"),i=ya(arguments),h=i[0],e=i[1],b=i[2],h/=255,e/=255,b/=255,f=1-Math.max(h,Math.max(e,b)),d=f<1?1/(1-f):0,c=(1-h-f)*d,g=(1-e-f)*d,j=(1-b-f)*d,[c,g,j,f]},v=function(){var a,b,c,d,e,f,g,h,i;return b=ya(arguments),d=b[0],g=b[1],i=b[2],f=b[3],a=b.length>4?b[4]:1,1===f?[0,0,0,a]:(h=d>=1?0:255*(1-d)*(1-f),e=g>=1?0:255*(1-g)*(1-f),c=i>=1?0:255*(1-i)*(1-f),[h,e,c,a])},k.cmyk=function(){return v(ya(arguments))},t.cmyk=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["cmyk"]),function(){})},a.prototype.cmyk=function(){return ca(this._rgb)},k.gl=function(){var a,b,c,d,e;for(d=function(){var a,c;a=ya(arguments),c=[];for(b in a)e=a[b],c.push(e);return c}.apply(this,arguments),a=c=0;c<=2;a=++c)d[a]*=255;return d},t.gl=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["gl"]),function(){})},a.prototype.gl=function(){var a;return a=this._rgb,[a[0]/255,a[1]/255,a[2]/255,a[3]]},la=function(a,b,c){var d;return d=ya(arguments),a=d[0],b=d[1],c=d[2],a=W(a),b=W(b),c=W(c),.2126*a+.7152*b+.0722*c},W=function(a){return a/=255,a<=.03928?a/12.92:ba((a+.055)/1.055,2.4)},N=function(b,c,d,e){var f,g;return f=b._rgb,g=c._rgb,new a(f[0]+d*(g[0]-f[0]),f[1]+d*(g[1]-f[1]),f[2]+d*(g[2]-f[2]),e)},l.push(["rgb",N]),a.prototype.luminance=function(a,b){var c,d,e,f,g;return null==b&&(b="rgb"),arguments.length?(f=this._rgb,0===a?f=[0,0,0,this._rgb[3]]:1===a?f=[255,255,255,this[3]]:(c=la(this._rgb),d=1e-7,e=20,g=function(c,f){var h,i;return i=c.interpolate(f,.5,b),h=i.luminance(),Math.abs(a-h)<d||!e--?i:h>a?g(c,i):g(i,f)},f=c>a?g(t("black"),this).rgba():g(this,t("white")).rgba()),t(f).alpha(this.alpha())):la(this._rgb)},wa=function(a){var b,c,d,e;return e=a/100,e<66?(d=255,c=-155.25485562709179-.44596950469579133*(c=e-2)+104.49216199393888*V(c),b=e<20?0:.8274096064007395*(b=e-10)-254.76935184120902+115.67994401066147*V(b)):(d=351.97690566805693+.114206453784165*(d=e-55)-40.25366309332127*V(d),c=325.4494125711974+.07943456536662342*(c=e-50)-28.0852963507957*V(c),b=255),[d,c,b]},na=function(){var a,b,c,d,e,f,g,h;for(f=ya(arguments),e=f[0],f[1],a=f[2],d=1e3,c=4e4,b=.4;c-d>b;)h=.5*(c+d),g=wa(h),g[2]/g[0]>=a/e?c=h:d=h;return sa(h)},t.temperature=t.kelvin=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["temperature"]),function(){})},k.temperature=k.kelvin=k.K=wa,a.prototype.temperature=function(){return na(this._rgb)},a.prototype.kelvin=a.prototype.temperature,t.contrast=function(b,c){var d,e,f,g;return"string"!==(f=xa(b))&&"number"!==f||(b=new a(b)),"string"!==(g=xa(c))&&"number"!==g||(c=new a(c)),d=b.luminance(),e=c.luminance(),d>e?(d+.05)/(e+.05):(e+.05)/(d+.05)},t.distance=function(b,c,d){var e,f,g,h,i,j,k;null==d&&(d="lab"),"string"!==(i=xa(b))&&"number"!==i||(b=new a(b)),"string"!==(j=xa(c))&&"number"!==j||(c=new a(c)),g=b.get(d),h=c.get(d),k=0;for(f in g)e=(g[f]||0)-(h[f]||0),k+=e*e;return Math.sqrt(k)},t.deltaE=function(b,c,e,f){var g,h,i,j,k,l,o,p,q,r,s,t,u,v,x,y,z,A,B,C,D,E,F,G,H,I,J;for(null==e&&(e=1),null==f&&(f=1),"string"!==(z=xa(b))&&"number"!==z||(b=new a(b)),"string"!==(A=xa(c))&&"number"!==A||(c=new a(c)),B=b.lab(),g=B[0],i=B[1],k=B[2],C=c.lab(),h=C[0],j=C[1],l=C[2],o=va(i*i+k*k),p=va(j*j+l*l),F=g<16?.511:.040975*g/(1+.01765*g),D=.0638*o/(1+.0131*o)+.638,y=o<1e-6?0:180*n(k,i)/d;y<0;)y+=360;for(;y>=360;)y-=360;return G=y>=164&&y<=345?.56+m(.2*w(d*(y+168)/180)):.36+m(.4*w(d*(y+35)/180)),q=o*o*o*o,x=va(q/(q+1900)),E=D*(x*G+1-x),v=g-h,u=o-p,s=i-j,t=k-l,r=s*s+t*t-u*u,H=v/(e*F),I=u/(f*D),J=E,va(H*H+I*I+r/(J*J))},a.prototype.get=function(a){var b,c,d,e,f,g;return d=this,f=a.split("."),e=f[0],b=f[1],g=d[e](),b?(c=e.indexOf(b),c>-1?g[c]:console.warn("unknown channel "+b+" in mode "+e)):g},a.prototype.set=function(a,b){var c,d,e,f,g,h;if(e=this,g=a.split("."),f=g[0],c=g[1],c)if(h=e[f](),(d=f.indexOf(c))>-1)if("string"===xa(b))switch(b.charAt(0)){case"+":case"-":h[d]+=+b;break;case"*":h[d]*=+b.substr(1);break;case"/":h[d]/=+b.substr(1);break;default:h[d]=+b}else h[d]=b;else console.warn("unknown channel "+c+" in mode "+f);else h=b;return t(h,f).alpha(e.alpha())},a.prototype.clipped=function(){return this._rgb._clipped||!1},a.prototype.alpha=function(a){return arguments.length?t.rgb([this._rgb[0],this._rgb[1],this._rgb[2],a]):this._rgb[3]},a.prototype.darken=function(a){var b,d;return null==a&&(a=1),d=this,b=d.lab(),b[0]-=c.Kn*a,t.lab(b).alpha(d.alpha())},a.prototype.brighten=function(a){return null==a&&(a=1),this.darken(-a)},a.prototype.darker=a.prototype.darken,a.prototype.brighter=a.prototype.brighten,a.prototype.saturate=function(a){var b,d;return null==a&&(a=1),d=this,b=d.lch(),b[1]+=a*c.Kn,b[1]<0&&(b[1]=0),t.lch(b).alpha(d.alpha())},a.prototype.desaturate=function(a){return null==a&&(a=1),this.saturate(-a)},a.prototype.premultiply=function(){var a,b;return b=this.rgb(),a=this.alpha(),t(b[0]*a,b[1]*a,b[2]*a,a)},p=function(a,b,c){if(!p[c])throw"unknown blend mode "+c;return p[c](a,b)},q=function(a){return function(b,c){var d,e;return d=t(c).rgb(),e=t(b).rgb(),t(a(d,e),"rgb")}},A=function(a){return function(b,c){var d,e,f;for(f=[],d=e=0;e<=3;d=++e)f[d]=a(b[d],c[d]);return f}},$=function(a,b){return a},Z=function(a,b){return a*b/255},y=function(a,b){return a>b?b:a},T=function(a,b){return a>b?a:b},ta=function(a,b){return 255*(1-(1-a/255)*(1-b/255))},aa=function(a,b){return b<128?2*a*b/255:255*(1-2*(1-a/255)*(1-b/255))},s=function(a,b){return 255*(1-(1-b/255)/(a/255))},z=function(a,b){return 255===a?255:(a=b/255*255/(1-a/255),a>255?255:a)},p.normal=q(A($)),p.multiply=q(A(Z)),p.screen=q(A(ta)),p.overlay=q(A(aa)),p.darken=q(A(y)),p.lighten=q(A(T)),p.dodge=q(A(z)),p.burn=q(A(s)),t.blend=p,t.analyze=function(a){var b,c,d,e;for(d={min:Number.MAX_VALUE,max:-1*Number.MAX_VALUE,sum:0,values:[],count:0},c=0,b=a.length;c<b;c++)null==(e=a[c])||isNaN(e)||(d.values.push(e),d.sum+=e,e<d.min&&(d.min=e),e>d.max&&(d.max=e),d.count+=1);return d.domain=[d.min,d.max],d.limits=function(a,b){return t.limits(d,a,b)},d},t.scale=function(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,u,v,w,x;return k="rgb",l=t("#ccc"),p=0,!1,g=[0,1],o=[],n=[0,0],c=!1,e=[],m=!1,j=0,i=1,f=!1,d={},q=!0,h=1,w=function(a){var b,c,d,f,g,h;if(null==a&&(a=["#fff","#000"]),null!=a&&"string"===xa(a)&&null!=t.brewer&&(a=t.brewer[a]||t.brewer[a.toLowerCase()]||a),"array"===xa(a)){for(1===a.length&&(a=[a[0],a[0]]),a=a.slice(0),b=d=0,f=a.length-1;0<=f?d<=f:d>=f;b=0<=f?++d:--d)c=a[b],"string"===xa(c)&&(a[b]=t(c));for(o.length=0,b=h=0,g=a.length-1;0<=g?h<=g:h>=g;b=0<=g?++h:--h)o.push(b/(a.length-1))}return v(),e=a},s=function(a){var b,d;if(null!=c){for(d=c.length-1,b=0;b<d&&a>=c[b];)b++;return b-1}return 0},x=function(a){return a},function(a){var b,d,e,f,g;return g=a,c.length>2&&(f=c.length-1,b=s(a),e=c[0]+(c[1]-c[0])*(0+.5*p),d=c[f-1]+(c[f]-c[f-1])*(1-.5*p),g=j+(c[b]+.5*(c[b+1]-c[b])-e)/(d-e)*(i-j)),g},u=function(a,b){var f,g,m,p,r,u,v,w;if(null==b&&(b=!1),isNaN(a))return l;if(b?w=a:c&&c.length>2?(f=s(a),w=f/(c.length-2)):w=i!==j?(a-j)/(i-j):1,b||(w=x(w)),1!==h&&(w=ba(w,h)),w=n[0]+w*(1-n[0]-n[1]),w=Math.min(1,Math.max(0,w)),p=Math.floor(1e4*w),q&&d[p])g=d[p];else{if("array"===xa(e))for(m=r=0,v=o.length-1;0<=v?r<=v:r>=v;m=0<=v?++r:--r){if(u=o[m],w<=u){g=e[m];break}if(w>=u&&m===o.length-1){g=e[m];break}if(w>u&&w<o[m+1]){w=(w-u)/(o[m+1]-u),g=t.interpolate(e[m],e[m+1],w,k);break}}else"function"===xa(e)&&(g=e(w));q&&(d[p]=g)}return g},v=function(){return d={}},w(a),r=function(a){var b;return b=t(u(a)),m&&b[m]?b[m]():b},r.classes=function(a){var b;return null!=a?("array"===xa(a)?(c=a,g=[a[0],a[a.length-1]]):(b=t.analyze(g),c=0===a?[b.min,b.max]:t.limits(b,"e",a)),r):c},r.domain=function(a){var b,c,d,f,h,k,l;if(!arguments.length)return g;if(j=a[0],i=a[a.length-1],o=[],d=e.length,a.length===d&&j!==i)for(h=0,f=a.length;h<f;h++)c=a[h],o.push((c-j)/(i-j));else for(b=l=0,k=d-1;0<=k?l<=k:l>=k;b=0<=k?++l:--l)o.push(b/(d-1));return g=[j,i],r},r.mode=function(a){return arguments.length?(k=a,v(),r):k},r.range=function(a,b){return w(a,b),r},r.out=function(a){return m=a,r},r.spread=function(a){return arguments.length?(p=a,r):p},r.correctLightness=function(a){return null==a&&(a=!0),f=a,v(),x=f?function(a){var b,c,d,e,f,g,h,i,j;for(b=u(0,!0).lab()[0],c=u(1,!0).lab()[0],h=b>c,d=u(a,!0).lab()[0],f=b+(c-b)*a,e=d-f,i=0,j=1,g=20;Math.abs(e)>.01&&g-- >0;)!function(){h&&(e*=-1),e<0?(i=a,a+=.5*(j-a)):(j=a,a+=.5*(i-a)),d=u(a,!0).lab()[0],e=d-f}();return a}:function(a){return a},r},r.padding=function(a){return null!=a?("number"===xa(a)&&(a=[a,a]),n=a,r):n},r.colors=function(b,d){var f,h,i,j,k,l,m,n;if(arguments.length<2&&(d="hex"),k=[],0===arguments.length)k=e.slice(0);else if(1===b)k=[r(.5)];else if(b>1)h=g[0],f=g[1]-h,k=function(){l=[];for(var a=0;0<=b?a<b:a>b;0<=b?a++:a--)l.push(a);return l}.apply(this).map(function(a){return r(h+a/(b-1)*f)});else{if(a=[],m=[],c&&c.length>2)for(i=n=1,j=c.length;1<=j?n<j:n>j;i=1<=j?++n:--n)m.push(.5*(c[i-1]+c[i]));else m=g;k=m.map(function(a){return r(a)})}return t[d]&&(k=k.map(function(a){return a[d]()})),k},r.cache=function(a){return null!=a?(q=a,r):q},r.gamma=function(a){return null!=a?(h=a,r):h},r},null==t.scales&&(t.scales={}),t.scales.cool=function(){return t.scale([t.hsl(180,1,.9),t.hsl(250,.7,.4)])},t.scales.hot=function(){return t.scale(["#000","#f00","#ff0","#fff"],[0,.25,.75,1]).mode("rgb")},t.analyze=function(a,b,c){var d,e,f,g,h,i,j;if(h={min:Number.MAX_VALUE,max:-1*Number.MAX_VALUE,sum:0,values:[],count:0},null==c&&(c=function(){return!0}),d=function(a){null==a||isNaN(a)||(h.values.push(a),h.sum+=a,a<h.min&&(h.min=a),a>h.max&&(h.max=a),h.count+=1)},j=function(a,e){if(c(a,e))return d(null!=b&&"function"===xa(b)?b(a):null!=b&&"string"===xa(b)||"number"===xa(b)?a[b]:a)},
"array"===xa(a))for(g=0,f=a.length;g<f;g++)i=a[g],j(i);else for(e in a)i=a[e],j(i,e);return h.domain=[h.min,h.max],h.limits=function(a,b){return t.limits(h,a,b)},h},t.limits=function(a,b,c){var d,e,f,g,h,i,j,k,l,n,o,p,q,r,s,u,v,w,x,y,z,A,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,W,X,Z,$,_,aa,ca,da,ea,fa,ga,ha,ia,ja;if(null==b&&(b="equal"),null==c&&(c=7),"array"===xa(a)&&(a=t.analyze(a)),E=a.min,Y=a.max,a.sum,ia=a.values.sort(function(a,b){return a-b}),1===c)return[E,Y];if(C=[],"c"===b.substr(0,1)&&(C.push(E),C.push(Y)),"e"===b.substr(0,1)){for(C.push(E),y=K=1,O=c-1;1<=O?K<=O:K>=O;y=1<=O?++K:--K)C.push(E+y/c*(Y-E));C.push(Y)}else if("l"===b.substr(0,1)){if(E<=0)throw"Logarithmic scales are only possible for values > 0";for(F=Math.LOG10E*V(E),D=Math.LOG10E*V(Y),C.push(E),y=ja=1,P=c-1;1<=P?ja<=P:ja>=P;y=1<=P?++ja:--ja)C.push(ba(10,F+y/c*(D-F)));C.push(Y)}else if("q"===b.substr(0,1)){for(C.push(E),y=d=1,W=c-1;1<=W?d<=W:d>=W;y=1<=W?++d:--d)L=(ia.length-1)*y/c,M=B(L),M===L?C.push(ia[M]):(N=L-M,C.push(ia[M]*(1-N)+ia[M+1]*N));C.push(Y)}else if("k"===b.substr(0,1)){for(H=ia.length,r=new Array(H),w=new Array(c),ea=!0,I=0,u=null,u=[],u.push(E),y=e=1,X=c-1;1<=X?e<=X:e>=X;y=1<=X?++e:--e)u.push(E+y/c*(Y-E));for(u.push(Y);ea;){for(z=f=0,Z=c-1;0<=Z?f<=Z:f>=Z;z=0<=Z?++f:--f)w[z]=0;for(y=g=0,$=H-1;0<=$?g<=$:g>=$;y=0<=$?++g:--g){for(ha=ia[y],G=Number.MAX_VALUE,z=h=0,_=c-1;0<=_?h<=_:h>=_;z=0<=_?++h:--h)(x=m(u[z]-ha))<G&&(G=x,s=z);w[s]++,r[y]=s}for(J=new Array(c),z=i=0,aa=c-1;0<=aa?i<=aa:i>=aa;z=0<=aa?++i:--i)J[z]=null;for(y=j=0,ca=H-1;0<=ca?j<=ca:j>=ca;y=0<=ca?++j:--j)v=r[y],null===J[v]?J[v]=ia[y]:J[v]+=ia[y];for(z=k=0,da=c-1;0<=da?k<=da:k>=da;z=0<=da?++k:--k)J[z]*=1/w[z];for(ea=!1,z=l=0,Q=c-1;0<=Q?l<=Q:l>=Q;z=0<=Q?++l:--l)if(J[z]!==u[y]){ea=!0;break}u=J,I++,I>200&&(ea=!1)}for(A={},z=n=0,R=c-1;0<=R?n<=R:n>=R;z=0<=R?++n:--n)A[z]=[];for(y=o=0,S=H-1;0<=S?o<=S:o>=S;y=0<=S?++o:--o)v=r[y],A[v].push(ia[y]);for(fa=[],z=p=0,T=c-1;0<=T?p<=T:p>=T;z=0<=T?++p:--p)fa.push(A[z][0]),fa.push(A[z][A[z].length-1]);for(fa=fa.sort(function(a,b){return a-b}),C.push(fa[0]),y=q=1,U=fa.length-1;q<=U;y=q+=2)ga=fa[y],isNaN(ga)||-1!==C.indexOf(ga)||C.push(ga)}return C},E=function(a,b,c){var d,f,h,i;return d=ya(arguments),a=d[0],b=d[1],c=d[2],isNaN(a)&&(a=0),a/=360,a<1/3?(f=(1-b)/3,i=(1+b*w(g*a)/w(e-g*a))/3,h=1-(f+i)):a<2/3?(a-=1/3,i=(1-b)/3,h=(1+b*w(g*a)/w(e-g*a))/3,f=1-(i+h)):(a-=2/3,h=(1-b)/3,f=(1+b*w(g*a)/w(e-g*a))/3,i=1-(h+f)),i=U(c*i*3),h=U(c*h*3),f=U(c*f*3),[255*i,255*h,255*f,d.length>3?d[3]:1]},ga=function(){var a,b,c,d,e,f,h,i;return h=ya(arguments),f=h[0],b=h[1],a=h[2],g=2*Math.PI,f/=255,b/=255,a/=255,e=Math.min(f,b,a),d=(f+b+a)/3,i=1-e/d,0===i?c=0:(c=(f-b+(f-a))/2,c/=Math.sqrt((f-b)*(f-b)+(f-a)*(b-a)),c=Math.acos(c),a>b&&(c=g-c),c/=g),[360*c,i,d]},t.hsi=function(){return function(a,b,c){c.prototype=a.prototype;var d=new c,e=a.apply(d,b);return Object(e)===e?e:d}(a,Ca.call(arguments).concat(["hsi"]),function(){})},k.hsi=E,a.prototype.hsi=function(){return ga(this._rgb)},J=function(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p;return"hsl"===d?(o=a.hsl(),p=b.hsl()):"hsv"===d?(o=a.hsv(),p=b.hsv()):"hcg"===d?(o=a.hcg(),p=b.hcg()):"hsi"===d?(o=a.hsi(),p=b.hsi()):"lch"!==d&&"hcl"!==d||(d="hcl",o=a.hcl(),p=b.hcl()),"h"===d.substr(0,1)&&(g=o[0],m=o[1],j=o[2],h=p[0],n=p[1],k=p[2]),isNaN(g)||isNaN(h)?isNaN(g)?isNaN(h)?f=Number.NaN:(f=h,1!==j&&0!==j||"hsv"===d||(l=n)):(f=g,1!==k&&0!==k||"hsv"===d||(l=m)):(e=h>g&&h-g>180?h-(g+360):h<g&&g-h>180?h+360-g:h-g,f=g+c*e),null==l&&(l=m+c*(n-m)),i=j+c*(k-j),t[d](f,l,i)},l=l.concat(function(){var a,b,c,d;for(c=["hsv","hsl","hsi","hcl","lch","hcg"],d=[],b=0,a=c.length;b<a;b++)X=c[b],d.push([X,J]);return d}()),M=function(a,b,c,d){var e,f;return e=a.num(),f=b.num(),t.num(e+(f-e)*c,"num")},l.push(["num",M]),K=function(b,c,d,e){var f,g;return f=b.lab(),g=c.lab(),new a(f[0]+d*(g[0]-f[0]),f[1]+d*(g[1]-f[1]),f[2]+d*(g[2]-f[2]),e)},l.push(["lab",K])}).call(this);
function onIframeLoad(iframe, cb) {
	if(iframe.loadedIframeCheck && iframe.loadedIframeCheck == true) {
		console.log('frame loaded-');
		setTimeout(function(){
			cb();
		}, 1000);
	} else {
		iframe.onload = function () {
			console.log('frame loaded--');
			cb();
		};
	}
};

(function() {
	//iframe height detection
	var appIframe = $('.js-app-iframe');

	var iframe = document.getElementsByClassName('js-app-iframe')[0];
	if(iframe && ROUTE.indexOf('ds_components_app_') > -1) {
		var dataFrame = window.frames[0];
		onIframeLoad(dataFrame, function(){
			dataFrame.loadGlobalsStyle(PROJECT);
		});
	}
}());


/**********************
	Input Color component
***********************/
(function() {
	this.ColorInput = function(element) {
		this.element = element;
		this.inputColorHex = $(this.element).find('.js-app-color-picker__hex').find('input');
		this.inputPreview = $(this.element).find('.js-app-color-picker__color');
		this.inputColor = this.inputPreview.find('input');
		this.inputColorSupported = inputColorSupported();
		this.appColorSidebar = $(this.element).parents('.js-app-sidebar--globals');
		this.hexValue = this.inputColorHex.val();
		this.initColorInput();
	};

	ColorInput.prototype.initColorInput = function() {
		var self = this;
		//hide/show element
		this.inputColor.toggle(this.inputColorSupported);
		//listen to events
		//color input - change 
		this.inputColor.on("input", function(event) {
			self.updateColor(event.target.value, true, true);
		});
		this.inputColor.on("change", function(event) {
			self.updateColor(event.target.value, true, true);
		});
		// text input - change -> hex
		this.inputColorHex.on('focusout', function(){
			if(self.hexValue == self.inputColorHex.val()) return;
			self.updateColor($(this).val(), false, true);
		});
		this.inputColorHex.on('keyup', function(event){
			if (event.key === "Enter" && self.hexValue != self.inputColorHex.val()) {
				self.updateColor($(this).val(),  false, true);
			}
		});

		$(this.element).on('update-picker', function(event, value) {
			self.updateColor(chroma.hsl(value).hex(), false, false);
		});
		//this is triggered only by the contrast section in the colors global
		$(this.element).on('update-contrast-picker', function(event, value1, value2) {
			if($(self.element).parents('.js-app-editor-section__bg-color-picker').length > 0) {
				self.updateColor(chroma.hsl(value1).hex(), false, false);
			} else if($(self.element).parents('.js-app-editor-section__hc-color-picker').length > 0) {
				self.updateColor(chroma.hsl(value2).hex(), false, false);
			}
		});
	};

	ColorInput.prototype.updateColor = function(color, bool, emitEvent) {
		//first -> make sure no ; are inserted
		color = color.replace(';', '');
		var self = this;
		if(color.indexOf('(') < 0 && color.indexOf('#') < 0) {
			this.inputPreview.css('background-color', '#'+color);
		} else {
			this.inputPreview.css('background-color', color);
		}
		this.inputColorHex.val(color);
		this.hexValue = color;
		//need to update the color preview next to the input element
		if(!bool) {
			this.inputColor.val(chroma(color).hex());
		}
		if(emitEvent && this.appColorSidebar.length > 0 ) {
			this.appColorSidebar.trigger('color-picker-updated', [getHslFromHex(color), $(self.element)]);
		}
	};

	function inputColorSupported() {
		var colorInput = $('<input type="color" value="!" />')[0];
		return colorInput.type === 'color' && colorInput.value !== '!';
	};

	//initialize the Modal objects
	var colorInputs = document.getElementsByClassName('js-color-picker');
	if( colorInputs.length > 0 ) {
		for( var i = 0; i < colorInputs.length; i++) {
			(function(i){new ColorInput(colorInputs[i]);})(i);
		}
	}
}());

/**********************
	Input Slider component
***********************/
(function() {
	this.InputSlider = function(element) {
		this.element = element;
		this.rangeInput = this.element.children('input');
		this.textInput = this.element.siblings('.js-slider-control__text');
		this.initSlider();
	};

	InputSlider.prototype.initSlider = function() {
		var self = this;
		//init slider
		this.setSlider();
		
		this.textInput.on('input reset-slider', function(event){
			self.setSlider();
		});

		this.rangeInput.on('input', function(event){
			self.textInput.val(self.rangeInput.val()+'%');
			self.textInput.trigger('input');
		});
	};
	
	InputSlider.prototype.setSlider = function() {
		this.rangeInput.val(parseInt(this.textInput.val()));
		// update slider background
		var fill = parseInt(this.rangeInput.val()),
			empty = 100 - fill;
		this.element.get(0).style.setProperty('--slider-fill-value', fill+'%');
		this.element.get(0).style.setProperty('--slider-empty-value', empty+'%'); 
	};


	//initialize the Modal objects
	var inputSlider = document.getElementsByClassName('js-slider-control__input');
	if( inputSlider.length > 0 ) {
		for( var i = 0; i < inputSlider.length; i++) {
			(function(i){new InputSlider($(inputSlider[i]));})(i);
		}
	}
}());

/**********************
	iOS banner
***********************/
(function() {
	var iosBanner = $('.js-ios-pivot');
	if(iosBanner.length > 0 ) {
		if(!!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform)) iosBanner.removeClass('ios-pivot--is-hidden');
	}
}());

//here define the functions that need to be used inside the app frame
function checkPercentage(val) {
	val = Number(val);
	if (val < 0) val = 0;
	if (val > 1) val = 1;
	return Number(val.toFixed(2));
};

function checkHue(hue){
	if(isNaN(hue)) hue = 0;
	return Math.round(parseFloat(hue));
};

function getHslFromHex(hex) {
	if(hex.indexOf('hsl(') > -1) {
		//format is already hsl(, , )
		return getHslFromHslString(hex);
	}
	var color = chroma(hex).hsl();
	if(isNaN(color[0])) color[0]=0;
	color[0] = Math.round(color[0]);
	color[1] = Number(Math.round(color[1]*100)/100);
	color[2] = Number(Math.round(color[2]*100)/100);
	return color;
};

function getHslFromHslString(hex) {
	var color = hex.replace('hsl(', '').replace(')', '').split(',');
	color[0] = Number(color[0].trim());
	color[1] = parseFloat((Number(color[1].trim().replace('%', ''))/100).toFixed(2));
	color[2] = parseFloat((Number(color[2].trim().replace('%', ''))/100).toFixed(2));
	return color;
};

function getHexFromHsl(hsl) {
	return chroma.hsl(hsl[0], hsl[1], hsl[2]).hex();
};

function convertStringToHsl(string) {
	string = Number(string.replace('%', ''));
	return Number((string/100).toFixed(2));
};

function selectSidebarSection(target) {
	$('.js-app-content__group').trigger('selectSection', [target]);
};

function triggerSectionSelection(target) {
	window.frames[0].selectIframeSection(target);
};

function triggerTabSelection(tab) {
	window.frames[0].selectIframeTab(tab);
};

function closeActivePopups() {
	var colorSelection = $('.js-app-menu--color'),
		appMenu = $('.js-app-header-menu-toggle');
	if(colorSelection.length > 0) colorSelection.trigger('close-color-selection');
	if(appMenu.length > 0 ) appMenu.trigger('close-app-menu-popup');
};

function revealComponent() {
	var appCanvas = $('.js-app-canvas');
	appCanvas.find('iframe').addClass('app-canvas__iframe--content-is-loaded').end().find('.js-app-canvas__loader').remove();
	if(appCanvas.hasClass('js-app-canvas--component')) {
		console.log("%cHi there! 👋 This page is for demo purposes only. We have minified HTML, CSS and JavaScript and shortened class names. Make sure to access the component code using the \"View code\" button.", "font-size:14px");
		console.log("%cAny doubts, get in touch at help@codyhouse.co", "font-size:12px");	
	}
};

function getRGBfromHSL(hsl) {
	return chroma.hsl(hsl).rgb();
};

function toggleColorLink(colorSection, bool) {
	$('.js-app-sidebar-editor--colors').trigger('updateColorLink', [colorSection, bool]);
};
(function() {

	/************************/
	/* 	color selection popup */
	/************************/
	this.ColorSelection = function(element) {
		this.element = element;
		this.basicSwatches = $(this.element).find('.js-app-menu__color-swatches');
		this.variationsSwatches = $(this.element).find('.js-app-menu__color-variations');

		this.stateA = $(this.element).find('.js-app-menu__state-a');
		this.stateB = $(this.element).find('.js-app-menu__state-b');
		this.stateBCustomOpacity = this.stateB.find('.js-app-menu__color-custom-opacity');
		this.customOpacityInput = this.stateBCustomOpacity.find('input');
		this.primaryColors = [];//this is an array of 5 colors
		this.accentColors = [];//this is an array of 5 colors
		this.blackColors = [];//this is a color string
		this.whiteColors = [];//this is a color string
		this.contrastColors = []; //this is an array of 5 elements
		this.warningColors = []; //this is an array of 5 elements
		this.successColors = []; //this is an array of 5 elements
		this.errorColors = []; //this is an array of 5 elements
		this.opacities = [];
		this.colorGroups = $('.js-app-editor-property__color-group');

		//some default states 
		this.mainColorLabels = ['primary', 'accent', 'success', 'warning', 'error'];
		this.mainColorVariationLabel = ['-lighter', '-light', '', '-dark', '-darker'];
		this.customColorLabels = [];
		this.contrastColorVariationLabel = ['-bg', '-contrast-lower', '-contrast-low', '-contrast-medium', '-contrast-high', '-contrast-higher'];
		this.contrastVariations = getColorContrastPercentages();

		this.colorValues = []; //I'm going to pass this to the buttons object -> list of color values
		this.loadPreset();
		this.eventListener();
	};

	ColorSelection.prototype.loadPreset = function() {
		//you should load this from the db
		//for now just static
		if(PROJECT && PROJECT.colors) {
			this.initColorsFromProject();
		} else {
			this.initColors();
		}
		this.initColorValues();
		this.initUiColors();
	};

	ColorSelection.prototype.initColors = function() {
		this.primaryColors = getDefaultMainColorVariation('primary');
		this.accentColors = getDefaultMainColorVariation('accent');
		this.warningColors = getDefaultMainColorVariation('warning');
		this.successColors = getDefaultMainColorVariation('success');
		this.errorColors = getDefaultMainColorVariation('error');
		this.blackColors = [getHslFromHex('#1c1c21')];
		this.whiteColors = [getHslFromHex('#ffffff')];
		this.contrastColors = getContrastVariation('#ffffff', '#1c1c21', this.contrastVariations);
	};

	ColorSelection.prototype.initColorsFromProject = function() {
		var colors = JSON.parse(PROJECT.colors);
		this.mainColorLabels = Object.values(colors['mainColorLabels']);
		if(colors['customColorLabels']) this.customColorLabels = Object.values(colors['customColorLabels']);
		for(var i = 0; i < this.mainColorLabels.length; i++) {
			var obj = colors[this.mainColorLabels[i]];
			
			if( !this[this.mainColorLabels[i]+'Colors'] ) this[this.mainColorLabels[i]+'Colors'] = [];
			for(var j = 0; j < 5; j++) {
				this[this.mainColorLabels[i]+'Colors'].push(Object.values(obj[0][j]));
			}
		}

		for(var i = 0; i < 3; i++) {
			if(colors['blackColors'][0][i]) this.blackColors.push(Object.values(colors['blackColors'][0][i]));
			if(colors['whiteColors'][0][i]) this.whiteColors.push(Object.values(colors['whiteColors'][0][i]));
		}

		for(var i = 0; i < 6; i++) {
			this.contrastColors.push(Object.values(colors['contrastColors'][0][i]));
		}
	};

	ColorSelection.prototype.initColorValues = function() {
		this.colorValues['not-specified'] = '';this.colorValues['transparent'] = 'transparent';this.colorValues['inherit'] = 'inherit';
		//main + custom colors
		for(var i = 0; i < this.mainColorLabels.length; i++) {
			for(var j = 0; j < this.mainColorVariationLabel.length; j++) {
				this.colorValues['--color-'+this.mainColorLabels[i]+this.mainColorVariationLabel[j]] = getHslaFromHsl(this[this.mainColorLabels[i]+'Colors'][j], 1);
			}
		}
		//black
		for(var i = 0; i < this.blackColors.length; i++) {
			this.colorValues['--color-black'+this.mainColorVariationLabel[2 - i]] = getHslaFromHsl(this.blackColors[i], 1);
		}
		//white
		for(var i = 0; i < this.whiteColors.length; i++) {
			this.colorValues['--color-white'+this.mainColorVariationLabel[2 + i]] = getHslaFromHsl(this.whiteColors[i], 1);
		}
		//contrasts
		for(var i = 0; i < this.contrastColorVariationLabel.length; i++) {
			this.colorValues['--color'+this.contrastColorVariationLabel[i]] = getHslaFromHsl(this.contrastColors[i], 1);
		}
	};

	ColorSelection.prototype.initUiColors = function() {
		this.initMainSwatches();
		this.initBWSwatches();
		this.initContrastSwatches();
	};

	ColorSelection.prototype.initMainSwatches = function() {
		var mainSwatch = this.basicSwatches.filter('[data-colors="main"]'),
			children = mainSwatch.children('li');
		for(var i = 0; i < 2; i++) {
			children.eq(i).children('.js-app-menu__color-preview').attr('style', 'background-color:'+this.colorValues['--color-'+this.mainColorLabels[i]]+';').attr('data-item', '--color-'+this.mainColorLabels[i]);
		}
		var clonesText = this.initCustomColorSwatches(children.eq(0), false);
		mainSwatch.append(clonesText);

		var feedbackSwatch = this.basicSwatches.filter('[data-colors="feedback"]'),
			children = feedbackSwatch.children('li');
		for(var i = 0; i < 3; i++) {
			var j = 2;
			if(this.mainColorLabels[i+2] == 'success') j = 0;
			if(this.mainColorLabels[i+2] == 'warning') j = 1;
			children.eq(j).children('.js-app-menu__color-preview').attr('style', 'background-color:'+this.colorValues['--color-'+this.mainColorLabels[i+2]]+';').attr('data-item', '--color-'+this.mainColorLabels[i+2]);
		}
		var feedbackCloneText = this.initCustomColorSwatches(children.eq(0), true);
		feedbackSwatch.append(feedbackCloneText);
	};

	ColorSelection.prototype.initCustomColorSwatches = function(item, isFeedback) {
		var clonesText = '';
		if(this.mainColorLabels.length > 5) {
			var clone = item.clone().removeClass('app-menu__color-preview--selected');
			for(var i = 5; i < this.mainColorLabels.length; i++) {
				if( (isFeedback && this.mainColorLabels[i].indexOf('custom-fdb') > -1 ) || (!isFeedback && this.mainColorLabels[i].indexOf('custom-fdb') < 0) ) {
					clone.children('.js-app-menu__color-preview').attr('style', 'background-color:'+this.colorValues['--color-'+this.mainColorLabels[i]]+';').attr('data-item', '--color-'+this.mainColorLabels[i]);
					clone.children('.js-app-menu__color-tooltip').text(this.customColorLabels[i-5]);
					clonesText = clonesText + clone[0].outerHTML;
				}
			}
		}
		return clonesText;
	};

	ColorSelection.prototype.initBWSwatches = function() {
		var bwSwatch = this.basicSwatches.filter('[data-colors="b&w"]'),
			children = bwSwatch.children('li');
		children.eq(0).children('.js-app-menu__color-preview').attr('style', 'background-color:'+this.colorValues['--color-black']+';').attr('data-item', '--color-black');
		children.eq(1).children('.js-app-menu__color-preview').attr('style', 'background-color:'+this.colorValues['--color-white']+';').attr('data-item', '--color-white');
	};

	ColorSelection.prototype.initContrastSwatches = function() {
		var contrastSwatch = this.basicSwatches.filter('[data-colors="contrast"]'),
			children = contrastSwatch.children('li');
		for(var i = 0; i < this.contrastColorVariationLabel.length; i++) {
			children.eq(i).children('.js-app-menu__color-preview').attr('style', 'background-color:'+this.colorValues['--color'+this.contrastColorVariationLabel[i]]+';').attr('data-item', '--color'+this.contrastColorVariationLabel[i]);
		}
	};

	ColorSelection.prototype.eventListener = function() {
		var self = this;
		//listen to click on color-preview -> also need to show correct color selection
		$(self.element).on('open-color-selector', function(event, target){
			if(!$(self.element).hasClass('app-menu--is-hidden')) {
				// self.checkOpacity(false); //click on input when another one was open
			}
			var top = target.offset().top + 30;
			if(top + 300 > $(window).height()) top = $(window).height() - 300;
			$(self.element).removeClass('app-menu--is-hidden').css('top', top);
			self.selectInitialColor(target.attr('style').replace('background-color', '').replace(';', '').replace(':', '').trim(), target);
		});
		//switch from state b to state a
		self.stateB.on('click', '.js-app-menu', function(event){
			$(self.element).removeClass('app-menu--state-b');
		});

		//listen to selection of color in popup - state a
		self.stateA.on('click', '.js-app-menu__color-preview', function(event){
			var isSelected = $(event.target).hasClass('app-menu__color-preview--selected');
			self.clickOnColorSectionA($(event.target), isSelected, isSelected);
		});

		//listen to selection of color in popup - state b - variations
		self.variationsSwatches.on('click', '.js-app-menu__color-preview', function(event){
			self.selectNewColor($(event.target), $(event.target).hasClass('app-menu__color-preview--selected'), true);
		});

		//listen to focusout -> close popup
		$(self.element).on('close-color-selection', function(event){
		// 	//check if opacity need to be added
			if($(self.element).hasClass('app-menu--is-hidden')) return;
			$(self.element).addClass('app-menu--is-hidden');
		// 	self.checkOpacity(false);
		});

		//listen to new opacity included - keydown to update bg/enter to add dot
		checkEndTyping(self.customOpacityInput, function(){
			// var percentage = parseInt(self.customOpacityInput.val().replace('%', '')),
			// 	opacityLabel = getOpacitySuffix(percentage),
			var opacityLabel = self.getOpInputForSelection(),
				mainColorLabel = self.stateB.find('.app-menu__color-preview--selected').attr('data-item'),
				mainColor = mainColorLabel+opacityLabel;
			var cssVariable = mainColor;
			if(mainColorLabel.indexOf('custom-') > -1) {
				cssVariable = self.stateB.find('.app-menu__color-preview--selected').next('.js-app-menu__color-tooltip').text()+opacityLabel;
			}
			// $('.js-app-sidebar-editor--buttons').trigger('new-opacity-created', [cssVariable, getNewOpacity(self.colorValues[mainColorLabel], percentage)]);	
			$('.js-app-sidebar-editor--buttons').trigger('new-color-selection', [mainColor, true]);
		});

		this.customOpacityInput.on('focusout', function(){
			var opacityValue = self.customOpacityInput.val(),
				resetOpacity = getPercentageFormat(opacityValue);
			if(opacityValue != resetOpacity ) self.customOpacityInput.val(resetOpacity);
		});
	};
	
	//click on preview in stata a of popup, used when loading initial color as well
	ColorSelection.prototype.clickOnColorSectionA = function(target, isSelected, isStateBSet) {
		var section = target.parents('.js-app-menu__color-swatches').eq(0).attr('data-colors');
		this.stateA.find('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');
		target.addClass('app-menu__color-preview--selected');
		if(!isSelected) {
			// need to get opacity values as well
			var opacity = this.getOpInputForSelection();
			this.sendColorSelection(target.attr('data-item')+opacity);
		}
		if( section  == "default") {
			$(this.element).removeClass('app-menu--state-b');
			this.stateB.find('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');
			return;
		}
		$(this.element).addClass('app-menu--state-b');
		this.showStateB(target, section, isStateBSet);
	};

	ColorSelection.prototype.selectNewColor = function(target, isSelcted, sendColorSelection) {
		if(isSelcted) return;
		target.addClass('app-menu__color-preview--selected').parent().siblings().children('.app-menu__color-preview--selected').removeClass('app-menu__color-preview--selected');
		if(sendColorSelection) {
			var opacity = this.getOpInputForSelection();
			this.sendColorSelection(target.attr('data-item')+opacity);
		}
	};

	ColorSelection.prototype.getOpInputForSelection = function() {
		return getOpInputForSelection(this.customOpacityInput.val());
	};

	ColorSelection.prototype.selectInitialColor = function (color, target) {
		var states = [false,false, false],
			stateAColor,
			stateBColor = false,
			stateCColor = false;
		if( color == 'undefined' ) {
			stateAColor = this.stateA.find('.js-app-menu__color-preview').eq(0);
		} else {
			var colorName = target.attr('data-color-lb').split('-');
			states = this.getAllStatesColor(colorName);	
			stateAColor = this.stateA.find('[data-item="'+states[0]+'"]');
		}
		this.clickOnColorSectionA(stateAColor, true, false);
		stateBColor = states[1] ? this.stateB.find('[data-item="'+states[1]+'"]') : false;
		//trigger click on stateBcolor -> without sending update color
		if(stateBColor) this.selectNewColor(stateBColor, false, false);
		//select opacity element
		(states[2]) ? this.customOpacityInput.val(states[2].slice(-2)+'%') : this.customOpacityInput.val('100%');
	};

	ColorSelection.prototype.getAllStatesColor = function(color) {
		var itemAName, itemBName, itemCName;
		if(color[3] && (color[3] == 'black' || color[3] == 'white')) {
			itemAName = '--color-'+color[3];
			nextItems = this.getStateBCColor(itemAName, color, 4);
			itemBName = nextItems[0];
			itemCName = nextItems[1];
		} else if( color[3] &&  (color[3] == 'primary' || color[3] == 'accent' || color[3] == 'success' || color[3] == 'error' || color[3] == 'warning')) {
			itemAName = '--color-'+color[3];
			nextItems = this.getStateBCColor(itemAName, color, 4);
			itemBName = nextItems[0];
			itemCName = nextItems[1];
		} else if( color[3] &&  color[3] == 'custom' && color[4] == 'fdb') {
			itemAName = '--color-'+color[3]+'-'+color[4]+'-'+color[5];
			nextItems = this.getStateBCColor(itemAName, color, 6);
			itemBName = nextItems[0];
			itemCName = nextItems[1];
		} else if( color[3] &&  color[3] == 'custom' ) {
			itemAName = '--color-'+color[3]+'-'+color[4];
			nextItems = this.getStateBCColor(itemAName, color, 5);
			itemBName = nextItems[0];
			itemCName = nextItems[1];
		} else if( color[3] && color[3] == 'bg') {
			itemAName = '--color-bg';
			itemBName = itemAName;
			itemCName = (color[4]) ? itemBName + '-' + color[4] : false;
		} else if( color[3] && color[3] == 'contrast' ) {
			itemAName = '--color-'+color[3]+'-'+color[4];
			itemBName = itemAName;
			itemCName = (color[5]) ? itemBName + '-' + color[5] : false;
		} else {
			itemAName = color[0];
		}
		return [itemAName, itemBName, itemCName];
	};

	ColorSelection.prototype.getStateBCColor = function(itemAName, color, index) {
		var itemBName, itemCName;
		if(color[index] && (color[index] == 'light' || color[index] == 'lighter' || color[index] == 'dark' || color[index] == 'darker')) {
			itemBName = itemAName + '-' + color[index];
			itemCName = (color[index+1]) ? itemBName + '-' + color[index+1] : false;
		} else {
			itemBName = itemAName;
			itemCName = (color[index]) ? itemBName + '-' + color[index] : false;
		}
		return [itemBName, itemCName];
	};

	ColorSelection.prototype.sendColorSelection = function(label) {
		var sidebar = $('.js-app-sidebar-editor--buttons');
		if(sidebar.length == 0 ) {
			sidebar = $('.js-app-sidebar-editor--shared-styles');
		}
		sidebar.trigger('new-color-selection', [label, true]);
	};

	ColorSelection.prototype.showStateB = function(target, section, selected) {
		var self = this;
		if(selected) return;
		var label = target.next().text();
		switch(section) {
			case 'main': self.getVariationsMain(label, target.attr('data-item')); break;
			case 'b&w': self.getVariationsBW(label); break;
			case 'contrast': self.getVariationsContrast(label); break;
			default: self.getVariationsMain(label, target.attr('data-item'));
		}
	};

	ColorSelection.prototype.getVariationsMain = function(label, item) {
		var value = item.replace('--color-', '');
		//custom color
		var clone = this.variationsSwatches.children('li').eq(0).clone(),
			textClones = '';
		clone.removeClass('app-menu__color-preview--selected').children('.js-app-menu__color-preview');
		for(var i = 0; i < this.mainColorVariationLabel.length ; i++) {
			clone.children('.js-app-menu__color-preview').attr('style', 'background-color:'+this.colorValues['--color-'+value+this.mainColorVariationLabel[i]]+';').attr('data-item', '--color-'+value+this.mainColorVariationLabel[i]).toggleClass('app-menu__color-preview--selected', i == 2);
			clone.children('.js-app-menu__color-tooltip').text(label+this.mainColorVariationLabel[i]);
			textClones = textClones + clone[0].outerHTML;
		}

		this.variationsSwatches.html(textClones);
	};

	ColorSelection.prototype.getVariationsBW = function(label) {
		var clone = this.variationsSwatches.children('li').eq(0).clone(),
			textClones = '';
		clone.removeClass('app-menu__color-preview--selected').children('.js-app-menu__color-preview');
		if(label == '--color-black') {
			for(var i = 0; i < this.blackColors.length; i++) {
				clone.children('.js-app-menu__color-preview').attr('style', 'background-color:'+this.colorValues['--color-black'+this.mainColorVariationLabel[2 - i]]+';').attr('data-item', '--color-black'+this.mainColorVariationLabel[2 - i]).toggleClass('app-menu__color-preview--selected', i == 0);
				clone.children('.js-app-menu__color-tooltip').text('--color-black'+this.mainColorVariationLabel[2 - i]);
				textClones = textClones + clone[0].outerHTML;
			}
		} else {
			for(var i = 0; i < this.whiteColors.length; i++) {
				clone.children('.js-app-menu__color-preview').attr('style', 'background-color:'+this.colorValues['--color-white'+this.mainColorVariationLabel[2 + i]]+';').attr('data-item', '--color-white'+this.mainColorVariationLabel[2 + i]).toggleClass('app-menu__color-preview--selected', i == 0);
				clone.children('.js-app-menu__color-tooltip').text('--color-white'+this.mainColorVariationLabel[2 + i]);
				textClones = textClones + clone[0].outerHTML;
			}
		}
		this.variationsSwatches.html(textClones);
	};

	ColorSelection.prototype.getVariationsContrast = function(label) {
		var clone = this.variationsSwatches.children('li').eq(0).clone();
		clone.children('.js-app-menu__color-preview');
		clone.children('.js-app-menu__color-preview').attr('style', 'background-color:'+this.colorValues[label]+';').attr('data-item', label).addClass('app-menu__color-preview--selected');
		clone.children('.js-app-menu__color-tooltip').text(label);
		this.variationsSwatches.html(clone[0].outerHTML);
	};

	function getHslaFromHsl(hsl, opacity) {
		return 'hsla('+parseInt(hsl[0])+', '+parseInt(hsl[1]*100)+'%, '+parseInt(hsl[2]*100)+'%, '+opacity+')';
	};

	function getNewOpacity(value, opacity) {
		if(value) {
			return value.replace('1)', (opacity/100).toFixed(2)+')');
		}
		return value;
	};

	function sortNumber(a,b) {
		return a - b;
	};

	function checkEndTyping(input, cb) {
		var typingTimer;                //timer identifier
		var doneTypingInterval = 400;  //time in ms, 5 second for example

		//on keyup, start the countdown
		input.on('keyup', function () {
		  clearTimeout(typingTimer);
		  typingTimer = setTimeout(cb, doneTypingInterval);
		});

		//on keydown, clear the countdown 
		input.on('keydown', function () {
		  clearTimeout(typingTimer);
		});
	};

	function getOpInputForSelection(val) {
		var opacity = '';
		if( isNaN(parseInt(val)))  return '';
		if( parseInt(val) > 100 ) return '';
		if( parseInt(val) != 100 ) opacity = '-a'+('0'+val.replace('%', '')).slice(-2);
		return opacity;
	};

	var colorSelection = document.getElementsByClassName('js-app-menu--color'),
		colorSelectionObject;
	if( colorSelection.length > 0 ) {
		colorSelectionObject = new ColorSelection(colorSelection[0]);
	}

	function getPercentageFormat(value) {
		var newVal = value;
		if( isNaN(parseInt(newVal))) newVal = '100%';
		if(parseInt(newVal) > 100) newVal = '100%';
		if(newVal.indexOf('%') < 0) newVal = newVal+'%';
		return newVal;
	};

	/************************/
	/* 	Colors Interactions */
	/************************/
	this.Colors = function(element, bool) {
		this.element = element;
		//set starting point
		this.primaryColors = [];//this is an array of 5 colors
		this.accentColors = [];//this is an array of 5 colors
		this.blackColors = [];//this is a color string
		this.whiteColors = [];//this is a color string
		this.contrastColors = []; //this is an array of 5 elements
		this.contrastPecentageColors = [];
		this.warningColors = []; //this is an array of 5 elements
		this.successColors = []; //this is an array of 5 elements
		this.errorColors = []; //this is an array of 5 elements
		this.themes = [];
		this.fontRendering = [];
		this.colorLinks = [];
		
		//some default states 
		//this should include the custom colors, if user has already created them
		this.mainColorLabels = ['primary', 'accent', 'warning', 'success', 'error'];
		this.customColorLabels = [];
		this.selectedColor = 'primary'; //store what color the user is interacting with (e.g., main, accent ...)
		this.selectedTheme = 0;


		//used to get the color variations of black and white
		this.blackVariations = [[0, 0], [0, 0.1], [0, 0.2]];
		this.whiteVariations = [[0, 0], [0, -0.1], [0, -0.2]];
		//contrast variations
		this.contrastVariations = getColorContrastPercentages();

		//store items 
		this.colorPicker = $(this.element).find('.js-color-picker');
		//main colors
		this.mainColorsSection = $(this.element).find('.js-app-editor--main-colors');
		this.mainColorVariationsInput = $(this.element).find('.js-main-color-variation');
		this.mainColorVariationsSidebar = $(this.element).find('.js-app-editor--main-colors');
		//black&white
		this.blackWhiteSection = $(this.element).find('.js-app-editor--black-white'); 
		//contrast
		this.contrastSection = $(this.element).find('.js-app-editor--contrast'); 
		this.contrastInputs = this.contrastSection.find('.js-app-editor-section__contrast-inputs');
		this.fontRenderingSection = this.contrastSection.find('.js-app-editor-section__font-rendering');
		//color pickers 
		this.basicColorPicker = $(this.element).find('.js-app-editor-section__color-picker');
		this.bgColorPicker = $(this.element).find('.js-app-editor-section__bg-color-picker');
		this.hcColorPicker = $(this.element).find('.js-app-editor-section__hc-color-picker');

		//check if the ui has been updated for that specific color variable
		this.mainColorShown = '';
		this.blackWhiteShown = '';
		this.contrastShown = '';
		
		this.colorOpacities = [];

		//iframe
		this.iframe = window.frames[0];
		this.colorsLoaded = false;
		if(bool) return;
		//check for the frame to be loaded
		this.initFrame();
		this.loadPreset();
		this.eventListener();
		//custom colors
		//this.mainColorLabels = ['primary', 'accent', 'warning', 'success', 'error', 'custom-0']
		//this.customColorLables = ['--color-secondary', ...]
		//to access custom color -> this['custom-0Colors'][themeIndex]
		//opacities -> this.colorOpacities['--color-custom-0'] = ['20', '40']
	};

	Colors.prototype.initFrame = function() {
		var self = this;
		//listen for the onload event of the frame
		onIframeLoad(self.iframe, function(){
			self.frameIsLoaded();
		});
	};
	
	Colors.prototype.frameIsLoaded = function() {
		var self = this;
		if(self.colorsLoaded) {
			loadProjectColorsForColors(this.iframe);
			loadProjectTypographyForButtons(this.iframe);
			loadProjectSpacingForButtons(this.iframe);
			loadProjectButtonsForColors(this.iframe);
			loadProjectFormsForColors(this.iframe);
			self.updateColorsDemo(false);
			self.updateColorLinks();
			showIframe();
		} else {
			setTimeout(function(){
				self.frameIsLoaded();
			}, 100);
		}
	};

	Colors.prototype.loadPreset = function() {
		//this is the function that will retrieve saved data from the database 
		// if user has already created a color palette 
		// - load it - PROJECT.colors and PROJECT.color_opacities
		// - update the Colors object
		if(PROJECT && PROJECT.colors) {
			this.initColorsFromProject(JSON.parse(PROJECT.colors));
		} else {
			//if not saved in the db
			this.themes = ['Default'];
			this.initColors(0); 
		}
		
		this.setThemeColors();
		this.colorsLoaded = true;
	};

	Colors.prototype.setThemeColors = function() {
		var self = this;
		//this function should be used to update the sidebar inputs -> main colors/ contrast / black and white
		//when a new team is selected (or even when the first team is loaded - if there are )
		//reset the variables for ui update
		this.mainColorShown = '';
		this.blackWhiteShown = '';
		this.contrastShown = '';
		//set colors now - should use one of the followings according to this.selectedColor
		switch(self.selectedColor) {
			case 'black': self.setBlackWhite();break;
			case 'white': self.setBlackWhite();break;
			case 'contrast': self.setContrast();break;
			default: self.setMainColors();
		}
	};

	Colors.prototype.initColors = function(index) {
		//index -> theme index
		//set main colors
		// if you update this -> you'll need to update the same in the ColorSelection as well
		this.primaryColors[index] = getDefaultMainColorVariation('primary');
		this.accentColors[index] = getDefaultMainColorVariation('accent');
		this.warningColors[index] = getDefaultMainColorVariation('warning');
		this.successColors[index] = getDefaultMainColorVariation('success');
		this.errorColors[index] = getDefaultMainColorVariation('error');
		//set black and white
		this.blackColors[index] = [getHslFromHex('#1c1c21')];
		this.whiteColors[index] = [getHslFromHex('#ffffff')];
		//set contrast
		this.contrastPecentageColors[index] = this.contrastVariations.slice(0);
		this.contrastColors[index] = getContrastVariation('#ffffff', '#1c1c21', this.contrastPecentageColors[this.selectedTheme]);
		this.fontRendering[index] = false;
	};

	Colors.prototype.initColorsFromProject = function(colors) {
		// var colors = JSON.parse(PROJECT.colors);
		this.themes = [];
		this.mainColorLabels = [];
		this.customColorLabels = [];
		this.fontRendering = [];
		this.themes = Object.values(colors['themes']);
		this.mainColorLabels = Object.values(colors['mainColorLabels']);
		
		if(colors['customColorLabels']) this.customColorLabels = Object.values(colors['customColorLabels']);
		
		for(var i = 0; i < this.mainColorLabels.length; i++) {
			var obj = colors[this.mainColorLabels[i]];
			this[this.mainColorLabels[i]+'Colors'] = this.convColorToArr(obj);
		}

		this.blackColors = this.convColorToArr(colors['blackColors']);
		this.whiteColors = this.convColorToArr(colors['whiteColors']);
		this.contrastColors = this.convColorToArr(colors['contrastColors']);
		this.contrastPecentageColors = this.convPerceToArr(colors['contrastPecentageColors']);
		// font smoothing
		if(colors['fontRendering']) {
			this.fontRendering = Object.values(colors['fontRendering']);
		} else {
			// if it was not defined -> set it to false
			for(var i = 0; i < this.themes.length; i++) {
				this.fontRendering[i] = false;
			}
		}

		// color links among themes
		if(colors['colorLinks']) {
			for (var color in colors['colorLinks']) {
				if (colors['colorLinks'].hasOwnProperty(color)) {
					this.colorLinks[color] = colors['colorLinks'][color];
				}
			}
		}
	};

	Colors.prototype.convColorToArr = function(obj){
		var array = [];
  	for (var property in obj) {
	    if (obj.hasOwnProperty(property)) {
	    	var subArray = [];
	    	var subObj = obj[property];
	    	for (var property2 in subObj) {
	    		if (subObj.hasOwnProperty(property2)) {
	    			subArray.push(Object.values(subObj[property2]));
	    		}
	    	}
		    	
	      array.push(subArray);
	    }
		}
		return array;
	};

	Colors.prototype.convPerceToArr = function(obj){
		var array = [];
  	for (var property in obj) {
	    if (obj.hasOwnProperty(property)) {
	      array.push(Object.values(obj[property]));
	    }
		}
		return array;
	};

	Colors.prototype.initThemeColors = function(index) {
		//set new theme equal to default color
		this.primaryColors[index] = this.primaryColors[0].slice(0);
		this.accentColors[index] = this.accentColors[0].slice(0);
		this.warningColors[index] = this.warningColors[0].slice(0);
		this.successColors[index] = this.successColors[0].slice(0);
		this.errorColors[index] = this.errorColors[0].slice(0);
		this.blackColors[index] = this.blackColors[0].slice(0);
		this.whiteColors[index] = this.whiteColors[0].slice(0);
		this.contrastPecentageColors[index] = this.contrastPecentageColors[0].slice(0);
		this.contrastColors[index] = this.contrastColors[0].slice(0);
		this.fontRendering[index] = false;
		//init custom colors if any
		for(var i = 0; i < this.mainColorLabels.length; i ++) {
			if(this.mainColorLabels[i].indexOf('custom-') > -1) {
				this[this.mainColorLabels[i]+'Colors'][index] = this[this.mainColorLabels[i]+'Colors'][0];
			}
		}
	};

	Colors.prototype.setBtnColorCustomNiceLabels = function() {
		this.iframe.setBtnColorCustomNiceLabels(this.mainColorLabels, this.customColorLabels);
	};

	Colors.prototype.eventListener = function() {
		var self = this;
		//this event is triggered when one of the colors in the left sidebar is selected
		$(this.element).on('content-selected', function(event, type, target, index){
			self.selectNewColor(type, target);
		});
		//this is triggered when one of the inputs of the main color is updated
		listenToParentInput($(this.mainColorVariationsSidebar), function(event){
			self.colorUpdated($(event.currentTarget), 'main');
		});
		//this is triggered when one of the inputs of the black/white color is updated
		listenToParentInput(this.blackWhiteSection, function(event){
			self.colorUpdated($(event.currentTarget), 'bw');
		});
		//this is triggered when one of the inputs of the contrast color is updated
		listenToParentInput(this.contrastInputs, function(event){
			self.contrastColorUpdated($(event.currentTarget));
			self.updateColorsDemo(true, 'contrast');
		});
		// this is triggered when the font rendering option is changed
		this.fontRenderingSection.on('change', function(event){
			self.updateFontRendering(event.target.value);
			self.updateColorsDemo(true, 'fontRendering');
		});

		//this event is triggered when the color picker is updated
		$(this.element).on('color-picker-updated', function(event, color, pickerElem){
			//new color has been selected
			if( self.mainColorLabels.indexOf(self.selectedColor) > -1 ) {
				//check if we are changing a main color 
				self.setMainColors(color);
			} else if( self.selectedColor == 'white' || self.selectedColor == 'black') {
				self.setBlackWhite(color);
			} else {
				self.setContrast(color, pickerElem);
			}
			self.updateColorsDemo(true, self.selectedColor);
		}); 
		//this event is triggered when a new theme is added in the left sidebar
		$(this.element).on('content-switch-added', function(event, type, title){
			if(type != 'colors') return;
			self.themes.push(title);
			self.selectedTheme = self.themes.length - 1;
			self.initThemeColors(self.selectedTheme);
			self.setThemeColors();
			self.updateColorsDemo(true);
		}); 
		//this event is triggered when a new theme is selected in the left sidebar
		$(this.element).on('content-switch-selected', function(event, type, index){
			if(type != 'colors') return;
			self.selectedTheme = index;
			//if this is the first time (theme was already create and retrieved from the database)
			// you should make sure the initial colors are already set
			self.setThemeColors();
			self.updateColorsDemo(false);
		}); 
		//this event is triggered when a theme is edited in the left sidebar
		$(this.element).on('content-switch-edited', function(event, type, index, title){
			if(type != 'colors') return;
			if(self.themes[index] != title && IS_LOGGED == '1') SaveAlert.yes();
			self.themes[index] = title;
		});
		//this event is triggered when a theme is deleted in the left sidebar
		$(this.element).on('content-switch-deleted', function(event, type, index, selected){
			if(type != 'colors') return;
			self.removeTheme(type, index, selected);
			self.updateColorsDemo(true);
		});

		//black&white events
		//add a new black or white variation
		this.blackWhiteSection.on('click', '.js-btn-create', function(event){
			self.createBlackWhiteVariation();
			self.blackWhiteSection.children().eq(0).removeClass('app-editor-section__title--hide-body');
			self.updateColorsDemo(true, self.selectedColor);
		});
		//remove a black or white variation
		this.blackWhiteSection.on('click', '.js-btn-delete', function(event){
			self.deleteBlackWhiteVariation($(event.currentTarget).parents('.js-app-editor__color-bw').index());
			self.updateColorsDemo(true, self.selectedColor);
		});

		//custom colors
		//a new custom color has been created
		$(this.element).on('custom-content-added', function(event, type, title, customLabel) {
			if(type != 'colors') return;
			var colorCustomLabel = customLabel.replace('#color-', '');
			//create this new color for each theme
			self[colorCustomLabel+'Colors'] = [];
			for(var i = 0; i < self.themes.length; i++) self[colorCustomLabel+'Colors'][i] = self.primaryColors[0];
			//push the label to the main color labels
			self.mainColorLabels.push(colorCustomLabel);
			self.customColorLabels.push(title);//store labels somewhere 
			self.selectNewColor(type, '--color-'+colorCustomLabel);
			self.updateColorsDemoNewCustom(self[colorCustomLabel+'Colors'][self.selectedTheme], title, colorCustomLabel)
		});
		//a custom color name has been updated
		$(this.element).on('custom-content-edited', function(event, type, index, title, section) {
			if(type != 'colors') return;
			self.customColorLabels[self.mainColorLabels.indexOf(section.replace('#color-', '')) - 5] = title;
			self.updateColorsDemoEditCustom(section, title);
		});
		//a custom color has been removed
		$(this.element).on('custom-content-removed', function(event, type, index, labelId) {
			if(type != 'colors') return;
			var label = labelId.replace('#color-', ''),
				indexColor = self.mainColorLabels.indexOf(label);
			self.mainColorLabels.splice(indexColor, 1);
			self.customColorLabels.splice((indexColor-5), 1);
			self[label+'Colors'] = [];
			self.updateColorsDemoRemoveCustom(label);
			// remove color from color link array
			if(self.colorLinks[label]) self.colorLinks[label] = false;
		});

		// this event is triggered when the link button is clicked inside the color demo
		$(this.element).on('updateColorLink', function(event, section, bool){
			self.colorLinks[section.replace('#color-', '')] = bool;
		});
	};

	Colors.prototype.selectNewColor = function(type, target) {
		if(type != 'colors') return;
		if( target.indexOf('--color-black') > -1 || target.indexOf('--color-white') > -1) {
			this.selectedColor = target.replace('--color-', '');
			this.resetSidebarSections('black-white');
			this.setBlackWhite();
		} else if( target.indexOf('--color-') > -1 ) {
			// this is a main color -> update it
			this.selectedColor = target.replace('--color-', '');
			this.resetSidebarSections('main');
			this.setMainColors();
		} else {
			// this is color contrast
			this.selectedColor = 'contrast';
			this.resetSidebarSections('contrast');
			this.setContrast();
		}
	}

	Colors.prototype.resetSidebarSections = function(section) {
		this.mainColorsSection.add(this.blackWhiteSection).add(this.contrastSection).add(this.basicColorPicker).add(this.bgColorPicker).add(this.hcColorPicker).addClass('app-editor-section--is-hidden');
		switch (section) {
			case 'black-white': this.blackWhiteSection.add(this.basicColorPicker).removeClass('app-editor-section--is-hidden');break;
			case 'contrast': this.contrastSection.add(this.bgColorPicker).add(this.hcColorPicker).removeClass('app-editor-section--is-hidden');break;
			default: this.mainColorsSection.add(this.basicColorPicker).removeClass('app-editor-section--is-hidden');
		}
	};

	Colors.prototype.setMainColors = function(color) {
		if(this.mainColorShown.indexOf(this.selectedColor) < 0 || color) {
			//the ui has not been set for this color yet
			//or the color picker is being updated
			this.mainColorShown = this.selectedColor;
			if(color) {
				//this is the case where the color picker was updated
				this.updateMultipleColorsInThemes(getMainColorVariation(color));
			}
			var colors = this[this.selectedColor+'Colors'][this.selectedTheme];
			// this is used for main colors variation (primary/accent/secondary/warning/error/success)
			for(var i = 0; i < 5; i++) {
				this.setMainColor(colors[i], i);
			}
		}
		//update color picker
		if(color === undefined || color === null || !color) {
			this.colorPicker.trigger('update-picker', [ this[this.selectedColor+'Colors'][this.selectedTheme][2]]);
		}
	};

	Colors.prototype.setBlackWhite = function(color) {
		if(this.blackWhiteShown.indexOf(this.selectedColor) < 0  || color ) {
			//the ui has ot been set for this color yet
			this.blackWhiteShown = this.selectedColor;
			var itemLength = this[this.selectedColor+'Colors'][this.selectedTheme].length;
			if(color) {
				//this is the case where the color picker was updated
				this.updateMultipleColorsInThemes(this.getBlackWhiteVariation(color, itemLength));
				// this[this.selectedColor+'Colors'][this.selectedTheme] = this.getBlackWhiteVariation(color, itemLength);
			}
			var colors = this[this.selectedColor+'Colors'][this.selectedTheme];
			//first -> make sure there's the right number of inputs
			this.checkBlackWhiteInputNumber(colors.length);
			// this is used for black/white colors variation
			for(var i = 0; i < colors.length; i++) {
				this.setBlackWhiteColor(colors[i], i);
			}
		}
		//update color picker
		if(color === undefined || color === null || !color) {
			//black and white -> main color is the first one
			this.colorPicker.trigger('update-picker', [ this[this.selectedColor+'Colors'][this.selectedTheme][0]]);
		}
		this.resetBWActionVisibility();
	};

	Colors.prototype.updateMultipleColorsInThemes = function(value) {
		if(this.colorLinks[this.selectedColor]) {
			for(var i = 0; i < this.themes.length; i++) {
				this[this.selectedColor+'Colors'][i] = value;
			}
		} else {
			this[this.selectedColor+'Colors'][this.selectedTheme] = value;
		}
	};

	Colors.prototype.setContrast = function(color, pickerElement) {
		if(this.contrastShown.indexOf(this.selectedColor) < 0 || color) {
			//the ui has not been set for this color yet
			//or the color picker is being updated
			this.contrastShown = this.selectedColor;
			if(color) {
				//this is the case where the color picker was updated
				//first check if this is the bg or the hc color
				var isBgColor = (pickerElement.parents('.js-app-editor-section__bg-color-picker').length > 0);
				var colorsScale = isBgColor 
					? [getHexFromHsl(color), getHexFromHsl(this[this.selectedColor+'Colors'][this.selectedTheme][5])] 
					: [getHexFromHsl(this[this.selectedColor+'Colors'][this.selectedTheme][0]), getHexFromHsl(color)]
				this[this.selectedColor+'Colors'][this.selectedTheme] = getContrastVariation(colorsScale[0], colorsScale[1], this.contrastPecentageColors[this.selectedTheme]);
			}
			var colors = this[this.selectedColor+'Colors'][this.selectedTheme];
			// this is used for contrast colors variation
			for(var i = 0; i < 6; i++) {
				this.setContrastColor(colors[i], this.contrastPecentageColors[this.selectedTheme][i], i);
			}

			this.updateFontRendering(false);
		}
		//update color picker
		if(color === undefined || color === null || !color) {
			this.colorPicker.trigger('update-contrast-picker', [ this[this.selectedColor+'Colors'][this.selectedTheme][0], this[this.selectedColor+'Colors'][this.selectedTheme][5]]);
		}
	};

	Colors.prototype.updateFontRendering = function(value) {
		if(value) {
			this.fontRendering[this.selectedTheme] = value;
		}
		( !this.fontRendering[this.selectedTheme] ) ? this.fontRenderingSection.find('select').val(0) : this.fontRenderingSection.find('select').val(this.fontRendering[this.selectedTheme]);
	};

	Colors.prototype.checkBlackWhiteInputNumber = function(length) {
		var wrappers = this.blackWhiteSection.find('.js-app-editor__color-bw');
		if( wrappers.length == length) return;
		if( wrappers.length < length) {
			this.createBlackWhiteInputs(Number(length - wrappers.length));
		} else {
			this.removeBlackWhiteInputs(Number(wrappers.length - length));
		}
	}
	
	Colors.prototype.createBlackWhiteInputs = function(number) {
		var input = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(0),
			append = '';
		for(var i = 0; i < number; i++) {
			var clone = input.clone();
			clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');
			append =  append+clone[0].outerHTML;
		}

		this.blackWhiteSection.children('.js-app-editor-section__body').append(append);
		this.blackWhiteInputsResetLabelClass();
	};

	Colors.prototype.removeBlackWhiteInputs = function(number) {
		var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),
			tot = inputs.length;
		for(var i = 0; i < number; i++) {
			var index = tot - i - 1;
			inputs.eq(index).remove();
		}
		this.blackWhiteInputsResetLabelClass();
	};
	
	Colors.prototype.blackWhiteInputsResetLabelClass = function() {
		var inputs = this.blackWhiteSection.find('.js-app-editor__color-bw'),
			lastItem = inputs.length - 1;
		inputs.removeClass('app-editor__color-item--labelled').eq(lastItem).addClass('app-editor__color-item--labelled');
	};

	Colors.prototype.colorUpdated = function(target, type) {
		//get the index of the color
		var colorWrapper = target.parents('.js-main-color-variation'),
			index = Number(colorWrapper.attr('data-order')),
			inputs = colorWrapper.find('.js-hsl-color-input');
		if( type == 'bw' ) index = target.parents('.js-app-editor__color-bw').index();
		//update the array of colors
		if(this.colorLinks[this.selectedColor]) {
			var colorItems = ( type == 'bw' ) ? target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-app-editor__color-bw') : target.parents('.js-app-editor--variations-wrapper').eq(0).find('.js-main-color-variation');
			this.updateColorVariationsInThemes(colorItems);
		} else {
			this[this.selectedColor+'Colors'][this.selectedTheme][index] = [Number(inputs.eq(0).val()), convertStringToHsl(inputs.eq(1).val()), convertStringToHsl(inputs.eq(2).val())];
		}
		//update the color preview
		if( type == 'bw' ) {
			this.setBlackWhiteColor(this[this.selectedColor+'Colors'][this.selectedTheme][index], index);
			this.updateColorsDemo(true);
		} else {
			this.setMainColor(this[this.selectedColor+'Colors'][this.selectedTheme][index], index);
			this.updateColorsDemo(true);
		}
	};

	Colors.prototype.updateColorVariationsInThemes = function(colors) {
		for(var i = 0; i < colors.length; i++) {
			var inputs = colors.eq(i).find('.js-hsl-color-input');
			this.updateColorInThemes(inputs, i);
		}
	};

	Colors.prototype.updateColorInThemes = function(inputs, index) {
		var value = Number(inputs.eq(0).val()),
			valueHSL1 = convertStringToHsl(inputs.eq(1).val()),
			valueHSL2 = convertStringToHsl(inputs.eq(2).val());
		for(var i = 0; i < this.themes.length; i++) {
			this[this.selectedColor+'Colors'][i][index] = [value, valueHSL1, valueHSL2];
			this[this.selectedColor+'Colors'][i][index] = [Number(value), Number(valueHSL1), Number(valueHSL2)];
		}
	};

	Colors.prototype.contrastColorUpdated = function(target) {
		var index = target.parents('.js-app-editor__contrast-item').index(),
			value = parseInt(target.val().replace('%', ''));

		value = (value < 0 ) ? 0 : value;
		value = (value > 100 ) ? 100 : value;
		this.newContrastColorScale(value, index);
	};

	Colors.prototype.getBlackWhiteVariation = function(hsl, length) {
		var blackWhiteVariations = [];
		for(var i = 0; i < length; i++) {
			blackWhiteVariations.push([hsl[0], checkPercentage(hsl[1] + this[this.selectedColor+'Variations'][i][0]), checkPercentage(hsl[2] + this[this.selectedColor+'Variations'][i][1])]);
		}
		return blackWhiteVariations;
	};

	Colors.prototype.getBlackWhiteSingleVariation = function(hsl, index) {
		return [hsl[0], checkPercentage(hsl[1] + this[this.selectedColor+'Variations'][index][0]), checkPercentage(hsl[2] + this[this.selectedColor+'Variations'][index][1])]
	};

	Colors.prototype.setMainColor = function(color, index) {
		var hue = parseInt(color[0]),
			sat = Math.round(color[1]*100),
			lig = Math.round(color[2]*100);
		
		var inputs = this.mainColorVariationsInput.eq(index).find('.js-hsl-color-input'),
			preview = this.mainColorVariationsInput.eq(index).find('.js-color-preview');
		inputs.eq(0).val(hue);inputs.eq(1).val(sat);inputs.eq(2).val(lig);
		preview.css('background-color', 'hsl('+hue+', '+sat+'%, '+lig+'%)');
	};

	Colors.prototype.setBlackWhiteColor = function(color, index) {
		//first need to check if input exists
		var hue = parseInt(color[0]),
			sat = Math.round(color[1]*100),
			lig = Math.round(color[2]*100);
		
		var inputWrapper = this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index),
			inputs = inputWrapper.find('input'),
			preview = inputWrapper.find('.js-color-preview');
		inputs.eq(0).val(checkHue(hue));inputs.eq(1).val(sat);inputs.eq(2).val(lig);
		preview.css('background-color', 'hsl('+hue+', '+sat+'%, '+lig+'%)');
	};

	Colors.prototype.setContrastColor = function(color, percentage, index) {
		var wrapper =  this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),
			input = wrapper.find('input'),
			preview = wrapper.find('.js-color-preview');
		input.val(percentage);
		preview.css('background-color', 'hsl('+parseInt(color[0])+', '+parseInt(color[1]*100)+'%, '+parseInt(color[2]*100)+'%)');
	};

	Colors.prototype.createBlackWhiteVariation = function() {
		//create new item and append it
		var variations = this.blackWhiteSection.find('.js-app-editor__color-bw'),
			tot = variations.length,
			clone = variations.eq(0).clone();
		clone.removeClass('app-editor__color-item--locked app-editor__color-item--labelled').addClass('app-editor__color-item--removable');
		clone.find('input').removeAttr('disabled');
		this.blackWhiteSection.children('.js-app-editor-section__body').append(clone);
		//get the color variarion
		var color = this.getBlackWhiteSingleVariation(this[this.selectedColor+'Colors'][this.selectedTheme][0], tot);
		//update the variable storing the variations
		this[this.selectedColor+'Colors'][this.selectedTheme].push(color);
		//update the color of the input and the preview
		this.setBlackWhiteColor(color, tot);
		//reset the list with the proper label classes
		this.blackWhiteInputsResetLabelClass(); 
		//if two variation visible -> remove plus action
		this.resetBWActionVisibility();
	};

	Colors.prototype.deleteBlackWhiteVariation = function(index) {
		//remove item from dom
		this.blackWhiteSection.find('.js-app-editor__color-bw').eq(index).remove();
		//update object stored variables
		this[this.selectedColor+'Colors'][this.selectedTheme].splice(index, 1);
		//reset plus visibility
		this.resetBWActionVisibility();
	}

	Colors.prototype.resetBWActionVisibility = function() {
		var sectionTitle = this.blackWhiteSection.find('.app-editor-section__title');
		this.blackWhiteSection.find('.js-app-editor__color-bw').length > 2 
			? sectionTitle.removeClass('app-editor-section__title--create')
			: sectionTitle.addClass('app-editor-section__title--create');
	};

	Colors.prototype.newContrastColorScale = function(value, index) {
		var wrapper =  this.contrastInputs.find('.js-app-editor__contrast-item').eq(index),
			input = wrapper.find('input'),
			preview = wrapper.find('.js-color-preview');
		
		var color0hex = getHexFromHsl(this[this.selectedColor+'Colors'][this.selectedTheme][0]),
			color5hex = getHexFromHsl(this[this.selectedColor+'Colors'][this.selectedTheme][5]);

		var scaleColors = chroma.bezier([color0hex, color5hex]).scale().colors(101);
		this.contrastPecentageColors[this.selectedTheme][index] = value;
		var color = scaleColors[value],
			hsl = chroma(color).hsl();
		//need to convert to hsl 
		this.contrastColors[this.selectedTheme][index] = [checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])];
		input.val(value);
		preview.css('background-color', color);
	};

	Colors.prototype.removeTheme = function(type, index, selected) {
		//first -> remove theme from array of stored elements
		this.themes.splice(index, 1);
		this.primaryColors.splice(index, 1);
		this.accentColors.splice(index, 1);
		this.warningColors.splice(index, 1);
		this.successColors.splice(index, 1);
		this.errorColors.splice(index, 1);
		this.blackColors.splice(index, 1);
		this.whiteColors.splice(index, 1);
		this.contrastColors.splice(index, 1);
		//remove custom color as well
		if(this.mainColorLabels.length > 5) {
			for(var i = 5; i < this.mainColorLabels.length; i++) {
				this[this.mainColorLabels[i]+'Colors'].splice(index, 1);
			}
		}
		
		//if theme was selected -> select new theme
		if(selected) {
			this.selectedTheme = 0;
			this.setThemeColors();
		}
	};

	Colors.prototype.updateColorsDemo = function(bool, label) {
		var index = this.selectedTheme;	
		//getArray of custom colors
		var customArray = [];
		for(var i = 0; i < this.mainColorLabels.length; i ++) {
			if(this.mainColorLabels[i].indexOf('custom-') > -1) {
				//custom color -> push in array
				customArray.push([this.mainColorLabels[i], this[this.mainColorLabels[i]+'Colors'][index]]);
			}
		}
		this.iframe.updateIframeColors(this.primaryColors[index], this.accentColors[index], this.blackColors[index], this.whiteColors[index], this.successColors[index], this.errorColors[index], this.warningColors[index], this.contrastColors[index], this.fontRendering[index], customArray, this.customColorLabels, label);
		if(IS_LOGGED == '1' && bool) SaveAlert.yes();
	};

	Colors.prototype.updateColorLinks = function() {
		this.iframe.updateIframeColorLinks(this.colorLinks);
	};

	Colors.prototype.updateColorsDemoNewCustom = function(array, title, customLabel) {
		this.iframe.updateIframeColorsNewColor(array, title, customLabel);
		if(IS_LOGGED == '1') SaveAlert.yes();
	};

	Colors.prototype.updateColorsDemoRemoveCustom = function(customLabel) {
		this.iframe.updateIframeColorsRemoveColor(customLabel);
		if(IS_LOGGED == '1') SaveAlert.yes();
	};

	Colors.prototype.updateColorsDemoEditCustom = function(section, title) {
		this.iframe.updateIframeColorsEditColor(section, title);
		if(IS_LOGGED == '1') SaveAlert.yes();
	};

	Colors.prototype.updateCopyCode = function(code) {
		var completeCode = '',
			spacing = '';
		for(var i = 0; i < this.themes.length; i++) {
			if( i > 0 ) spacing = '  ';
			//start from default theme
			codeMain = this.createBlockForMainColors(i, spacing);
			codeCustom = this.createBlockForCustomColors(i, spacing, false); 
			codeBW = this.createBlockForBWColors(i, spacing); 
			codeFeedback = this.createBlockForFeedbackColors(i, spacing);
			codeFeedbackCustom = this.createBlockForCustomColors(i, spacing, true);
			codeContrast = this.createBlockForContrastColors(i, spacing);
			codeFontRendering = this.createBlockForFontRendering(i, spacing);
			themeCode = codeMain+codeCustom+codeBW+codeFeedback+codeFeedbackCustom+codeContrast;
			
			if( i == 0 ) {
				//default theme
				themeCode = ':root, [data-theme="default"] {\n' + themeCode+'}';
				if(codeFontRendering != '')  themeCode = themeCode + '\n\nbody, [data-theme="default"] {\n'+codeFontRendering+'}';
			} else {
				if(codeFontRendering != '') codeFontRendering = '\n'+codeFontRendering
				themeCode = '@supports(--css: variables) {\n  [data-theme="'+this.themes[i]+'"] {\n' + themeCode+codeFontRendering+'  }\n}';
			}

			completeCode = completeCode + themeCode;
			if(i < this.themes.length - 1) completeCode = completeCode+'\n\n';

			// if( i == 0 ) {
			// 	completeCode = completeCode + '[data-theme] {\n  background-color: var(--color-bg);\n  color: var(--color-contrast-high);\n}\n\n'; 
			// }
		}

		// before returngin code -> check if need to add bg-color classes
		completeCode = completeCode + this.getBgColorClasses();
		return completeCode;
		// return code;
	};

	Colors.prototype.createBlockForMainColors = function(themeIndex, spacing) {
		var code = spacing+'  // main\n',
			shades = ['-darker', '-dark', '', '-light', '-lighter'];
		for(var j = 0; j < 2; j ++) {
			for(var i = 0; i < 5; i++) {
				var colorIndex = 4 - i;
				var hsl = this[this.mainColorLabels[j]+'Colors'][themeIndex][colorIndex],
					hslCode = getHslCssFromHsl(hsl);
				code = code + spacing + '  @include defineColorHSL(--color-'+this.mainColorLabels[j]+shades[i]+', '+hslCode+');'+'\n';
			}
			code = code + '\n';
		}	
		
		return code;
	};

	Colors.prototype.createBlockForCustomColors = function(themeIndex, spacing, isFeedback) {
		var code = '',
			shades = ['-darker', '-dark', '', '-light', '-lighter'];
		if(this.mainColorLabels.length > 5) {
			for(var j = 5; j < this.mainColorLabels.length; j++) {
				var label = this.customColorLabels[j];
				if( (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 ) || ( !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0 ) ) {
					for(var i = 0; i < 5; i++) {
						var colorIndex = 4 - i;
						var hsl = this[this.mainColorLabels[j]+'Colors'][themeIndex][colorIndex],
							hslCode = getHslCssFromHsl(hsl);
						code = code + spacing + '  @include defineColorHSL('+this.customColorLabels[j-5]+shades[i]+', '+hslCode+');'+'\n';
					}
					code = code + '\n';
				}
			}
		}
		return code;
	};

	Colors.prototype.getCustomColorClasses = function(isFeedback) {
		var code = '';
		if(this.mainColorLabels.length > 5) {
			for(var j = 5; j < this.mainColorLabels.length; j++) {
				var label = this.customColorLabels[j];
				if( (isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') > -1 ) || ( !isFeedback && this.mainColorLabels[j].indexOf('custom-fdb') < 0 ) ) {
					code = code + '.'+this.customColorLabels[j-5].replace('--', '')+' { color: var('+this.customColorLabels[j-5]+');}';
					code = code + '\n';
				}
			}
		}
		return code;
	};

	Colors.prototype.createBlockForBWColors = function(themeIndex, spacing) {
		var code = '',
			shadesBlack = ['', '-light', '-lighter'],
			shadesWhite = ['', '-dark', '-darker'];
		//black
		for(var i = 0; i < this.blackColors[themeIndex].length; i++) {
			var hslCode  =  getHslCssFromHsl(this.blackColors[themeIndex][i]);
			code = code + spacing + '  @include defineColorHSL(--color-black'+shadesBlack[i]+', '+hslCode+');'+'\n';
		}
		//white
		for(var i = 0; i < this.whiteColors[themeIndex].length; i++) {
			var hslCode  =  getHslCssFromHsl(this.whiteColors[themeIndex][i]);
			code = code + spacing + '  @include defineColorHSL(--color-white'+shadesWhite[i]+', '+hslCode+');'+'\n';
		}
		//need to add opacities as well
		code = code + '\n';
		return code;
	};

	Colors.prototype.createBlockForFeedbackColors = function(themeIndex, spacing) {
		var code = spacing +'  // feedback\n',
			shades = ['-darker', '-dark', '', '-light', '-lighter'];
		for(var j = 2; j < 5; j ++) {
			for(var i = 0; i < 5; i++) {
				var colorIndex = 4 - i;
				var hsl = this[this.mainColorLabels[j]+'Colors'][themeIndex][colorIndex],
					hslCode = getHslCssFromHsl(hsl);
				code = code + spacing + '  @include defineColorHSL(--color-'+this.mainColorLabels[j]+shades[i]+', '+hslCode+');'+'\n';
			}

			//need to add opacities as well
			code = code + '\n';
		}	
		
		return code;
	};

	Colors.prototype.createBlockForContrastColors = function(themeIndex, spacing) {
		var code = spacing +'  // color contrasts\n',
			shades = ['bg', 'contrast-lower', 'contrast-low', 'contrast-medium', 'contrast-high', 'contrast-higher'];
		for(var i = 0; i < this.contrastColors[themeIndex].length; i++) {
			var hslCode  =  getHslCssFromHsl(this.contrastColors[themeIndex][i]);
			code = code + spacing + '  @include defineColorHSL(--color-'+shades[i]+', '+hslCode+');'+'\n';
		}
		return code;
	};

	Colors.prototype.createBlockForFontRendering = function(themeIndex, spacing) {
		var code = '';
		if(this.fontRendering[themeIndex] && Number(this.fontRendering[themeIndex]) == 1) {
			code = spacing+'  // font rendering\n' + spacing+ '  -webkit-font-smoothing: antialiased;\n'+spacing+ '  -moz-osx-font-smoothing: grayscale;\n';
		} else if(this.fontRendering[themeIndex] && Number(this.fontRendering[themeIndex]) == 2) {
			code = spacing+'  // font rendering\n' + spacing+ '  -webkit-font-smoothing: auto;\n'+spacing+ '  -moz-osx-font-smoothing: auto;\n';
		}
		return code;
	};

	Colors.prototype.getArrayToSave = function(){
		var colorsArray = [];
		for(var i = 0; i < this.mainColorLabels.length; i++) {
			//store main colors + feedback colors
			colorsArray[this.mainColorLabels[i]] = this[this.mainColorLabels[i]+'Colors'];
		}
		colorsArray['mainColorLabels'] = this.mainColorLabels;
		if(this.customColorLabels.length > 0) {
			colorsArray['customColorLabels'] = this.customColorLabels;
		}
		colorsArray['blackColors'] = this.blackColors;
		colorsArray['whiteColors'] = this.whiteColors;
		colorsArray['contrastPecentageColors'] = this.contrastPecentageColors;
		colorsArray['contrastColors'] = this.contrastColors;
		if( this.fontRendering && this.fontRendering.length == this.themes.length) {
			colorsArray['fontRendering'] = this.fontRendering;
		} else {
			colorsArray['fontRendering'] = [];
			for(var i = 0; i < this.themes.length; i++) {
				if(this.fontRendering[i]) colorsArray['fontRendering'][i] = this.fontRendering[i];
				else colorsArray['fontRendering'][i] = false;
			}
		}
		colorsArray['themes'] = this.themes;
		colorsArray['colorLinks'] = this.colorLinks;
		return colorsArray;
	};

	Colors.prototype.getOpacitiesArrayToSave = function() {
		var opacitiesArray = [];
		opacitiesArray = this.colorOpacities;
		return opacitiesArray;
	};

	Colors.prototype.getBgColorClasses = function() {
		var code = '';
		var shades = ['-darker', '-dark', '', '-light', '-lighter'];
		if(this.mainColorLabels.length > 5) {
			// start from bg
			code = '\n\n// background-color\n';
			for(var j = 5; j < this.mainColorLabels.length; j++) {
				for(var i = 0; i < shades.length; i++) {
					code = code + '.bg-'+this.customColorLabels[j-5].replace('--color-', '')+shades[i]+' { background-color: alpha(var('+this.customColorLabels[j-5]+shades[i]+'), var(--bg-o, 1)); }';
					code = code + '\n';
				}
			}
			// add borders
			code = code + '\n// border-color\n';
			for(var j = 5; j < this.mainColorLabels.length; j++) {
				for(var i = 0; i < shades.length; i++) {
					code = code + '.border-'+this.customColorLabels[j-5].replace('--color-', '')+shades[i]+' { border-color: alpha(var('+this.customColorLabels[j-5]+shades[i]+'), var(--bg-o, 1)); }';
					code = code + '\n';
				}
			}
		}
		return code;
	};

	function getOpacityLabel(opacity) {
		if(Number(opacity) < 10) return '0'+opacity;
		return opacity;
	};

	function getColorContrastPercentages() {
		return [0, 5, 17, 55, 89, 100];
	};

	function getHslCssFromHsl(hsl) {
		return Math.round(hsl[0])+', '+ Math.round(hsl[1]*100) +'%, '+ Math.round(hsl[2]*100) +'%';
	};

	function getMainColorVariation(hsl) {
		//used to get the main color variations starting from main color
		var colorVariationsLogic = getMainColorVaraiationLogic(hsl);
		var mainColorVariations = [];
		hsl[0] = checkHue(hsl[0]);
		for(var i = 0; i < 4; i++) {
			mainColorVariations.push([hsl[0], checkPercentage(hsl[1] + colorVariationsLogic[i][0]), checkPercentage(hsl[2] + colorVariationsLogic[i][1])]);
		}
		mainColorVariations.splice(2, 0, hsl);
		return mainColorVariations;
	};

	function getMainColorVaraiationLogic(hsl) {
		var lightVaraition = 0.1,
			lightVaraitionS = 0.2;

		if(hsl[2] > 0.8) {
			lightVaraitionS = 1;
			lightVaraition = parseFloat(((lightVaraitionS - hsl[2] )*0.5).toFixed(2));
		}

		var darkVaraition = -0.1,
			darkVaraitionS = -0.2;

		if(hsl[2] < 0.2) {
			darkVaraitionS = -hsl[2];
			darkVaraition = parseFloat((-hsl[2]*0.5).toFixed(2));
		}
		
		return [ [0, lightVaraitionS], [0, lightVaraition] ,[0, darkVaraition], [0, darkVaraitionS]];
	};

	function getContrastVariation(color1, color2, array) {
		var contrastColorVariations = [];
		var scaleColors = chroma.bezier([color1, color2]).scale().colors(101);
		for(var i = 0; i < 6; i++) {
			var index = array[i],
				hsl = chroma(scaleColors[index]).hsl();
			contrastColorVariations.push([checkHue(hsl[0]), checkPercentage(hsl[1]), checkPercentage(hsl[2])]);
		}
		return contrastColorVariations;
	};

	function getDefaultMainColorVariation(type) {
		var color = [];
		switch (type) {
			case 'accent':
				color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];
				break;
			case 'success':
				color = [[94, 0.48, 0.74], [94, 0.48, 0.65], [94, 0.48, 0.56], [94, 0.48, 0.48], [94, 0.48, 0.42]];
				break;
			case 'warning':
				color = [[46, 1, 0.80], [46, 1, 0.71], [46, 1, 0.61], [46, 1, 0.50], [46, 1, 0.47]];
				break;
			case 'error':
				color = [[349, 0.75, 0.67], [349, 0.75, 0.59], [349, 0.75, 0.51], [349, 0.75, 0.44], [349, 0.75, 0.36]];
				break;
			default:
				// primary
				color = [[220, 0.90, 0.70], [220, 0.90, 0.63], [220, 0.90, 0.56], [220, 0.90, 0.49], [220, 0.90, 0.42]];
		}
		return color;
	};
	//initialize the Colors objects
	var colors = document.getElementsByClassName('js-app-sidebar-editor--colors'),
		colorObject = [];
	if( colors.length > 0 ) {
		for( var i = 0; i < colors.length; i++) {
			(function(i){colorObject.push(new Colors(colors[i]));})(i);
		}
	}

	/****************************/
	/* 	Typography Interaction */
	/****************************/
	this.Typography = function(element, bool) {
		this.element = element;
		//store items
		this.typographySection = $(this.element).find('.js-app-editor-property__typography');
		this.typeScaleSection = $(this.element).find('.js-app-editor-property__scale');
		this.bodySection = $(this.element).find('.js-app-editor-property__body');
		this.lhCropSection = $(this.element).find('.js-app-editor-property__lhc');
		//store section items
		this.tyCodeItem = this.typographySection.find('#embedFont');
		this.tyFontList = this.typographySection.find('.js-app-editor-property__font-list');
		this.bodyItems = this.bodySection.find('select, input');
		this.scaleItems = this.typeScaleSection.find('input');
		this.lhcItem = this.lhCropSection.find('input');
		// array with parameters
		this.fontFamilies = [];
		this.fontFamilyIds = [];
		this.fontFamilyLabels = [];
		this.fontCode = '';
		this.baseSize = [];
		this.scaleRatio = [];
		this.headingInfo = [];
		this.bodyInfo = [];
		this.lhCropCapitalLetter = [];
		//selection info
		this.selectedSection = 'typography';
		this.selectedSectionType = 'typography';

		//mq tabs
		this.mqTabs = $(this.element).find('.js-app-editor-tabs');
		//mq values
		this.breakpointTypescale = 0;
		this.breakpointHeading = 0;
		this.breakpointBody = 0;

		//iframe
		this.iframe = window.frames[0];
		this.typographyLoaded = false;

		if(bool) return;
		//check for the frame to be loaded
		this.initFrame();
		//load preset
		this.loadPreset();
		//reset selection
		this.resetSidebarSections();
		this.eventListeners();
	};

	Typography.prototype.initFrame = function() {
		var self = this;
		//listen for the onload event of the frame
		onIframeLoad(self.iframe, function(){
			self.frameIsLoaded();
		});
	};

	Typography.prototype.frameIsLoaded = function() {
		var self = this;
		if(self.typographyLoaded) {
			self.updateTypographyDemo(false);
			showIframe();
			loadProjectColors(this.iframe);
		} else {
			setTimeout(function(){
				self.frameIsLoaded();
			}, 100);
		}
	};

	Typography.prototype.loadPreset = function() {
		//load the settings from the database if available
		//or just set default value
		
		if(PROJECT && PROJECT.typography) {
			this.initTypographyFromProject(JSON.parse(decodeSafeURIComponent(PROJECT.typography)));
		} else {
			this.initTypography();
		}

		//now the spacing has been set
		this.typographyLoaded = true;
	};

	Typography.prototype.initTypography = function() {
		//if you change these values -> you should update also the default ones (for empty fields)
		this.fontCode = '<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">';
		this.fontFamilies = ['Inter, system-ui, sans-serif'];
		this.fontFamilyIds = [1];
		this.fontFamilyLabels = ['--font-primary'];
		this.headingInfo = [[1, '700', '1.2'], [false, false, false], [false, false, false], [false, false, false], [false, false, false], [false, false, false]];
		this.bodyInfo = [[1, '', '1.4'], [false, false, false], [false, false, false], [false, false, false], [false, false, false], [false, false, false]]; 
		this.baseSize = ['1em', false, false, '1.25em', false, false];//this is a responsive variable
		this.scaleRatio = ['1.2', false, false, '1.25', false, false];//this is a responsive variable
		this.lhCropCapitalLetter = ['1'];//a number for each font family
	};

	Typography.prototype.initTypographyFromProject = function(typography) {
		// init typography values from your project
		// var typography = JSON.parse(decodeSafeURIComponent(PROJECT.typography));	
		this.fontCode = typography['fontCode'].replace(/&amp;/g, "&");
		this.fontFamilies = Object.values(typography['fontFamilies']);
		this.fontFamilyIds = Object.values(typography['fontFamilyIds']);
		this.fontFamilyLabels = Object.values(typography['fontFamilyLabels']);
		this.baseSize = Object.values(typography['baseSize']); 
		this.scaleRatio = Object.values(typography['scaleRatio']); 
		this.lhCropCapitalLetter = Object.values(typography['lhCropCapitalLetter']); 
		this.headingInfo = [];
		this.bodyInfo = [];
		for(var i = 0; i < 6; i++) {
			this.headingInfo.push(Object.values(typography['headingInfo'][i]));
			this.bodyInfo.push(Object.values(typography['bodyInfo'][i]));
		}
	};

	Typography.prototype.eventListeners = function() {
		var self = this;
		//this event is triggered when one of the items in the left sidebar is selected -> show new options in the right sidebar
		$(this.element).on('content-selected', function(event, type, target, index){
			if(type == 'typography') {
				self.selectNewTypography(target);
			}
		});

		//listen to change in inputs/select elements
		//typography section
		//remove font from list
		this.tyFontList.on('click', '.js-btn-delete', function(event) {
			var index = $(event.currentTarget).parent().index(),
				value = self.fontFamilyIds[index];
			self.fontFamilies.splice(index, 1);
			self.fontFamilyIds.splice(index, 1);
			self.fontFamilyLabels.splice(index, 1);
			self.resetAdditionalFontFamilies(self.tyFontList.find('textarea'));
			self.updateBodyHeadingFont(value, index);
			self.updatelhCrop(index);
			self.updateTypographyDemo(true);
		});
		//add font to list
		this.typographySection.on('click', '.js-btn-create', function(event) {
			self.fontFamilies.push('sans-serif');
			self.fontFamilyIds.push(self.fontFamilyIds[self.fontFamilyIds.length - 1] + 1);
			self.fontFamilyLabels.push('--font-'+getFontLabel(self.fontFamilyIds.length));
			self.resetAdditionalFontFamilies(self.tyFontList.find('textarea'));
			self.tyFontList.prev().removeClass('app-editor-section__title--hide-body');
			self.updatelhCrop();
			self.updateTypographyDemo(true);
		});
		//rename font
		this.tyFontList.on('focusout', 'input', function(event) {
			var index = $(event.currentTarget).parent().index(),
				label = $(event.target).val();
			if(label.indexOf('--font-') != 0 ) {
				label = '--font-' + label;
				$(event.target).val(label);
			}
			//check if labels has changed
			if(self.fontFamilyLabels[index] != label) {//update all
				self.fontFamilyLabels[index] = label;
				//update font list
				self.bodyItems.eq(0).find('option').eq(index+1).text(label);
				self.updateTypographyDemoFontLabel(index, label);//update demo
				appContentGroup.trigger('reset-font-label', [index, label]);
			}
		});
		//change code for font value
		this.tyCodeItem.on('focusout', function(){
			self.fontCode = removeScriptFromString(self.tyCodeItem.val());
			( self.tyCodeItem.val().indexOf('<script') > -1) ? self.tyCodeItem.attr('aria-invalid', true) : self.tyCodeItem.removeAttr('aria-invalid');
			self.updateTypographyDemo(true);
		}); 
		//change font-family value
		this.tyFontList.on('focusout', function(event){
			if($(event.target).is('textarea')) {
				var fontValue = $(event.target).val().replace(/;/g, "");
				fontValue = cleanFontFamilyValue(fontValue);
				if(fontValue == '' || fontValue.replace(/\s/g, '').length == 0 ) fontValue = 'sans-serif';
				$(event.target).val(fontValue);
				self.checkFontFamilyChanged($(event.target));
			}
		});
		//body section
		//select new font family
		this.bodySection.on('change', 'select', function(event){
			updateInteractedSectionTab(self.getBodySectionMq(), self.mqTabs.eq(1), !self.isBodySectionUpdated());//update mq tabs - active mqs
			self[self.selectedSection+'Info'][self.getBodySectionMq()][0] = $(event.target).val();
			self.updateTypographyDemo(true);
		});
		//new weigth/lineHeight
		listenToParentInput(this.bodySection, function(event){
			updateInteractedSectionTab(self.getBodySectionMq(), self.mqTabs.eq(1), !self.isBodySectionUpdated());//update mq tabs - active mqs
			self.checkBodyInfoChanged($(event.target), event.type);
		});
		//type scale section
		listenToParentInput(this.typeScaleSection, function(event){
			updateInteractedSectionTab(self.breakpointTypescale, self.mqTabs.eq(0), !self.isTypeScaleSectionUpdated());
			self.checkScaleInfoChanged($(event.target), event.type);
		});

		//lhcrop section - input change
		listenToInput(this.lhcItem, function(event){
			self.checkLhcChanged($(event.target), event.type);
		});

		// new breakpoint selected -> update ui
		this.mqTabs.on('select-mq', function(event, index, type){
			var property = getSectionTabName(type);
			if(property == 'Typescale') {
				self.breakpointTypescale = index;
				self.setScaleSection(false);
			} else {
				self.setBodySectionMq(index);//update the mq index in this.breakpointHeading/this.breakpointBody
				self.setBodySectionValues();//reset values in sidebar
			}
		});
		// //breakpoint rules are removed
		this.mqTabs.on('reset-mq', function(event, type){
			var property = getSectionTabName(type);
			//resetBreackpoint to 0
			if(property == 'Typescale') {
				//resetBreakpoint
				self.breakpointTypescale = 0;
				//reset arrays
				self.baseSize = resetArrayValues(self.baseSize);
				self.scaleRatio = resetArrayValues(self.scaleRatio);
				//reset tab appareance
				resetSectionTab(self.mqTabs.eq(0));
				//reset sibar
				self.setScaleSection(false);
			} else {
				self.setBodySectionMq(0);
				//!!!reset arrays
				self[self.selectedSection+'Info'] = resetMultiArrayValues(self[self.selectedSection+'Info']);
				//reset tab appareance
				resetSectionTab(self.mqTabs.eq(1));
				//reset sibar
				self.setBodySectionValues();
			}
			self.updateTypographyDemo(true);
		});
	};

	Typography.prototype.selectNewTypography = function(target) {
		if(target.indexOf('--font-') > -1) {
			this.selectedSection = target.replace('--font-', '');
			this.selectedSectionType = 'lhCrop';
		} else if( target.toLowerCase() == 'typography') {
			this.selectedSection = 'typography';
			this.selectedSectionType = 'typography';
		} else if(target.toLowerCase().indexOf('type') > -1) {
			this.selectedSection = 'scale';
			this.selectedSectionType = 'scale';
		} else {
			this.selectedSection = target.toLowerCase();
			this.selectedSectionType = 'body';
		}

		this.resetSidebarSections();
	};

	Typography.prototype.resetSidebarSections = function() {
		this.typographySection.add(this.typeScaleSection).add(this.bodySection).add(this.lhCropSection).addClass('app-editor-section--is-hidden');
		switch (this.selectedSectionType) {
			case 'typography': this.typographySection.removeClass('app-editor-section--is-hidden');this.setTypographySection();break;
			case 'lhCrop': this.lhCropSection.removeClass('app-editor-section--is-hidden');this.setLhcSection();break;
			case 'scale': this.typeScaleSection.removeClass('app-editor-section--is-hidden');this.setScaleSection(true);break;
			default: this.bodySection.removeClass('app-editor-section--is-hidden');this.setBodySection();
		}
	};

	Typography.prototype.setTypographySection = function() {
		//populate typography sidebar section with content
		//store section itames
		this.tyCodeItem.val(this.fontCode);
		var fontItems = this.tyFontList.find('textarea');
		fontItems.eq(0).val(this.fontFamilies[0]);
		this.resetAdditionalFontFamilies(fontItems);
	};

	Typography.prototype.resetAdditionalFontFamilies = function(fontItems) {
		if(this.fontFamilies.length > 1) {
			for( var i = 1; i < this.fontFamilies.length; i++) {
				if(fontItems.eq(i).length > 0) {
					fontItems.eq(i).val(this.fontFamilies[i]).siblings('input').val(this.fontFamilyLabels[i]).parents('.app-editor-property').eq(0).removeClass('app-editor-property--is-hidden');
				} else {
					var label = this.fontFamilyLabels[i] ? this.fontFamilyLabels[i] : '--font-'+getFontLabel(i+1);
					this.createFontItem(fontItems, i, label);
				}
			}
			//make sure textarea of removed font are not visible
			fontItems.eq(this.fontFamilies.length-1).parent().nextAll().remove();
		} else {
			//only primary -> hide all the rest
			fontItems.eq(1).parent().addClass('app-editor-property--is-hidden').nextAll().remove();
		}
		this.resetFontFamiliesControl();
	};

	Typography.prototype.resetFontFamiliesControl = function() {
		(this.fontFamilies.length > 4)
			? this.tyFontList.prev().removeClass('app-editor-section__title--create')
			: this.tyFontList.prev().addClass('app-editor-section__title--create');
	};
	
	Typography.prototype.createFontItem = function(fontItems, index, label) {
		var labelName = 'font'+ label.charAt(0).toUpperCase() + label.substr(1);
		var newFontItem = fontItems.eq(1).parents('.app-editor-property').eq(0).clone().removeClass('app-editor-property--is-hidden');
		newFontItem.find('textarea').val(this.fontFamilies[index]);
		newFontItem.find('input').val(label);
		newFontItem.appendTo(this.tyFontList);
	};

	Typography.prototype.checkFontFamilyChanged = function(textarea) {
		var index = textarea.parent().index(),
			value = textarea.val().trim();

		if(value != this.fontFamilies[index]) {
			this.fontFamilies[index] = value;
			this.updateTypographyDemo(true);
		}
	};

	Typography.prototype.setBodySection = function() {
		this.bodyResetFontFamilySelect();
		this.setBodySectionValues();
		//make sure the correct mq tab is selected (accordiong to the value of this.breakpointHeading/this.breakpointBody)
		appSidebarSelectMq(this.mqTabs.eq(1).find('.js-app-editor-tabs__item').eq(this.getBodySectionMq()), !this.isBodySectionUpdated());
		setSectionTab(this.mqTabs.eq(1), [this[this.selectedSection+'Info']]);
		if(this.mqTabs.eq(1).hasClass('app-editor-tabs--is-hidden')) {
			//mq is not shown -> values should be updated to defualt ones
			this['breakpoint'+ this.selectedSection[0].toUpperCase() + this.selectedSection.substring(1)] = 0;
			this.setBodySectionValues();
		}
	};

	Typography.prototype.isBodySectionUpdated = function() {
		if( this.bodyItems.eq(0).val() != 0 || this.bodyItems.eq(1).val() != '' || this.bodyItems.eq(2).val() != ''  ) return true;
		return false;
	};

	Typography.prototype.setBodySectionValues = function() {//populate the heading/body sections with correct values
		this.bodyItems.eq(0).val(this[this.selectedSection+'Info'][this.getBodySectionMq()][0] || 0);
		for(var i = 1; i < 3; i++ ) {
			// this.bodyItems.eq(i).val(getNotFalseValue(this[this.selectedSection+'Info'], this.getBodySectionMq(), i));
			this.bodyItems.eq(i).val(this[this.selectedSection+'Info'][this.getBodySectionMq()][i] || '');
		}
	};

	Typography.prototype.getBodySectionMq = function() {
		var label = this.selectedSection[0].toUpperCase() + this.selectedSection.substring(1);
		return this['breakpoint'+ label];
	};

	Typography.prototype.setBodySectionMq = function(index) {
		var label = this.selectedSection[0].toUpperCase() + this.selectedSection.substring(1);
		this['breakpoint'+ label] = index;
	};

	Typography.prototype.bodyResetFontFamilySelect = function() {
		var select = this.bodyItems.eq(0),
			options = select.find('option');
		//need to include a not specified option
		if( (options.length - 1) == this.fontFamilies.length ) return;
		options.remove();
		var optionsString = '<option value="0">not specified</option>';
		for(var i = 0; i < this.fontFamilies.length; i++) {
			optionsString = optionsString+'<option value="'+this.fontFamilyIds[i]+'">'+this.fontFamilyLabels[i]+'</option>';
		}

		select.append(optionsString);
	};

	Typography.prototype.checkBodyInfoChanged = function(target, eventType) {
		var index = target.parent().index(),
			value = target.val().trim(),
			bodyMq = this.getBodySectionMq();

		if(bodyMq == 0 && eventType == 'focusout' && value == '' && index == 2) {
			//mq zero -> cannot have empty line Height
			value = this.selectedSection == 'heading' ? '1.2' : '1.4';
			target.val(value);
		}
		if( value == this[this.selectedSection+'Info'][bodyMq][index]) return;
		this[this.selectedSection+'Info'][bodyMq][index] = value;
		this.updateTypographyDemo(true);
	};

	Typography.prototype.setScaleSection = function(resetMqTabs) {
		//populate type scale sidebar section with content
		this.scaleItems.eq(0).val(this.baseSize[this.breakpointTypescale] || '');
		this.scaleItems.eq(1).val(this.scaleRatio[this.breakpointTypescale] || '');
		if(resetMqTabs) setSectionTab(this.mqTabs.eq(0), [this.baseSize, this.scaleRatio]);

		if(this.mqTabs.filter('[data-tab-section="section-typescale"]').hasClass('app-editor-tabs--is-hidden')) {
			//mq is not shown -> values should be updated to defualt ones
			this.breakpointTypescale = 0;
			this.scaleItems.eq(0).val(this.baseSize[this.breakpointTypescale] || '');
			this.scaleItems.eq(1).val(this.scaleRatio[this.breakpointTypescale] || '');
		}
	};

	Typography.prototype.isTypeScaleSectionUpdated = function() {
		if(this.scaleItems.eq(0).val() != '' || this.scaleItems.eq(1).val() != '') return true;
		return false;
	};

	Typography.prototype.checkScaleInfoChanged = function(target, eventType) {
		var index = target.parent().index(),
			value = target.val().trim(),
			type = (index == 0) ? 'baseSize' : 'scaleRatio';

		if(this.breakpointTypescale == 0 && eventType == 'focusout' && value == '') {
			value = type == 'baseSize' ? '1em' : '1.2';
			target.val(value);
		}

		//if scaleRatio is not a number -> set to number
		if(index == 1 && eventType == 'focusout' && isNaN(value)) {
			value = getValueUnit(value)[0];
			target.val(value);
		} else if(index == 0 && eventType == 'focusout') {
			//if base size does not have a unit -> add unit
			var valueArray = getValueUnit(value);
			if(valueArray[1] == '') {
				value = value + 'em';
				target.val(value);
			}
		}

		//considering first value of baseSize or scaleRatio as this applies to all mq
		if(value == this[type][this.breakpointTypescale]) return;

		this[type][this.breakpointTypescale] = value;
		
		if(index == 1) {
			//scale ration -> check if not a number
			isNaN(value) ? target.attr('aria-invalid', true) : target.removeAttr('aria-invalid');
		}

		this.updateTypographyDemo(true);
	};

	Typography.prototype.setLhcSection = function() {
		//populate lhc sidebar section with content
		//trigger event to populate left sidebar with list of all fonts
		appContentGroup.trigger('reset-font-list', [this.fontFamilies.length]);
		//get element to set in list
		this.lhcItem.val(this.lhCropCapitalLetter[this.fontFamilyLabels.indexOf('--font-'+this.selectedSection)]);
	};

	Typography.prototype.checkLhcChanged = function(target, eventType) {
		var value = target.val().trim();
		if(eventType == 'focusout' && value == '') {
			value = '1';
			target.val(value);
		}
		var index = this.fontFamilyLabels.indexOf('--font-'+this.selectedSection);
		if(value == this.lhCropCapitalLetter[index]) return;
		this.lhCropCapitalLetter[index] = value;
		this.updateTypographyDemo(true);
	}

	Typography.prototype.updatelhCrop = function(index) {
		//this function is used when a font-family is added removed -> update lhCropCapitalLetter
		if(this.lhCropCapitalLetter.length > this.fontFamilies.length) this.lhCropCapitalLetter.splice(index, 1);
		if(this.lhCropCapitalLetter.length < this.fontFamilies.length) this.lhCropCapitalLetter.push('1');
	};

	Typography.prototype.updateBodyHeadingFont = function(value, index) {
		//if a font family is removed -> update index of font-family set for body and heading so that the correct one is applied
		//for now, need to do this only if index == 1 (secondary font remove)
		this.updateFontIndex(this.headingInfo, value, index);
		this.updateFontIndex(this.bodyInfo, value, index);
	};

	Typography.prototype.updateFontIndex = function(array, value, index) {
		for(var i = 0; i < 5; i++) {
			//in this case -> the font used was the one removed
			if(array[i][0] == value ) array[i][0] = this.fontFamilyIds[index-1];
		}
	};

	Typography.prototype.updateTypographyDemo = function(bool) {
		this.iframe.updateIframeTypography(this.fontCode, this.fontFamilies, this.fontFamilyLabels, this.fontFamilyIds, this.headingInfo, this.bodyInfo, this.baseSize, this.scaleRatio, this.lhCropCapitalLetter);
		if(IS_LOGGED == '1' && bool) SaveAlert.yes();
	};

	Typography.prototype.updateTypographyDemoFontLabel = function(index, label) {
		this.iframe.updateIframeTypographyLabel(index, label);
		if(IS_LOGGED == '1') SaveAlert.yes();
	};

	Typography.prototype.updateCopyCode = function(code) {
		var fontUnit = getValueUnit(this.baseSize[0])[1];
		code = this.modifyFontFamily(code);
		code = this.modifyCSSVariables(code);
		if(fontUnit != 'em') {
			code = this.modifyUnitFormat(code);
		}
		var codeArray = this.splitCodeToCustomize(code);
		code = codeArray + this.modifyBody() + this.modifyHeading();
		code = this.modifyLHCrop(code);
		// before returnin code -> add font family classes
		code = code + this.getTypographyFontClasses().trimRight();
		// before returnin code -> check if you need to add custom color classes
		code = code + this.getTypographyColorClasses().trimRight();
		// before returnin code -> check if you need to add the text-base class
		if(fontUnit != 'em') {
			code = code + this.getTypographyTextBaseClass(code);
		}
		return code;
	};

	Typography.prototype.modifyFontFamily = function(code) {
		var fontFamilyCode = '';
		for(var i = 0; i < this.fontFamilies.length; i++) {
			fontFamilyCode = fontFamilyCode +this.fontFamilyLabels[i]+': '+this.fontFamilies[i]+';';
			if(i < this.fontFamilies.length - 1) fontFamilyCode = fontFamilyCode + '\n  ';
		}
		code = code.replace('--font-primary: system-ui, sans-serif;', fontFamilyCode);
		return code;
	};

	Typography.prototype.modifyCSSVariables = function(code) {
		//start with no mq
		if(this.baseSize[0]) code = code.replace('--text-base-size: 1em;', '--text-base-size: '+this.baseSize[0]+';');
		if(this.scaleRatio[0]) code = code.replace('--text-scale-ratio: 1.2;', '--text-scale-ratio: '+this.scaleRatio[0]+';');
		if(this.headingInfo[0][2])  code = code.replace('--heading-line-height: 1.2;', '--heading-line-height: '+this.headingInfo[0][2]+';');
		if(this.bodyInfo[0][2])  code = code.replace('--body-line-height: 1.4;', '--body-line-height: '+this.bodyInfo[0][2]+';');
		//now loop through mq
		var mqs = getMQLabels(),
			mqCode = '';

		for(var i = 1; i < 6; i++) {
			if(this.baseSize[i] || this.scaleRatio[i] || this.headingInfo[i][2] || this.bodyInfo[i][2]) {
				if(mqCode != '') mqCode = mqCode + '\n';
				mqCode = mqCode + '\n    @include breakpoint('+mqs[i - 1]+') {';
				if(this.baseSize[i]) mqCode = mqCode + '\n      --text-base-size: '+this.baseSize[i]+';';
				if(this.scaleRatio[i]) mqCode = mqCode + '\n      --text-scale-ratio: '+this.scaleRatio[i]+';';
				if(this.bodyInfo[i][2]) mqCode = mqCode + '\n      --body-line-height: '+this.bodyInfo[i][2]+';';
				if(this.headingInfo[i][2]) mqCode = mqCode + '\n      --heading-line-height: '+this.headingInfo[i][2]+';';
				mqCode = mqCode + '\n    }';
			}
		}

		if(mqCode != '') mqCode = '\n  :root {'+mqCode+ '\n  }';

		var mqOldCode = this.getMQCodeToReplace(code);
		if(mqCode == '') {
			mqOldCode = '@supports(--css: variables) {'+mqOldCode+'\n}\n\n';
		}
		code = code.replace(mqOldCode, mqCode);
		return code;
	};

	Typography.prototype.getMQCodeToReplace = function(code) {
		var mqCode = code.split('@supports(--css: variables)')[1].split('}'),
			central = mqCode[0]+'}'+mqCode[1]+'}',
			centralArray = central.split('{');
		return centralArray[1]+'{'+centralArray[2]+'{'+centralArray[3];
	};

	Typography.prototype.splitCodeToCustomize = function(code) {
		var codeArray = code.split('a, .link')[0].split(':root');
		var newCode = '';
		if(codeArray[2]) {
			newCode = ':root'+codeArray[1] +':root'+codeArray[2].split('// -')[0];
		} else {
			newCode = ':root'+codeArray[1].split('// -')[0];
		}
		return newCode;
	};

	Typography.prototype.modifyUnitFormat = function(code) {
		// this is used when user set a unit not in en (e.g., rem or pixels)
		code = code.replace('--text-xs: calc((1em /', '--text-xs: calc((var(--text-base-size) /');
		return code;
	};

	Typography.prototype.modifyHeading = function(code) {
		return 'h1, h2, h3, h4 {\n'+this.getmodifiedHBCode(this.headingInfo)+'}';
	};

	Typography.prototype.modifyBody = function(code) {
		return 'body {\n'+this.getmodifiedHBCode(this.bodyInfo)+'}\n\n';
	};

	Typography.prototype.getmodifiedHBCode = function(array) {
		var mqs = getMQLabels(),
			mqCode = '';
		
		if(array[0][0] && parseInt(array[0][0]) != 0 ) {
			var fontLabel = this.fontFamilyLabels[this.fontFamilyIds.indexOf(parseInt(array[0][0]))];
			mqCode = mqCode + '  font-family: var('+fontLabel+');\n';
		}
		if(array[0][1]) mqCode = mqCode + '  font-weight: '+array[0][1]+';\n';
	
		for(var i = 1; i < 6; i++) {
			if(array[i][0] != 0 || array[i][1]) {
				mqCode = mqCode + '\n  @include breakpoint('+mqs[i - 1]+') {';
				if(array[i][0] && parseInt(array[i][0]) != 0 ) {
					var fontLabel = this.fontFamilyLabels[this.fontFamilyIds.indexOf(parseInt(array[i][0]))];
					mqCode = mqCode + '\n    font-family: var('+fontLabel+');';
				}
				if(array[i][1]) mqCode = mqCode + '\n    font-weight: '+array[i][1]+';';
				mqCode = mqCode + '\n  }\n';	
			}
		}

		return mqCode;
	};

	Typography.prototype.modifyLHCrop = function(code) {
		var lhCropCode = '';
		for(var i = 0; i < this.lhCropCapitalLetter.length; i++) {
			lhCropCode = lhCropCode+'\n  '+this.fontFamilyLabels[i]+'-capital-letter: '+this.lhCropCapitalLetter[i]+';';
		}
		code = code.replace('\n  --font-primary-capital-letter: 1;', lhCropCode);
		return code;
	};

	Typography.prototype.getArrayToSave = function(code) {
		var typographyArray = [];
		typographyArray['fontCode'] = this.fontCode;
		typographyArray['fontFamilies'] = this.fontFamilies;
		typographyArray['fontFamilyLabels'] = this.fontFamilyLabels;
		typographyArray['fontFamilyIds'] = this.fontFamilyIds;
		typographyArray['headingInfo'] = replaceEmpty(this.headingInfo);
		typographyArray['bodyInfo'] = replaceEmpty(this.bodyInfo);
		typographyArray['baseSize'] = replaceEmpty(this.baseSize);
		typographyArray['scaleRatio'] = replaceEmpty(this.scaleRatio);
		typographyArray['lhCropCapitalLetter'] = this.lhCropCapitalLetter;
		return typographyArray;
	};

	Typography.prototype.getTypographyColorClasses = function() {
		var colorClasses = '';
		var shades = ['-darker', '-dark', '', '-light', '-lighter'];
		if(this.iframe && this.iframe.btnColorCustomNiceLabels && this.iframe.btnColorCustomNiceLabels.length > 0) {
			for(var i = 0; i < this.iframe.btnColorCustomNiceLabels.length; i++) {
				for(var j = 0; j < shades.length; j++) {
					colorClasses = colorClasses + '.color-'+this.iframe.btnColorCustomNiceLabels[i].replace('--color-', '')+shades[j]+' { color: alpha(var('+this.iframe.btnColorCustomNiceLabels[i]+shades[j]+'), var(--color-o, 1)); }\n';
				}
			}	
		}
		if( colorClasses != '' ) colorClasses = '\n\n// color\n' + colorClasses;
		return colorClasses;
	};

	Typography.prototype.getTypographyFontClasses = function() {
		var fontClasses = '\n\n// font family\n';
		for(var i = 0; i < this.fontFamilies.length; i++) {
			fontClasses = fontClasses +'.'+this.fontFamilyLabels[i].replace('--', '')+' { font-family: var('+this.fontFamilyLabels[i]+');}';
			if(i < this.fontFamilies.length - 1) fontClasses = fontClasses + '\n';
		}
		return fontClasses;
	};

	Typography.prototype.getTypographyTextBaseClass = function() {
		// this is used when user set a unit not in en (e.g., rem or pixels)
		var textBaseClass = '\n\n// text base class\n';
		textBaseClass = textBaseClass + '.text-base { font-size: var(--text-base-size);}\n@each $breakpoint, $value in $breakpoints {\n\t@include breakpoint(#{$breakpoint}) {\n\t\t.text-base\\@#{$breakpoint} { font-size: var(--text-base-size);}\n\t}\n}';
		return textBaseClass;
	};

	function getFontLabel(index) {
		switch(index) {
			case 1: return 'primary';break;
			case 2: return 'secondary';break;
			case 3: return 'tertiary';break;
			case 4: return 'quaternary';break;
			case 5: return 'quinary';break;
			default: return 'tertiary';
		}
	}

	function getCustomFontLabel(index) {
		if(typographyObject && typographyObject.length > 0) {
			return typographyObject[0].fontFamilyLabels[index];
		} else {
			return '--font-'+getFontLabel(index);
		}
	}

	function getCustomFontId(id) {
		if(typographyObject && typographyObject.length > 0) {
			return typographyObject[0].fontFamilyIds[id];
		} else {
			return '--font-'+id;
		}
	}

	function getMQLabels() {
		return ['xs', 'sm', 'md', 'lg', 'xl'];
	}

	function removeScriptFromString(string) {
		var newDiv = $('<div></div>').append($(string));
		newDiv.find('script').remove();
		var newString = newDiv.get(0).innerHTML;
		newDiv.remove();
		return newString;
	}

	function cleanFontFamilyValue(string) {
		string = string.replace('font-family:', '');
		string = string.replace('font-family :', '');

		return string.trim();
	};

	//initialize the Typography object
	var typography = document.getElementsByClassName('js-app-sidebar-editor--typography'),
		typographyObject = [];
	if( typography.length > 0 ) {
		for( var i = 0; i < typography.length; i++) {
			(function(i){ typographyObject.push(new Typography(typography[i]));})(i);
		}
	}

	function loadProjectColors(iframe) {
		if(PROJECT && PROJECT.colors && PROJECT.colors !== '') iframe.loadColorStyle(JSON.parse(PROJECT.colors));
	}

	function loadProjectTypographyForSpacing(iframe) {
		if(PROJECT && PROJECT.typography && PROJECT.typography !== '') iframe.loadTypographyForSpacing(JSON.parse(decodeSafeURIComponent(PROJECT.typography)), true);
	};

	function loadProjectTypographyForButtons(iframe) {
		if(PROJECT && PROJECT.typography && PROJECT.typography !== '') iframe.loadTypographyForButtons(JSON.parse(decodeSafeURIComponent(PROJECT.typography)), true);
		else iframe.loadTypographyForButtons(false, true);
	};

	function loadProjectSpacingForButtons(iframe) {
		if(PROJECT && PROJECT.spacing && PROJECT.spacing !== '') iframe.loadSpacingForButtons(JSON.parse(decodeSafeURIComponent(PROJECT.spacing)), true);
		else iframe.loadSpacingForButtons(false, true);
	};

	function loadProjectButtonsForForms(iframe) {
		if(PROJECT && PROJECT.buttons && PROJECT.buttons !== '') iframe.loadButtonsForForms(JSON.parse(decodeSafeURIComponent(PROJECT.buttons)), true);
		else iframe.loadButtonsForForms(false, true);
	};

	function loadProjectButtonsForColors(iframe) {
		if(PROJECT && PROJECT.buttons && PROJECT.buttons !== '') iframe.loadButtonsForColors(JSON.parse(decodeSafeURIComponent(PROJECT.buttons)), true);
		else iframe.loadButtonsForColors(false, true);
	};

	function loadProjectColorsForColors(iframe) {
		if(PROJECT && PROJECT.colors && PROJECT.colors !== '') iframe.loadColorsForColors(JSON.parse(decodeSafeURIComponent(PROJECT.colors)), true);
	};

	function loadProjectFormsForColors(iframe) {
		if(PROJECT && PROJECT.form && PROJECT.form !== '') iframe.loadFormForColors(JSON.parse(decodeSafeURIComponent(PROJECT.form)), true);
		else iframe.loadFormForColors(false, true);
	};

	function replaceEmpty(array) {
		for(var i = 0; i < array.length; i++) {
			if(array[i].length > 1) {
				array[i] = replaceEmpty(array[i]);
			} else {
				if(array[i] == '') array[i] = false;
			}
		}

		return array;
	};

	/************************/
	/* 	Spacing Interaction */
	/************************/
	this.Spacing = function(element, bool) {
		this.element = element;
		//keep track of the breakpoint for each section
		this.breakpointSpacing = 0;
		this.breakpointPadding = 0;
		this.breakpointList = ['none', 'sm', 'md', 'lg', 'xl'];
		//store items
		this.suSelect = $(this.element).find('.js-app-editor-property__su').find('input');
		this.srSelect = $(this.element).find('.js-app-editor-property__sr').find('select');
		this.paddingSelect = $(this.element).find('.js-app-editor-property__padding').find('select');
		this.srCustomSection = $(this.element).find('.js-app-editor-property__custom-sr');
		//should store bg tabs for padding and spacing scale
		// array with parameters
		this.componentPadding = [];
		this.spaceUnit = [];
		this.spaceRatio = [];
		this.padding = [];
		this.customSpaceRatio = [];
		//initialize this array of custom units
		this.initCustomSpaceRatioArray();

		//mq tabs
		this.mqTabs = $(this.element).find('.js-app-editor-tabs');

		//iframe
		this.iframe = window.frames[0];
		this.spacingLoaded = false;
		if(bool) return;
		//check for the frame to be loaded
		this.initFrame();
		//load preset
		this.loadPreset();
		//reset selection
		this.resetUi(true);
		this.eventListeners();
	};

	Spacing.prototype.initCustomSpaceRatioArray = function() {
		// this.customSpaceRatio[0] -> is going to be the list for xxxxs at different mqs,
		// this.customSpaceRatio[1] -> is going to be the list for xxxs at different mqs
		for(var j = 0; j < fibonacciSeq.length; j++) {
			this.customSpaceRatio[j] = [fibonacciSeq[j], false, false, false, false];
		}
	};
	
	Spacing.prototype.initFrame = function() {
		var self = this;
		//listen for the onload event of the frame
		onIframeLoad(self.iframe, function(){
			self.frameIsLoaded();
		});
	};

	Spacing.prototype.frameIsLoaded = function() {
		var self = this;
		if(self.spacingLoaded) {
			self.updateSpacingDemo(false);
			showIframe();
			loadProjectColors(this.iframe);
			loadProjectTypographyForSpacing(this.iframe);
		} else {
			setTimeout(function(){
				self.frameIsLoaded();
			}, 100);
		}
	};

	Spacing.prototype.loadPreset = function() {
		//load the settings from the database if available
		//or just set default value
		if(PROJECT && PROJECT.spacing) {
			this.initSpacingFromProject(JSON.parse(decodeSafeURIComponent(PROJECT.spacing)));
		} else {
			this.initSpacing();
		}

		//now the spacing has been set
		this.spacingLoaded = true;
	};

	Spacing.prototype.initSpacing = function() {
		//if you change this, you need to update the default values (when empty field) as well
		this.spaceUnit = ['1em', false, false, '1.25em', false, false];
		this.spaceRatio = [1, false, false, false, false, false];//default to Fibonacci
		this.padding = [6, false, false, false, false, false];//default to space-md
	};

	Spacing.prototype.initSpacingFromProject = function(spacing) {
		// var spacing = JSON.parse(decodeSafeURIComponent(PROJECT.spacing));
		this.spaceUnit = Object.values(spacing['spaceUnit']);
		this.spaceRatio = Object.values(spacing['spaceRatio']);
		this.padding = Object.values(spacing['padding']);
		this.customSpaceRatio = [];
		for(var i = 0; i < 11; i++) this.customSpaceRatio.push(Object.values(spacing['customSpaceRatio'][i]));
	};

	Spacing.prototype.resetUi = function(bool) {
		var self = this;
		var suValue = this.spaceUnit[this.breakpointSpacing],
			srValue = this.spaceRatio[this.breakpointSpacing],
			paddingValue = this.padding[this.breakpointPadding];
		this.suSelect.val(suValue || '');
		this.srSelect.val(srValue || 0);
		this.paddingSelect.val(paddingValue || 0);
		this.resetCustomSr(srValue);
		//bool is used to check if we need to reset visibility of mq tabs or not -> if true -> reset
		if(!bool) return;
		var mqArray = [];
		setSectionTab(this.mqTabs.eq(0), [this.spaceUnit, this.spaceRatio]);
		setSectionTab(this.mqTabs.eq(1), [this.padding]);
	};

	Spacing.prototype.resetCustomSr = function(srValue) {
		if(srValue == 6) {
			//custom is selected -> make sure to show proper array according to mq
			this.srCustomSection.removeClass('app-editor-property-wrapper--is-hidden')
			var inputs = this.srCustomSection.find('input');
			for(var i = 0; i < inputs.length; i++) {
				inputs.eq(i).val(this.customSpaceRatio[i][this.breakpointSpacing] || '');
			}
		} else {
			this.srCustomSection.addClass('app-editor-property-wrapper--is-hidden');
		}
	};	

	Spacing.prototype.eventListeners = function() {
		var self = this;
		//new breakpoint selected -> update ui
		this.mqTabs.on('select-mq', function(event, index, type){
			var property = getSectionTabName(type);
			self['breakpoint'+property] = Number(index);
			self.resetUi(false);
		});
		//breakpoint rules are removed
		this.mqTabs.on('reset-mq', function(event, type){
			var property = getSectionTabName(type);
				//resetBreackpoint to 0
			self['breakpoint'+property] = 0;
			//reset array of values
			self.resetArrayValues(property);
			self.resetUi(false);
			self.updateSpacingDemo(true);
		});
		//space unit updated
		listenToInput(this.suSelect, function(event){
			self.spaceUnitUpdated($(event.currentTarget).val(), $(event.currentTarget), event.type);
		});
		//new space ratio selected
		this.srSelect.on('change', function(event){
			var scaleSelected = Number($(event.currentTarget).val());
			if(self.breakpointSpacing == 0 && scaleSelected == 0) {
				scaleSelected = 1;
				$(event.currentTarget).val(1);
				$(event.currentTarget).attr('aria-invalid', 'true');
				setTimeout(function(){
					$(event.currentTarget).removeAttr('aria-invalid');
				}, 1000);
			}
			self.spaceRatio[self.breakpointSpacing] = scaleSelected;
			if( self.spaceRatio[self.breakpointSpacing] == 0) self.spaceRatio[self.breakpointSpacing] = false;
			//if the value is not set -> remove the edited tab xclass
			updateInteractedSectionTab(self.breakpointSpacing, self.mqTabs.eq(0), !self.spacingScaleIsUpdated());//update mq tabs
			self.resetCustomSr(self.spaceRatio[self.breakpointSpacing]);
			self.updateSpacingDemo(true);
		});
		//new custom value included
		listenToParentInput(this.srCustomSection, function(event){
			var index = $(event.currentTarget).parents('.js-app-editor-property').index();
			self.customSpaceRatio[index][self.breakpointSpacing] = getValueUnit($(event.currentTarget).val())[0];
			if(self.breakpointSpacing == 0 && self.customSpaceRatio[index][self.breakpointSpacing] == '' && event.type == 'focusout') {
				//if setting a custom scale for breakpoint 0 -> do not allow for empty values
				var defaultScaleValue = fibonacciSeq[index];
				self.customSpaceRatio[index][self.breakpointSpacing] = defaultScaleValue;
				$(event.currentTarget).val(defaultScaleValue)
			}
			self.updateSpacingDemo(true);
		});
		//new padding selected
		this.paddingSelect.on('change', function(event){
			self.padding[self.breakpointPadding] = Number($(event.currentTarget).val());
			if(self.padding[self.breakpointPadding] == 0) self.padding[self.breakpointPadding] = false;
			if(self.breakpointPadding == 0 && !self.padding[self.breakpointPadding]) {//need to select a padding value for default breakpoint
				self.padding[self.breakpointPadding] = 5; $(event.currentTarget).val(5);
				$(event.currentTarget).attr('aria-invalid', 'true');
				setTimeout(function(){
					$(event.currentTarget).removeAttr('aria-invalid');
				}, 1000);
			}
			updateInteractedSectionTab(self.breakpointPadding, self.mqTabs.eq(1), !self.paddingIsUpdated());//update mq tabs
			self.updateSpacingDemo(true);
		});
	};

	Spacing.prototype.spacingScaleIsUpdated = function() {
		if(this.srSelect.val() != 0 || this.suSelect.val() != '') return true;
		return false;
	};

	Spacing.prototype.paddingIsUpdated = function() {
		if(this.paddingSelect.val() != 0) return true;
		return false;
	};

	Spacing.prototype.spaceUnitUpdated = function(val, target, eventType) {
		//check if changes have been made -> set save tooltip
		var bool = true;
		if(this.spaceUnit[this.breakpointSpacing] == val ) bool = false;
		//do not allow empty for spaceUnit when firt breakpoint
		if(eventType == 'focusout' && val == '' && this.breakpointSpacing == 0) {
			val = '1em';
			target.val(val);
		}

		if(val == '') {
			this.spaceUnit[this.breakpointSpacing] = false;
		} else {
			this.spaceUnit[this.breakpointSpacing] = checkSpaceUnit(val);
			if(val != this.spaceUnit[this.breakpointSpacing]) {
				//user did not insert a unit of measure or did a typo
				target.val(this.spaceUnit[this.breakpointSpacing]);
			}
		}
		updateInteractedSectionTab(this.breakpointSpacing, this.mqTabs.eq(0), !this.spacingScaleIsUpdated());//update mq tabs 
		if(bool) this.updateSpacingDemo(bool);
	};

	Spacing.prototype.updateSpacingDemo = function(bool) {
		this.iframe.updateIframeSpacing(this.spaceUnit, this.spaceRatio, this.padding, this.customSpaceRatio);
		if(IS_LOGGED == '1' && bool) SaveAlert.yes();
	};

	Spacing.prototype.resetArrayValues = function(property) {
		if(property == 'Padding') {
			this.padding = resetArrayValues(this.padding);
			resetSectionTab(this.mqTabs.eq(1));
		} else {
			this.spaceUnit = resetArrayValues(this.spaceUnit);
			this.spaceRatio = resetArrayValues(this.spaceRatio);
			for(var i = 0; i < fibonacciSeq.length; i++) {
				this.customSpaceRatio[i] = resetArrayValues(this.customSpaceRatio[i]);
			}
			resetSectionTab(this.mqTabs.eq(0));
		};
	};

	Spacing.prototype.updateCopyCode = function(code) {
		var spacingVariablesBasic = this.getSpacingCode(0), //default code in top body section
			spacingVariablesResponsive = this.getSpacingCodeRes();

		if(spacingVariablesResponsive != '') {
			spacingVariablesResponsive = '\n\n@supports(--css: variables) {\n'+spacingVariablesResponsive+'}'
		}

		return ':root {\n'+spacingVariablesBasic+'}'+spacingVariablesResponsive;
	};

	Spacing.prototype.getSpacingCodeRes = function() {
		var mqLabels = getMQLabels(),
			responsiveStyle = '';
		for(var i = 0; i < mqLabels.length; i++) {
			var style = this.getSpacingCode(i + 1);
			if(style && style != '') {
				if(responsiveStyle != '') responsiveStyle = responsiveStyle + '\n';
				responsiveStyle = responsiveStyle + '    @include breakpoint('+mqLabels[i]+') {\n'+style+'    }\n';
			}
		}
		if(responsiveStyle != '') responsiveStyle = '  :root {\n' + responsiveStyle + '  }\n';
		return responsiveStyle;
	};

	Spacing.prototype.getSpacingCode = function(index) {
		var spacing = (index == 0) ? '  ' : '      ',
			style = '';
		if(this.spaceUnit[index] && this.spaceUnit[index] != '') style = style + spacing + '--space-unit: '+this.spaceUnit[index]+';\n';
		if(this.spaceRatio[index] && this.spaceRatio[index] != 0) style = style + this.getSpacingScale(index);
		if(this.padding[index] && this.padding[index] != 0) style = style + spacing + '--component-padding: var('+paddingVariables[this.padding[index]]+');\n';
		return style;
	};

	Spacing.prototype.getSpacingScale = function(index) {
		var scale = spaceRatioUnit[this.spaceRatio[index]],
			style = '',
			spacing = (index == 0) ? '  ' : '    ';
		if(scale == '' ) {//custom scale
			scale = [];
			for(var i = 0; i < this.customSpaceRatio.length; i++) {
				if(this.customSpaceRatio[i][index]) {
					scale.push(this.customSpaceRatio[i][index]);
				} else {
					scale.push(this.customSpaceRatio[i][0]);
				}
			} 
		}

		for(var i= 0; i < scale.length; i++) {
			if(scale[i] && scale[i] != '') {
				style = style + spacing + paddingVariables[i+1]+': calc('+scale[i]+' * var(--space-unit));\n';
			}
		}

		return style;
	};

	Spacing.prototype.getArrayToSave = function() {
		var spacingArray = [];
		spacingArray['spaceUnit'] = replaceEmpty(this.spaceUnit);
		spacingArray['spaceRatio'] = this.spaceRatio;
		spacingArray['padding'] = this.padding;
		spacingArray['customSpaceRatio'] = replaceEmpty(this.customSpaceRatio);
		return spacingArray;
	};

	var paddingVariables = ['not specified', '--space-xxxxs', '--space-xxxs', '--space-xxs', '--space-xs', '--space-sm', '--space-md', '--space-lg', '--space-xl', '--space-xxl', '--space-xxxl', '--space-xxxxl'],
		fibonacciSeq = [0.125, 0.25, 0.375, 0.5, 0.75, 1.25, 2, 3.25, 5.25, 8.5, 13.75],
		prFourth = [0.237, 0.316, 0.422, 0.563, 0.75, 1, 1.333, 1.777, 2.369, 3.157, 4.21],
		auFourth = [0.177, 0.25, 0.354, 0.5, 0.707, 1, 1.414, 1.999, 2.827, 3.998, 5.65],
		prFifth = [0.133, 0.2, 0.296, 0.444, 0.667, 1, 1.5, 2.25, 3.375, 5.063, 7.59],
		goldenRatio = [0.09, 0.146, 0.236, 0.382, 0.618, 1, 1.618, 2.618, 4.236, 6.854, 11.08],
		spaceRatioUnit = [false, fibonacciSeq, prFourth, auFourth, prFifth, goldenRatio, ''];

	function checkSpaceUnit(value) {
		if(value == '' ) return value;
		var valueArray = getValueUnit(value);
		//remove . from valueArray[1] if 
		valueArray[1] = valueArray[1].replace('.', '');
		if( valueArray[1] == 'px' || valueArray[1] == 'em' || valueArray[1] == 'rem' || valueArray[1] == 'ex' ) {
			return value;
		} else {
			return valueArray[0]+'em';
		}
	};

	//initialize the Spacing object
	var spacing = document.getElementsByClassName('js-app-sidebar-editor--spacing'),
		spacingObject = [];
	if( spacing.length > 0 ) {
		for( var i = 0; i < spacing.length; i++) {
			(function(i){spacingObject.push(new Spacing(spacing[i]));})(i);
		}
	}

	function getButtonsSectionsList(type) {
		if(type == 'buttons') {
			return ['appearance', 'padding', 'border', 'typography', 'textShadow', 'shadow', 'outline', 'transition', 'transform'];
		} else {
			return ['appearance', 'padding', 'border', 'typography', 'textShadow', 'shadow', 'outline', 'transition', 'transform', 'placeholder', 'margin'];
		}
	}

	function getSharedStyleSectionsList() {
		return ['appearance', 'border', 'typography', 'textShadow', 'shadow', 'outline', 'transition', 'transform'];
	};

	/****************************/
	/* 	Buttons Interaction     */
	/* 	Form Interaction        */
	/****************************/
	//called this buttons but applies to forms as well
	this.Buttons = function(element, bool) {
		this.element = element;
		this.globalType = $(this.element).attr('data-global');//can be buttons or forms
		//sections
		this.statusSection = $(this.element).find('.js-app-editor-section--states');
		this.appearanceSection = $(this.element).find('.js-app-editor-section--appearance');
		this.paddingSection = $(this.element).find('.js-app-editor-section--padding');
		this.borderSection = $(this.element).find('.js-app-editor-section--border');
		this.outlineSection = $(this.element).find('.js-app-editor-section--outline');
		this.typographySection = $(this.element).find('.js-app-editor-section--typography');
		this.fontSelection = this.typographySection.find('.js-font-family-select').find('select');
		this.shadowSection = $(this.element).find('.js-app-editor-section--shadow');
		this.transitionSection = $(this.element).find('.js-app-editor-section--transition');
		this.transformSection = $(this.element).find('.js-app-editor-section--transform');
		this.placeholderSection = $(this.element).find('.js-app-editor-section--placeholder');
		this.marginSection = $(this.element).find('.js-app-editor-section--margin');

		this.buttonsSectionsList = getButtonsSectionsList(this.globalType);

		//status
		this.statusList = ['none', ':active', ':hover', ':focus']; //none, :active, :hover, :focus
		this.statusPriorityList = ['none', ':hover', ':focus', ':active'];
		this.statusTag = this.statusSection.find('.js-editor-tag');
		//this will be used to store the custom buttons the user creates
		this.customBtns = [];

		//list of colors values 
		//no need for this anymore -> will be using the colorSelectionObject list of colours
		this.fontFamilies = [];
		this.fontIds = [];
		this.fontCode = '';

		//what is selected at the moment
		this.selectedStatus = 0; //none
		this.selectedButton = (this.globalType == 'buttons') ? 'btn' : 'form-control'; 
		this.globalBase = (this.globalType == 'buttons') ? 'btn' : 'form-control';
		//store if padding is locked or not
		this.paddingLocked = false;
		this.marginLocked = false;

		//storing this to check if user has been typing or not
		this.typing = false;

		//array with all selected properties
		this.btnStyle = new Array();

		//store the color preview item the user is interacing with
		this.colorPreviewInteracted = false;

		//shadow copy link
		this.copyFromOrigin = $('.js-app-editor-section__copy-origin');

		//iframe
		this.iframe = window.frames[0];
		this.buttonsLoaded = false;
		if(bool) return;

		//check for the frame to be loaded
		this.initFrame();
		//load preset
		this.loadPreset(); //-> you should wait for the colorSelect object to be ready and then load preset
		//reset selection
		this.openToggleSections;
		this.resetUi('all');
		this.eventListeners();

		//important -> when saving into the database, just note that some elements could be empty arrays
		//this happens for example when you reset a property -> just do not save those
	};

	Buttons.prototype.initFrame = function() {
		var self = this;
		//listen for the onload event of the frame
		onIframeLoad(self.iframe, function(){
			self.frameIsLoaded();
		});
	};

	Buttons.prototype.frameIsLoaded = function() {
		var self = this;
		if(self.buttonsLoaded) {
			loadProjectColors(this.iframe);
			showIframe();
			// loadProjectColorsForButtons(this.iframe);
			loadProjectTypographyForButtons(this.iframe);
			loadProjectSpacingForButtons(this.iframe);
			loadProjectButtonsForForms(this.iframe);
			self.updateButtonsDemo(false);
		} else {
			setTimeout(function(){
				self.frameIsLoaded();
			}, 100);
		}
	};

	Buttons.prototype.loadPreset = function() {
		//init this.btnStyle with list of keys (btn types+ states)
		//you should do that after loading data from database as you can have custom buttons (eg button tertiary)
		(this.globalType == 'buttons') ? this.initBtnStyleArray() : this.initFormsStyleArray();
		//load the settings from the database if available
		//or just set default value
		//NOTE !!! before loading preset make sure colorSelectionObject is ready
		this.initListFonts();
		(this.globalType == 'buttons') ? this.initButtons() : this.initForms();

		//now the buttons have been set
		this.buttonsLoaded = true;
	};

	Buttons.prototype.initBtnStyleArray = function() {
		//this list should contain the custom buttons as well - if present
		var buttonsType = getButtonsDefault();
		for(var i = 0; i < buttonsType.length; i ++) {
			this.btnStyle[buttonsType[i]] = new Array();
			for(var j = 0; j < this.statusList.length; j++) {
				this.btnStyle[buttonsType[i]][this.statusList[j]] = new Array();
				//should loop through sections as well
				for(var k = 0; k < this.buttonsSectionsList.length; k++) {
					this.btnStyle[buttonsType[i]][this.statusList[j]][this.buttonsSectionsList[k]] = new Array();
				}
			}
		}
	};

	Buttons.prototype.initCustomBtnStyleArray = function(label) {
		this.btnStyle[label] = new Array();
		for(var j = 0; j < this.statusList.length; j++) {
			this.btnStyle[label][this.statusList[j]] = new Array();
			for(var k = 0; k < this.buttonsSectionsList.length; k++) {
				this.btnStyle[label][this.statusList[j]][this.buttonsSectionsList[k]] = new Array();
			}
		}
	};

	Buttons.prototype.initFormsStyleArray = function() {
		var buttonsType = getFormsDefault();
		for(var i = 0; i < buttonsType.length; i ++) {
			this.btnStyle[buttonsType[i]] = new Array();
			for(var j = 0; j < this.statusList.length; j++) {
				this.btnStyle[buttonsType[i]][this.statusList[j]] = new Array();
				//should loop through sections as well
				for(var k = 0; k < this.buttonsSectionsList.length; k++) {
					this.btnStyle[buttonsType[i]][this.statusList[j]][this.buttonsSectionsList[k]] = new Array();
				}
			}
		}
	};

	Buttons.prototype.initListFonts = function() {
		//this depends on fonts set in typography
		if(PROJECT && PROJECT.typography) {
			var typography = JSON.parse(decodeSafeURIComponent(PROJECT.typography));
			this.fontCode = typography['fontCode'];
			this.fontFamilies = Object.values(typography['fontFamilyLabels']);
			this.fontIds = Object.values(typography['fontFamilyIds']);

			this.fontFamilies.unshift('not specified');
			this.fontIds.unshift(0);
		} else {
			this.fontFamilies = ['not specified', '--font-primary'];
			this.fontIds = [0, 1];
		}
		
		var fontList = '';
		//update the select element now that fonts have been loaded
		for(var i = 0; i < this.fontFamilies.length; i++) {
			fontList = fontList + '<option value="'+this.fontIds[i]+'">'+this.fontFamilies[i]+'</option>';
		}

		this.fontSelection.html(fontList);
	};

	Buttons.prototype.initButtons = function() {
		if(PROJECT && PROJECT.buttons) {
			this.initButtonsFromProject(JSON.parse(decodeSafeURIComponent(PROJECT.buttons)));
		} else {
			this.initDefaultButtons();
		}
	};

	Buttons.prototype.initDefaultButtons = function() {
		//these are the default values
		//colors numbers -> if a new custom block is added, you may need to find a different way to find correspondence between color and integer in select
		this.btnStyle['btn']['none']['appearance'] = [false, false, '0.25em', false, 2, false, false, false]; // array[7] => type of radius
		this.btnStyle['btn']['none']['padding'] = [4, 6, 6, 4];//top-left-right-bottom
		this.btnStyle['btn']['none']['typography'] = [false, 9, '1em', false, false, 1, '1.2', false, 1]; 
		this.btnStyle['btn']['none']['shadow'] = [[0, false, '', 2]];
		this.btnStyle['btn']['none']['transition'] = [[0, 0.2, 0, false]];
		this.btnStyle['btn'][':hover']['shadow'] = [[0, false, '', 3]];
		this.btnStyle['btn'][':focus']['shadow'] = [[0, '--color-contrast-higher-a15', '0px 0px 0px 2px', 0]];
		this.btnStyle['btn'][':focus']['outline'] = [false, 8, false, false];
		this.btnStyle['btn'][':active']['transform'] = [[3, '2px']];
		this.btnStyle['btn--primary']['none']['appearance'] = ['--color-primary', '--color-white', false, false, false, false, false, false];
		this.btnStyle['btn--primary'][':hover']['appearance'] = ['--color-primary-dark', false, false, false, false, false, false];
		this.btnStyle['btn--primary'][':focus']['shadow'] = [[0, '--color-primary-a20', '0px 0px 0px 2px', 0]];
		this.btnStyle['btn--subtle']['none']['appearance'] = ['--color-contrast-lower', '--color-contrast-higher', false, false, false, false, false, false];
		this.btnStyle['btn--accent']['none']['appearance'] = ['--color-accent', '--color-white', false, false, false, false, false, false];
		this.btnStyle['btn--accent'][':hover']['appearance'] = ['--color-accent-dark', false, false, false, false, false, false, false];
		this.btnStyle['btn--accent'][':focus']['shadow'] = [[0, '--color-accent-a20', '0px 0px 0px 2px', 0]];
		this.btnStyle['btn--disabled']['none']['appearance'] = [false, false, false, '0.6', 3, false, false, false];
		this.btnStyle['btn--sm']['none']['typography'] = [false, 9, '0.8em', false, false, false, false, false, false];
		this.btnStyle['btn--md']['none']['typography'] = [false, 9, '1.2em', false, false, false, false, false, false];
		this.btnStyle['btn--lg']['none']['typography'] = [false, 9, '1.4em', false, false, false, false, false, false];
	};

	Buttons.prototype.initButtonsFromProject = function(buttons) {
		for(var property in buttons['custom']) {
			if( buttons['custom'].hasOwnProperty(property)) {
				this.customBtns.push(Object.values(buttons['custom'][property]));
			}
		}
		this.initButtonsArrayFromProject(buttons['style']);
	};

	Buttons.prototype.initButtonsArrayFromProject = function(buttons) {
		for(var property in buttons) {
			if( buttons.hasOwnProperty(property)) {
				this.btnStyle[property] = [];
				for(var subproperty in buttons[property]) {
					if( buttons[property].hasOwnProperty(subproperty)) {
						this.btnStyle[property][subproperty] = [];
						for( var val in buttons[property][subproperty]) {
							if(buttons[property][subproperty].hasOwnProperty(val)) {
								if(val == 'border' || val == 'textShadow' || val == 'shadow' || val == 'transform' || val == 'transition') {
									this.btnStyle[property][subproperty][val] = [];
									for( var subVal in buttons[property][subproperty][val]) {
										if(buttons[property][subproperty][val].hasOwnProperty(subVal)) {
											this.btnStyle[property][subproperty][val][subVal] = Object.values(buttons[property][subproperty][val][subVal]);
										}
									}
								} else if(val == 'appearance') {
									var string = this.resetAppearanceArray(buttons[property][subproperty][val]);
									this.btnStyle[property][subproperty][val] = Object.values(string);
								} else {
									this.btnStyle[property][subproperty][val] = Object.values(buttons[property][subproperty][val]);
								}
							}
						}
					}
				}
			}
		}
	};

	Buttons.prototype.resetAppearanceArray = function(obj) {
		var empty = true;
		for( var val in obj) {
			empty = false;
			break;
		}

		if(!empty) {
			for(var i= 0; i < 8; i++) {
				if(!obj[i]) obj[i] = false;
			}
		}
		return obj;
	};

	Buttons.prototype.initForms = function() {
		if(PROJECT && PROJECT.form) {
			this.initFormsFromProject(JSON.parse(decodeSafeURIComponent(PROJECT.form)));
		} else {
			this.initDefaultForms();
		}
	};

	Buttons.prototype.initDefaultForms = function() {
		//these are the default values
		this.btnStyle['form-control']['none']['appearance'] = ['--color-bg', false, '0.25em', false, false, false, false, false];
		this.btnStyle['form-control']['none']['padding'] = [4, 5, 5, 4];
		this.btnStyle['form-control']['none']['placeholder'] = ['--color-contrast-medium', false];
		this.btnStyle['form-control']['none']['typography'] = [false, 9, '1em', false, false, false, '1.2', false, false]; 
		this.btnStyle['form-control']['none']['border'] = [['--color-contrast-low', 0, '2px', 1]];
		// this.btnStyle['form-control']['none']['shadow'] = [[0, '--color-contrast-higher-a15', '0px 0px 0px 2px', 1]];
		this.btnStyle['form-control']['none']['transition'] = [[0, 0.2, 0, false]];
		this.btnStyle['form-control'][':focus']['outline'] = [false, 8, false, false];
		this.btnStyle['form-control'][':focus']['border'] = [['--color-primary', 5, '', 4]];
		this.btnStyle['form-control'][':focus']['shadow'] = [[0, '--color-primary-a20', '0px 0px 0px 2px', 0]];
		this.btnStyle['[disabled]']['none']['appearance'] = [false, false, false, false, 3, false, false, false];
		this.btnStyle['[aria-invalid]']['none']['border'] = [['--color-error', 0, '', 1]];
		// this.btnStyle['[aria-invalid]']['none']['shadow'] = [[0, '--color-error', '0px 0px 0px 2px', 1]];
		this.btnStyle['[aria-invalid]'][':focus']['shadow'] = [[0, '--color-error-a20', '0px 0px 0px 2px', 0]];
		this.btnStyle['legend']['none']['appearance'] = [false, false, false, false, false, false, false, false, false];
		this.btnStyle['legend']['none']['typography'] = [false, 3, false, false, false, false, false, false, false];
		this.btnStyle['form-label']['none']['typography'] = [false, 2, false, false, false, false, false, false, false];
	};

	Buttons.prototype.initFormsFromProject = function(forms) {
		this.initButtonsArrayFromProject(forms['style']);
	};

	Buttons.prototype.resetUi = function(section) {
		if(section == 'all') this.openToggleSections = true;//open/close sections if they have been modified
		//set ui according to selected button/state
		(section == 'all' || section == 'appearance') && this.resetAppearanceSection();
		(section == 'all' || section == 'padding') && this.resetPaddingSection();
		(section == 'all' || section == 'border') && this.resetBorderSection();
		(section == 'all' || section == 'typography') && this.resetTypographySection();
		(section == 'all' || section == 'shadow') && this.resetShadowSection('shadow', 1);
		(section == 'all' || section == 'textShadow') && this.resetShadowSection('textShadow', 0);
		(section == 'all' || section == 'outline') && this.resetOutlineSection();
		(section == 'all' || section == 'transition') && this.resetTransitionSection();
		(section == 'all' || section == 'transform') && this.resetTransformSection();
		(section == 'all' || section == 'placeholder') && this.resetPlaceholderSection();
		(section == 'all' || section == 'margin') && this.resetMarginSection();
		this.openToggleSections = false;
	};

	Buttons.prototype.resetStatusTag = function(){
		(this.selectedStatus == 0) ? this.statusTag.parent().addClass('app-editor-section__tags--is-hidden') : this.statusTag.parent().removeClass('app-editor-section__tags--is-hidden');
		this.statusTag.text(this.statusList[this.selectedStatus]);
	};

	Buttons.prototype.resetAppearanceSection = function() {
		if(this.appearanceSection.length == 0 ) return;
		this.checkOpacityFieldSet('appearance', 5, 0);
		this.checkOpacityFieldSet('appearance', 6, 1);
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'];
		var selects = this.appearanceSection.find('select'),
			inputs = this.appearanceSection.find('input');
		if(!styleValue || styleValue.length < 1) styleValue = false;
		selects.eq(1).val(styleValue[4] || 0);
		selects.eq(0).val(styleValue[7] || 0);
		inputs.eq(4).val(styleValue[2] || '').end().eq(5).val(styleValue[3] || '');
		// new opacity values
		(styleValue[5] || styleValue[5] === 0) ? inputs.eq(0).val(styleValue[5]+'%') : inputs.eq(0).val('100%');
		(styleValue[6] || styleValue[6] === 0) ? inputs.eq(2).val(styleValue[6]+'%') : inputs.eq(2).val('100%');
		this.setPreviewLabelColor(this.appearanceSection.find('.js-app-editor-color-preview').eq(0), styleValue[0]);
		this.setPreviewLabelColor(this.appearanceSection.find('.js-app-editor-color-preview').eq(1), styleValue[1]);
		this.checkSectionToReset('appearance');

		//check if radius is custom -> show input
		var customSize = this.appearanceSection.find('.js-app-editor-property--custom-value');
		(!styleValue[7] || styleValue[7] == 0) ? customSize.addClass('app-editor-property--custom-value--is-visible') : customSize.removeClass('app-editor-property--custom-value--is-visible');
	};

	Buttons.prototype.setPreviewLabelColor = function(element, label) {
		var bg = colorSelectionObject.colorValues[label] || this.getNotListedColorValue(label),
			label = colorSelectionObject.colorValues[label] ? label : this.getNotListedColorLabel(label),
			colorTitle = this.getTitleColorLabel(getColorTitlePreview(label));
		element.attr('style', 'background-color: '+ bg +';').attr('data-color-lb', label).attr('title', colorTitle);
		var inputOpacity = element.next('.js-opacity-field');
		if(inputOpacity) inputOpacity.trigger('reset-slider');
	};

	Buttons.prototype.getNotListedColorValue = function(label) {
		if(!label || label == '' || label.length == 4) return '';
		// should be an opacity value now
		return colorSelectionObject.colorValues[label.slice(0, -4)].replace('1)', Number(label.slice(-2)/100).toFixed(2)+')');
	};

	Buttons.prototype.getNotListedColorLabel = function(label) {
		if( label && label.indexOf('inherit') == 0) return 'inherit';
		if( label && label.indexOf('transparent') == 0) return 'transparent';
		if(!label || label == '' || label.length == 4) return '';
		return label;
	};

	Buttons.prototype.getTitleColorLabel = function(label) {
		if(label.indexOf('color-custom-') > -1) {
			label = colorSelectionObject.customColorLabels[colorSelectionObject.mainColorLabels.indexOf(label.replace('--color-', '')) - 5];
		}
		return label;
	};

	Buttons.prototype.resetPaddingSection = function() {
		this.resetPadMarg('padding');
	};

	Buttons.prototype.resetMarginSection = function() {
		this.resetPadMarg('margin');
	};

	Buttons.prototype.resetPadMarg = function(type) {
		if(this[type+'Section'].length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type];
		var values = [0, 0, 0, 0],
			select = this[type+'Section'].find('select');
		for(var i = 0; i < 4; i++) {
			if(styleValue && styleValue[i]){values[i] = styleValue[i];}
			select.eq(i).val(values[i]);
		}
		this.checkSectionToReset(type);
	};

	Buttons.prototype.resetBorderSection = function() {
		if(this.borderSection.length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['border'];
		//reset list of available borders
		this.resetList(this.borderSection, styleValue);
		var availableItems = this.borderSection.find('.js-app-editor-section__grid'),
			index = 0;
		if(styleValue && styleValue.length > 0) {
			for(var i = 0; i < styleValue.length; i++) {
				//property set
				var selects = availableItems.eq(index).find('select');
				selects.eq(1).val(styleValue[i][1]);
				selects.eq(0).val(styleValue[i][3]);
				availableItems.eq(index).find('input').val(styleValue[i][2]);
				this.setPreviewLabelColor(availableItems.eq(index).find('.js-app-editor-color-preview'), styleValue[i][0]);
				index = index + 1;
			}
		} else {
			availableItems.eq(0).find('select').val(0).end().find('input').val('').end().find('.js-app-editor-color-preview').removeAttr('style').removeAttr('data-color-lb');
		}
		this.checkSectionToReset('border');
	};

	Buttons.prototype.resetOutlineSection = function() {
		if(this.outlineSection.length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['outline'];
		if(!styleValue || styleValue.length < 1) styleValue = false;
		var inputs = this.outlineSection.find('input'),
			inputValues = [];
		inputValues[0] = styleValue[2] ? styleValue[2] : '';
		inputValues[1] = styleValue[3] ? styleValue[3] : '';
		var colorIndex;
		if(styleValue[0]) {
			colorIndex = styleValue[0];
		} else if(!styleValue) {
			colorIndex = '--color-primary';
		} else {
			colorIndex = '';
		}
		this.outlineSection.find('select').val(styleValue[1] || 0);
		inputs.eq(0).val(inputValues[0]).end().eq(1).val(inputValues[1]);
		this.setPreviewLabelColor(this.outlineSection.find('.js-app-editor-color-preview'), colorIndex);
		this.checkSectionToReset('outline');
	};

	Buttons.prototype.resetTypographySection = function() {
		if(this.typographySection.length == 0 ) return;
		//now get non false values for each item
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['typography'];
		this.setTypographyValues(styleValue);
		this.checkSectionToReset('typography');
	};

	Buttons.prototype.resetPlaceholderSection = function() {
		if(this.placeholderSection.length == 0 ) return;
		this.checkOpacityFieldSet('placeholder', 1, 0);
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['placeholder'];
		if(!styleValue || styleValue.length < 1) styleValue = false;
		(styleValue[1] || styleValue[1] === 0) ? this.placeholderSection.find('input').val(styleValue[1]+'%') : this.placeholderSection.find('input').val('100%');
		this.setPreviewLabelColor(this.placeholderSection.find('.js-app-editor-color-preview'), styleValue[0]);
		this.checkSectionToReset('placeholder');
	};

	Buttons.prototype.resetShadowSection = function(type, indexSection) {
		//first on/none, second color, third value, last inset/outset
		if(this.shadowSection.length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type];
		this.resetList(this.shadowSection.eq(indexSection), styleValue);
		var availableItems = this.shadowSection.eq(indexSection).find('.js-app-editor-section__grid');
		var classLabel = (type == 'textShadow') ? 'grid--text-shadow' : 'grid--shadow';
		if(styleValue && styleValue.length > 0) {
			for(var i = 0; i < styleValue.length; i++) {
				//property set
				var values =  styleValue[i][2].replace(/px/g, '').split(' '),
					inputs = availableItems.eq(i).find('input'),
					selects = availableItems.eq(i).find('select');
				for(var j = 0; j< inputs.length; j++) {
					(values[j]) ? inputs.eq(j).val(values[j]) : inputs.eq(j).val('');
				}
				this.setPreviewLabelColor(availableItems.eq(i).find('.js-app-editor-color-preview'), styleValue[i][1]);
				selects.eq(0).val(styleValue[i][0]);
				if(type != 'textShadow') selects.eq(1).val(styleValue[i][3]);
				(styleValue[i][0] == 1) 
					? availableItems.eq(i).addClass('app-editor-section__'+classLabel+'-off').removeClass('app-editor-section__'+classLabel+'-on')
					: availableItems.eq(i).addClass('app-editor-section__'+classLabel+'-on').removeClass('app-editor-section__'+classLabel+'-off');

				// reset visibility of shadow elements
				resetShadowBlockAppearance(selects.eq(1));
			}
		} else {
			availableItems.eq(0).find('input').val('').end().end().find('.js-app-editor-color-preview').removeAttr('style').removeAttr('data-color-lb').end().find('select').val(0);
		}
		this.checkSectionToReset(type, indexSection);
	};

	Buttons.prototype.resetTransitionSection = function() {
		if(this.transitionSection.length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['transition'];
		//reset list of available transition
		this.resetList(this.transitionSection, styleValue);
		var availableItems = this.transitionSection.find('.js-app-editor-section__grid');
		if(styleValue && styleValue.length > 0) {
			for(var i = 0; i < styleValue.length; i++) {
				//property set
				var selects = availableItems.eq(i).find('select'),
					inputs =  availableItems.eq(i).find('input');
				selects.eq(0).val(styleValue[i][0] || 0).end().eq(1).val(styleValue[i][2] || 0);
				inputs.eq(0).val(styleValue[i][1] || '').end().eq(1).val(styleValue[i][3] || '');
			}
		} else {
			availableItems.eq(0).find('select').val(0).end().find('input').val('');
		}
		this.checkSectionToReset('transition');
	};

	Buttons.prototype.resetTransformSection = function() {
		if(this.transformSection.length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['transform'];
		//reset list of available transition
		this.resetList(this.transformSection, styleValue);
		var availableItems = this.transformSection.find('.js-app-editor-section__grid');
		if(styleValue && styleValue.length > 0) {
			for(var i = 0; i < styleValue.length; i++) {
				//property set
				availableItems.eq(i).find('select').val(styleValue[i][0] || 0);
				availableItems.eq(i).find('input').val(styleValue[i][1] || '');
			}
		} else {
			availableItems.eq(0).find('select').val(0).end().find('input').val('');
		}
		this.checkSectionToReset('transform');
	};

	Buttons.prototype.checkOpacityFieldSet = function(type, opacityIndex, colorIndex) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][colorIndex] ) return;
		if(this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][opacityIndex] == null ) {
			// opacity field is not set -> set equal to false or load opacity value already saved
			this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][opacityIndex] = getOpacityValueFromLabel(this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][colorIndex]);
		}
	};

	Buttons.prototype.resetList = function(section, styleValue) {
		var list = 0,
			availableItems = section.find('.js-app-editor-section__grid');

		if(styleValue) list = styleValue.length;
		if(list < 2 || availableItems.length > list) {
			var index = (list < 2) ? 0 : availableItems.length - list - 1;
			availableItems.eq(index).nextAll('.js-app-editor-section__grid').remove();
		} else if(list > availableItems.length) {
			var clone = availableItems.eq(0).clone().removeClass('app-editor-section__grid--is-hidden')[0].outerHTML, string = '';
			for (var i = availableItems.length; i < list; i++) {string = string+clone;}
			availableItems.last().after(string);
		}

		//this is not the btn state and the line was removed
		if( list == 0 ) {
			availableItems.eq(0).addClass('app-editor-section__grid--is-hidden');
			section.find('.app-editor-section__hint').removeClass('app-editor-section__hint--is-hidden');
		} else { 
			availableItems.eq(0).removeClass('app-editor-section__grid--is-hidden');
			section.find('.app-editor-section__hint').addClass('app-editor-section__hint--is-hidden');
		}
		//reset labels
		section.find('.js-app-editor-section__grid').addClass('app-editor-section__grid--unlabeled').last().removeClass('app-editor-section__grid--unlabeled');
	};

	Buttons.prototype.checkSectionToReset = function(section, index) {
		var sectionElement = this[section+'Section'];
		if(section == 'shadow') sectionElement = this.shadowSection.eq(1);
		if(section == 'textShadow') sectionElement = this.shadowSection.eq(0);
		//this is the default btn status -> no reset link
		var isDefault = getDefaultStatusBtn(this.globalType, this.selectedButton, this.selectedStatus);
		if(isDefault) {
			sectionElement.removeClass('app-editor-section--content-edited');
		}
		if(this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][section] && this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][section].length > 0) {
			if(this.openToggleSections) sectionElement.children('.js-app-editor-section__title').removeClass('app-editor-section__title--hide-body');
			if(!isDefault) sectionElement.addClass('app-editor-section--content-edited');
		} else {
			if(this.openToggleSections) sectionElement.children('.js-app-editor-section__title').addClass('app-editor-section__title--hide-body');
			if(!isDefault) sectionElement.removeClass('app-editor-section--content-edited');
		}
	};

	Buttons.prototype.setTypographyValues = function(array) {
		if(!array) array = false;
		var selects = this.typographySection.find('select'),
			inputs = this.typographySection.find('input'),
			customSize = this.typographySection.find('.js-app-editor-property--custom-value');
		
		selects.eq(0).val(array[0] || 0).end().eq(1).val(array[1] || 0).end().eq(2).val(array[4] || 0).end().eq(3).val(array[5] || 0).end().eq(4).val(array[8] || 0);
		inputs.eq(0).val(array[2]|| '').end().eq(1).val(array[3]|| '').end().eq(2).val(array[6]|| '').end().eq(3).val(array[7]|| '');
		//check if size is custom -> show input
		(array[1] && array[1] == 9) ? customSize.addClass('app-editor-property--custom-value--is-visible') : customSize.removeClass('app-editor-property--custom-value--is-visible');
	};

	Buttons.prototype.eventListeners = function() {
		var self = this;
		//listen to change of state selection
		this.statusSection.on('change', 'select', function(event){
			self.selectedStatus = $(event.target).val();
			self.resetUi('all');
			self.resetStatusTag();
			self.toggleCopyFromOrigin();
		});

		//listen to change of selected button in left sidebar
		$(this.element).on('content-selected', function(event, type, target, index){
			if(type == 'forms') {
				//reset visibility or margin and placeholder sections
				self.resetSectionVisibility(target);
			}
			// if the button is custom -> select proper label first
			if(index) target = self.customBtns[index-3][1];
			self.selectNewButton(type, target);
			self.toggleCopyFromOrigin();
		});

		//this event is triggered when the 'Reset' link is clicked
		$(this.element).on('reset-status', function(event, section){
			var attribute = getClassStarting(section, 'js-app-editor-section--').replace('js-app-editor-section--', '');
			if(attribute == 'shadow') attribute = section.attr('data-shadow');
			self.btnStyle[self.selectedButton][self.statusList[self.selectedStatus]][attribute] = [];
			self.resetUi(attribute);
			self.updateButtonsDemo(true);
			self.toggleCopyFromOrigin(false);
		});

		//listen to change of input fields
		listenToParentInput($(this.element), function(event){
			var attribute = getClassStarting($(event.target).parents('.js-app-editor-section').eq(0), 'js-app-editor-section--').replace('js-app-editor-section--', '');
			if(attribute == 'shadow') attribute = $(event.target).parents('.js-app-editor-section').attr('data-shadow');
			if(event.type == 'focusout') {
				if(attribute == 'border' || attribute == 'outline' || (attribute == 'typography' && $(event.target).is('#letterSpacing')) || (attribute == 'appearance' && $(event.target).is('#btnRadius')) ) {
					self.resetUnitValue($(event.target), 'px');
					//for border -> set a default of 1px if empty
					// if(attribute == 'border' && $(event.target).val().trim() == '') $(event.target).val('1px');
				} else if(attribute == 'typography' && $(event.target).hasClass('js-app-editor-property__custom-size')) {
					self.resetUnitValue($(event.target), 'em');
				} else if(attribute == 'transform') {
					var property = Number($(event.target).parent().prev().find('select').val());
					if(property > 0 && property < 5 ) self.resetUnitValue($(event.target), 'px');
					else if(property > 8) self.resetUnitValue($(event.target), 'deg');
				} else if(attribute == 'shadow' || attribute == 'textShadow') {
					if(!$(event.target).parent().hasClass('js-app-editor__input-group--spread') && $(event.target).val().trim() == '') $(event.target).val('0');
				} else if( $(event.target).is('.js-opacity-field') ) {
					var opacityVal = $(event.target).val(),
						resetOpacity = getPercentageFormat(opacityVal);
					if(opacityVal != resetOpacity) $(event.target).val(resetOpacity);
				} else if(attribute == 'appearance' && $(event.target).is('#opacity') ) {
					var opacityVal = $(event.target).val();
					if(opacityVal.indexOf('%') > -1) {
						$(event.target).val((Number(opacityVal.replace('%', ''))/100).toFixed(2));
					}
				}
			}
			
			if( $(event.target).is('.js-opacity-field') ) {
				// opacity input has been updated -> change icon color preview
				self.colorPreviewInteracted = $(event.target).prev('.js-app-editor-color-preview');
				var label = self.getNewLabelColOpac($(event.target).val());
				$(self.element).trigger('new-color-selection', [label, true]);
			} else {
				self.resetBtnStyle($(event.target), attribute, self.typing);
			}

			self.typing = false;
		});
		
		$(this.element).on('keydown', 'input', function(){
			self.typing = true;
		});

		$(this.element).on('change', 'select', function(event){
			var attribute = getClassStarting($(event.target).parents('.js-app-editor-section').eq(0), 'js-app-editor-section--').replace('js-app-editor-section--', '');
			if(attribute == 'shadow') attribute = $(event.target).parents('.js-app-editor-section').attr('data-shadow');
			//check if transform
			if(attribute == 'transform') {
				var property = $(event.target).val(),
					input = $(event.target).parents('.app-editor__input-group').next().find('input');
				if(property > 0 && property < 5) self.resetUnitValue(input, 'px');
				else if(property > 8) self.resetUnitValue(input, 'deg');
			}
			self.resetBtnStyle($(event.target), attribute, true);
			self.typing = false;
		});

		//listen to the click on the padding link button
		$(this.element).on('click', '.js-app-editor-btn-link', function(event){
			var type = ($(event.currentTarget).parents('.js-app-editor-section--padding').length > 0) ? 'padding' : 'margin';
			self[type+'Locked'] = !self[type+'Locked'];
			$(event.currentTarget).toggleClass('is-selected');
		});
		
		//listen to click on 'add' option
		$(this.element).on('click', '.js-btn-create', function(event) {
			var section = $(event.target).parents('.js-app-editor-section').eq(0),
				sectionType = getClassStarting(section, 'js-app-editor-section--').replace('js-app-editor-section--', '');
			section.children().eq(0).removeClass('app-editor-section__title--hide-body');
			self.addNewItem(section);
			if(sectionType == 'shadow') sectionType = section.attr('data-shadow');
			self.resetBtnStyle('', sectionType, false);
		});
		//listen to click on 'remove' option
		$(this.element).on('click', '.js-btn-delete', function(event) {
			var section = $(event.target).parents('.js-app-editor-section').eq(0),
				sectionType = getClassStarting(section, 'js-app-editor-section--').replace('js-app-editor-section--', '');
			self.removeItem(section, $(event.currentTarget));
			if(sectionType == 'shadow') sectionType = section.attr('data-shadow');
			self.resetBtnStyle('', sectionType, true);
		});
		//a new custom button has been created
		$(this.element).on('custom-content-added', function(event, type, title, bool) {
			if(type != 'buttons') return;
			var customLabel = (self.customBtns.length == 0) ? 'btn--custom-0' : 'btn--custom-'+(Number(self.customBtns[self.customBtns.length-1][1].replace('btn--custom-', '')) + 1);
			self.customBtns.push([title, customLabel]);
			self.initCustomBtnStyleArray(customLabel);
			self.selectNewButton(type, customLabel);
			self.updateButtonsDemoNewBtn(title, customLabel);
			self.toggleCopyFromOrigin();
		});
		//a custom button name has been updated
		$(this.element).on('custom-content-edited', function(event, type, index, title, section) {
			if(type != 'buttons') return;
			var customBtnIndex =  index - 3;
			self.customBtns[customBtnIndex][0] = title;
			self.updateButtonsDemoEditBtn(index, title);
		});
		//a custom button has been removed
		$(this.element).on('custom-content-removed', function(event, type, index, label) {
			if(type != 'buttons') return;
			var customBtnIndex =  index - 3,
				customLabel = self.customBtns[customBtnIndex][1];
			self.btnStyle[customLabel] = [];
			self.customBtns.splice(customBtnIndex, 1);
			self.updateButtonsDemoRemoveBtn(index, customLabel);
		});

		//listen to click on preview color
		$(this.element).on('click', '.js-app-editor-color-preview', function(event){
			self.colorPreviewInteracted = $(event.target);
		});

		$(this.element).on('new-color-selection', function(event, label, bool){
			label = resetColorLabelValue(label);
			if(self.colorPreviewInteracted) {
				if( self.colorPreviewInteracted.parents('.js-app-editor-section--border').length > 0 ) {self.borderNewColorSelection(label, self.colorPreviewInteracted.parents('.js-app-editor-section__grid').index(), bool);}
				else if( self.colorPreviewInteracted.parents('.js-app-editor-section--outline').length > 0 ) {self.outlineNewColorSelection(label, bool);}
				else if( self.colorPreviewInteracted.parents('.js-app-editor-section--shadow[data-shadow="textShadow"]').length > 0 ) {self.shadowNewColorSelection(label, 'textShadow', self.colorPreviewInteracted.parents('.js-app-editor-section__grid').index(), bool);}
				else if( self.colorPreviewInteracted.parents('.js-app-editor-section--shadow[data-shadow="shadow"]').length > 0 ) {self.shadowNewColorSelection(label, 'shadow', self.colorPreviewInteracted.parents('.js-app-editor-section__grid').index(), bool);}
				else if( self.colorPreviewInteracted.parents('.js-app-editor-section--appearance').length > 0 ) {self.appearanceNewColorSelection(label, bool, self.colorPreviewInteracted.attr('data-property'));}
				else if( self.colorPreviewInteracted.parents('.js-app-editor-section--placeholder').length > 0 ) {self.placeholderNewColorSelection(label, bool);}
				self.updateButtonsDemo(true);
			}
		});

		// copy from origin link
		this.copyFromOrigin.on('click', function(){
			self.copyShadowFromOrigin();
		});

		// $(this.element).on('new-opacity-created', function(event, label, value) {
		// 	self.updateDemoCssColors(label, value);
		// });
	};

	Buttons.prototype.getNewLabelColOpac = function(val) {
		var originalLabel = this.colorPreviewInteracted.attr('data-color-lb'),
			opacityPart = originalLabel.slice(-4);
		if(opacityPart.indexOf('-a') == 0 ) originalLabel = originalLabel.slice(0, -4);
		return originalLabel + getOpInputForSelection(val);
	};

	Buttons.prototype.resetSectionVisibility = function(target) {
		this.placeholderSection.toggleClass('app-editor-section--is-hidden', !(target == 'form-control'));
		this.marginSection.toggleClass('app-editor-section--is-hidden', !(target == 'legend' || target == 'form-label'));
	};

	Buttons.prototype.resetUnitValue = function(target, unit) {
		var valueUnit = getValueUnit(target.val());
		if(valueUnit[0] && valueUnit[1] == '' ) target.val(target.val()+unit);
	};

	Buttons.prototype.removeItem = function(section, target) {
		var items = section.find('.js-app-editor-section__grid');
		if(items.length == 1) {
			//just one element -> hide it
			items.addClass('app-editor-section__grid--is-hidden');
			//reset content
			items.find('select').val(0).end().find('input').val('').end().find('.js-app-editor-color-preview').removeAttr('style').removeAttr('data-color-lb');
			return;
		}
		target.parents('.js-app-editor-section__grid').remove();
	};

	Buttons.prototype.addNewItem = function(section) {
		var firstItem = section.find('.js-app-editor-section__grid').eq(0);
		if(firstItem.hasClass('app-editor-section__grid--is-hidden')) {
			//first item is hidden -> just show it
			firstItem.removeClass('app-editor-section__grid--is-hidden app-editor-section__grid--unlabeled');
			//if this is shadow section -> add proper class
			if(section.attr('data-shadow')) {
				(section.attr('data-shadow') == 'textShadow') ? firstItem.addClass('app-editor-section__grid--text-shadow-on') : firstItem.addClass('app-editor-section__grid--shadow-on');
			}
			//reset inital values
			this.resetInitialValues(section);
			return;
		}
		//need to appen new item
		var newItem = firstItem.clone();
		//reset item
		newItem.find('select').val(0).end().find('input').val('').end().find('.js-app-editor-color-preview').removeAttr('style').removeAttr('data-color-lb');
		
		var listItems = section.find('.js-app-editor-section__grid');
		listItems.last().after(newItem[0].outerHTML);
		//reset inital values
		this.resetInitialValues(section);
		//reset labels
		listItems.addClass('app-editor-section__grid--unlabeled').last().removeClass('app-editor-section__grid--unlabeled');
	};

	Buttons.prototype.resetInitialValues = function(section) {
		//default values for added items (using the + icon)
		if(section.hasClass('js-app-editor-section--transition')) {
			section.find('.js-app-editor-section__grid').last().find('input').eq(0).val('0.3');
		}
		if(section.attr('data-shadow')) {
			var initial = (section.attr('data-shadow') == 'shadow') ? ['0', '4', '8', '--color-black-a20']: ['0', '1', '2', '--color-black-a25'];
			var lastSection = section.find('.js-app-editor-section__grid').last();
			lastSection.find('input').eq(0).val(initial[0]).end().eq(1).val(initial[1]).end().eq(2).val(initial[2]);
			lastSection.find('.js-app-editor-color-preview').attr('data-color-lb', initial[3]);
		}
		if(section.hasClass('js-app-editor-section--border')) {
			var lastSection = section.find('.js-app-editor-section__grid').last();
			lastSection.find('input').eq(0).val('1px');
			lastSection.find('select').eq(0).val(1);
			lastSection.find('.js-app-editor-color-preview').attr('data-color-lb', '--color-contrast-low');
		}
	};

	Buttons.prototype.copyShadowFromOrigin = function() {
		//set shadow equal to the one of the global base
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['shadow'] = this.btnStyle[this.globalBase][this.statusList[this.selectedStatus]]['shadow'];
		var grids = this.shadowSection.eq(1).find('.js-app-editor-section__grid'),
			shadowLines = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['shadow'].length;
		grids.eq(0).removeClass('app-editor-section__grid--is-hidden').addClass('app-editor-section__grid--unlabeled');
		// update number of children
		if( shadowLines > grids.length) {
			var item = grids.eq(0).clone();
			for(var i = grids.length; i < shadowLines; i++) {
				grids.eq(0).after(item);
			}
		} else if( shadowLines < grids.length ) {
			for(var i = shadowLines; i < grids.length; i++) {
				grids.eq(i).remove();
			}
		}
		this.shadowSection.find('.js-app-editor-section__grid').last().removeClass('app-editor-section__grid--unlabeled');
		var items = this.shadowSection.eq(1).find('.js-app-editor-section__grid'),
			shadowValArray = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['shadow'];
		for(var i = 0; i < shadowLines; i++) {
			var values =  shadowValArray[i][2].replace(/px/g, '').split(' ');
			items.eq(i).find('input').eq(0).val(values[0]).end().eq(1).val(values[1]).end().eq(2).val(values[2]).end().eq(3).val(values[3]);
			items.eq(i).find('.js-app-editor-color-preview').attr('data-color-lb', shadowValArray[i][1]);
			items.eq(i).find('select').eq(0).val(shadowValArray[i][0]).end().eq(1).val(shadowValArray[i][3]);
		}
		this.resetBtnStyle('', 'shadow', false);
	};

	Buttons.prototype.toggleCopyFromOrigin = function(bool) {
		if(bool) {
			this.copyFromOrigin.toggleClass('is-hidden', bool);
			return;
		}
		//check if shadow has been set
		var toggle = (this.btnStyle[this.globalBase][this.statusList[this.selectedStatus]]['shadow'] && this.btnStyle[this.globalBase][this.statusList[this.selectedStatus]]['shadow'].length > 0);
		if(this.globalBase == this.selectedButton) toggle = false;
		this.copyFromOrigin.toggleClass('is-hidden', !toggle);
	};

	Buttons.prototype.selectNewButton = function(type, target) {
		if(type != 'buttons' && type != 'forms') return;
		this.selectedButton = target;
		this.resetUi('all');
	};

	Buttons.prototype.resetBtnStyle = function(target, section, bool) {
		if(section == 'states') return;
		//check if array changed
		var btnStyleArray = this.getNewBtnStyleSection(section, target);
		var boolChanges = this.sectionChanged(this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][section], btnStyleArray[0]);
		if( btnStyleArray[1] ) {
			this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][section] = btnStyleArray[0];
			this.checkSectionToReset(section);//something changed - show reset
		} else {
			//no changes made
			this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][section] = [];
			this.checkSectionToReset(section);//something changed - show reset
		}
		this.resetUi(section);
		// if(btnStyleArray[1] || bool) this.updateButtonsDemo(boolSave);
		if( (btnStyleArray[1] && boolChanges)  || bool) this.updateButtonsDemo(boolChanges);
	};

	Buttons.prototype.sectionChanged = function(oldVal, newVal) {
		var changed = false;
		if( (!oldVal && newVal) || (oldVal.length != newVal.length)) return true;
		for(var i = 0; i < oldVal.length; i++) {
			if(oldVal[i] != newVal[i]) {
				changed = true;
				break;
			}
		}
		return changed;
	};

	Buttons.prototype.getNewBtnStyleSection = function(section, target) {
		var sectionApp = this[section+'Section'];
		if(section == 'shadow') sectionApp = this.shadowSection.eq(1);
		if(section == 'textShadow') sectionApp = this.shadowSection.eq(0);
		
		var inputs = sectionApp.find('input'),
			selects = sectionApp.find('select'),
			colorPreview = sectionApp.find('.js-app-editor-color-preview');
		if(section == 'appearance') return this.resetAppearanceBtnStyle(inputs, selects, colorPreview);
		if(section == 'padding') return this.resetPaddingBtnStyle(inputs, selects, colorPreview, target);
		if(section == 'border') return this.resetBorderBtnStyle(inputs, selects, colorPreview);
		if(section == 'typography') return this.resetTypographyBtnStyle(inputs, selects, colorPreview);
		if(section == 'shadow') return this.resetShadowBtnStyle(sectionApp, 'shadow', 1, inputs, selects, colorPreview);
		if(section == 'textShadow') return this.resetShadowBtnStyle(sectionApp, 'textShadow', 0, inputs, selects, colorPreview);
		if(section == 'outline') return this.resetOutlineBtnStyle(inputs, selects, colorPreview);
		if(section == 'transition') return this.resetTransitionBtnStyle(inputs, selects, colorPreview);
		if(section == 'transform') return this.resetTransformBtnStyle(inputs, selects, colorPreview);
		if(section == 'margin') return this.resetMarginBtnStyle(inputs, selects, colorPreview, target);
		if(section == 'placeholder') return this.resetPlaceholderBtnStyle(inputs, selects, colorPreview);
	};

	Buttons.prototype.resetAppearanceBtnStyle = function(inputs, selects, colorPreview) {
		// var styleArray = [selects.eq(0).val(), selects.eq(1).val(), inputs.eq(0).val(), inputs.eq(1).val(), Number(selects.eq(2).val())],
		var styleArray = [colorPreview.eq(0).attr('data-color-lb'), colorPreview.eq(1).attr('data-color-lb'), inputs.eq(4).val(), inputs.eq(5).val(), Number(selects.eq(1).val()), getOpacityInput(inputs.eq(0).val()), getOpacityInput(inputs.eq(2).val()), Number(selects.eq(0).val())],
			changed = false;
		if(styleArray[0]!= '' || styleArray[1]!= '' || styleArray[2].trim() != '' || styleArray[4]!=0 || styleArray[3].trim() != '' || styleArray[7]!= 0) changed = true;
		return [styleArray, changed];
	};

	Buttons.prototype.resetPaddingBtnStyle = function(inputs, selects, colorPreview, target) {
		return this.resetPadMargBtnStyle('padding', inputs, selects, colorPreview, target);
	};

	Buttons.prototype.resetMarginBtnStyle = function(inputs, selects, colorPreview, target) {
		return this.resetPadMargBtnStyle('margin', inputs, selects, colorPreview, target);
	};

	Buttons.prototype.resetPadMargBtnStyle = function(type, inputs, selects, colorPreview, target) {
		var styleArray = [Number(selects.eq(0).val()), Number(selects.eq(1).val()), Number(selects.eq(2).val()), Number(selects.eq(3).val())],
			changed = false;
		if(this[type+'Locked']) styleArray = [Number(target.val()), Number(target.val()), Number(target.val()), Number(target.val())];
		if(styleArray[0]!=0 || styleArray[1]!=0 || styleArray[2]!=0 || styleArray[3]!=0) changed = true;
		return [styleArray, changed];
	};

	Buttons.prototype.resetBorderBtnStyle = function(inputs, selects, colorPreview) {
		var borderItems = this.borderSection.find('.js-app-editor-section__grid').not('.app-editor-section__grid--is-hidden'),
			styleArray = [],
			changed = false;
		for(var i = 0; i < borderItems.length; i++) {
			var offsetSelect = i*2;
			styleArray[i] = [colorPreview.eq(i).attr('data-color-lb'), Number(selects.eq(1+offsetSelect).val()), inputs.eq(i).val(), Number(selects.eq(offsetSelect).val())];
		}
		if(borderItems.length > 0) changed = true;
		return [styleArray, changed];
	};

	Buttons.prototype.resetOutlineBtnStyle = function(inputs, selects, colorPreview) {
		var styleArray = [colorPreview.eq(0).attr('data-color-lb'), Number(selects.eq(0).val()), inputs.eq(0).val(), inputs.eq(1).val()],
			changed = false;
		if(styleArray[1]!='' || styleArray[0]!=0 || styleArray[2].trim() != '') changed = true;
		return [styleArray, changed];
	};

	Buttons.prototype.resetTypographyBtnStyle = function(inputs, selects, colorPreview) {
		var styleArray = [Number(selects.eq(0).val()), Number(selects.eq(1).val()), inputs.eq(0).val(), inputs.eq(1).val(), Number(selects.eq(2).val()), Number(selects.eq(3).val()), inputs.eq(2).val(), inputs.eq(3).val(), Number(selects.eq(4).val())],
			changed = false;
		if(styleArray[1] == 0 || styleArray[1] != 9) styleArray[2] = '';
		for(var i = 0; i < styleArray.length; i++) {
			if(styleArray[i] && styleArray[i] !== 0 && styleArray[i].toString().trim() !== '') {changed = true; break;}
		}
		return [styleArray, changed];
	};

	Buttons.prototype.resetPlaceholderBtnStyle = function(inputs, selects, colorPreview) {
		var styleArray = [colorPreview.eq(0).attr('data-color-lb'), getOpacityInput(inputs.eq(0).val())],
			changed = false;
		if(styleArray[0]!='') changed = true;
		return [styleArray, changed];
	};

	Buttons.prototype.resetShadowBtnStyle = function(section, type, index, inputs, selects, colorPreview) {
		//first on/none, second color, third value, last inset/outset
		var shadowItems = section.find('.js-app-editor-section__grid').not('.app-editor-section__grid--is-hidden'),
			styleArray = [],
			changed = false;
		for(var i = 0; i < shadowItems.length; i++) {
			var offsetInput = (type == 'textShadow') ? i*3 : i*4;
			var offsetSelect = (type == 'textShadow') ? i : i*2;
			var input = setFormatUnit(inputs.eq(offsetInput).val())+' '+setFormatUnit(inputs.eq(offsetInput+1).val())+' '+setFormatUnit(inputs.eq(offsetInput+2).val());
			if(type != 'textShadow') input = input+' '+setFormatUnit(inputs.eq(offsetInput+3).val());
			styleArray[i] = [Number(selects.eq(offsetSelect).val()), colorPreview.eq(i).attr('data-color-lb'), input];
			if(type != 'textShadow') styleArray[i][3] = Number(selects.eq(offsetSelect+1).val());
		}
		if(shadowItems.length > 0) changed = true;
		return [styleArray, changed];
	};

	Buttons.prototype.resetTransitionBtnStyle = function(inputs, selects, colorPreview) {
		var transitionItems = this.transitionSection.find('.js-app-editor-section__grid').not('.app-editor-section__grid--is-hidden'),
			styleArray = [],
			changed = false;
		for(var i = 0; i < transitionItems.length; i++) {
			var offset = i*2;
			styleArray[i] = [Number(selects.eq(offset).val()), inputs.eq(offset).val().replace('s', ''), Number(selects.eq(1+offset).val()), inputs.eq(1+offset).val().replace('s', '')];
		}
		if(transitionItems.length > 0) changed = true;
		return [styleArray, changed];
	};

	Buttons.prototype.resetTransformBtnStyle = function(inputs, selects, colorPreview) {
		var transformItems = this.transformSection.find('.js-app-editor-section__grid').not('.app-editor-section__grid--is-hidden'),
			styleArray = [],
			changed = false;
		for(var i = 0; i < transformItems.length; i++) {
			styleArray[i] = [Number(selects.eq(i).val()), inputs.eq(i).val()];
		}
		if(transformItems.length > 0) changed = true;
		return [styleArray, changed];
	};

	Buttons.prototype.updateButtonsDemo = function(bool) {
		(this.globalType == 'buttons')
			? this.iframe.updateIframeButtons(this.btnStyle, this.selectedStatus, this.selectedButton, this.customBtns)
			: this.iframe.updateIframeForms(this.btnStyle, this.selectedStatus, this.selectedButton);
		
		if(bool && IS_LOGGED == '1') SaveAlert.yes();
	};

	Buttons.prototype.updateButtonsDemoNewBtn = function(title, customLabel) {
		this.iframe.createIframeButtons(title, customLabel);
		if(IS_LOGGED == '1') SaveAlert.yes();
	};

	Buttons.prototype.updateButtonsDemoEditBtn = function(index, label) {
		this.iframe.editIframeButtons(index, label);
		if(IS_LOGGED == '1') SaveAlert.yes();
	};

	Buttons.prototype.updateButtonsDemoRemoveBtn = function(index, customLabel) {
		this.iframe.cancelIframeButtons(index, customLabel);
		if(IS_LOGGED == '1') SaveAlert.yes();
	};

	Buttons.prototype.borderNewColorSelection = function(label, index, bool) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['border'][index] || this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['border'][index].length == 0) this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['border'][index] = [false, false, false, false];
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['border'][index][0] = label;
		if(bool) this.resetBorderSection();
	};

	Buttons.prototype.outlineNewColorSelection = function(label, bool) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['outline'] || this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['outline'].length == 0) this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['outline'] = [false, false, false, false];
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['outline'][0] = label;
		if(bool) this.resetOutlineSection();
	};

	Buttons.prototype.shadowNewColorSelection = function(label, type, index, bool) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][index] || this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][index].length == 0) {
			this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][index] = [false, false, false];
			if(type == 'shadow') this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][index][3] = false;
		}
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][index][1] = label;
		if(bool) {
			(type == 'shadow') ? this.resetShadowSection('shadow', 1) : this.resetShadowSection('textShadow', 0);
		}
	};

	Buttons.prototype.appearanceNewColorSelection = function(label, bool, id) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'] || this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'].length == 0) this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'] = [false, false, false, false, false, false, false];
		var index = (id == 'bgColor') ? 0 : 1;
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'][index] = label;
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'][index + 5] = getOpacityValueFromLabel(label);
		if(bool) this.resetAppearanceSection();
	};

	Buttons.prototype.placeholderNewColorSelection = function(label, bool) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['placeholder'] || this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['placeholder'].length == 0) this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['placeholder'] = [false, false];
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['placeholder'][0] = label;
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['placeholder'][1] = getOpacityValueFromLabel(label);
		if(bool) this.resetPlaceholderSection();
	};

	// Buttons.prototype.updateDemoCssColors = function(label, value) {
	// 	this.iframe.addCssColor(label, value);
	// };

	Buttons.prototype.getButtonsArrayToSave = function() {
		var buttonsArray = [];
		buttonsArray['style'] = [];
		buttonsArray['custom'] = this.customBtns;
		//save btns style
		var defaultBtns = getButtonsDefault();
		for(var i = 0; i <  this.customBtns.length; i++) {
			defaultBtns.push(this.customBtns[i][1]);
		}

		for(var i = 0; i < defaultBtns.length; i++) {
			buttonsArray['style'][defaultBtns[i]] = this.btnStyle[defaultBtns[i]];
		}
		return buttonsArray;
	};

	Buttons.prototype.getFormsArrayToSave = function() {
		var buttonsArray = [];
		buttonsArray['style'] = [];
		//save btns style
		var defaultBtns = getFormsDefault();
		for(var i = 0; i < defaultBtns.length; i++) {
			buttonsArray['style'][defaultBtns[i]] = this.btnStyle[defaultBtns[i]];
		}
		return buttonsArray;
	};

	Buttons.prototype.updateButtonsCopyCode = function(code) {
		var newCodeString = '',
			mainBtns = getButtonsDefault(),
			variablesBtns = this.getButtonsVarStyle();
		for(var i = 0; i < 4; i++) {
			var appendix = '';
			//start with main buttons
			if(i == 0) appendix = variablesBtns;
			if(i == 1) newCodeString = newCodeString + '\n// themes';
			if(i != 0) newCodeString = newCodeString + '\n';
			newCodeString = newCodeString +this.getButtonsCodeStyle(mainBtns[i], mainBtns[i], appendix);
		}
		//custom buttons
		if(this.customBtns && this.customBtns.length > 0) {
			for(var i = 0; i < this.customBtns.length; i++) {
				newCodeString = newCodeString + '\n'+this.getButtonsCodeStyle(this.customBtns[i][1], this.customBtns[i][0]);
			}
		}
		
		//disabled etc..
		for(var i = 4; i < mainBtns.length; i++) {
			if(i == 4) newCodeString = newCodeString + '\n// feedback';
			if(i == 5) newCodeString = newCodeString + '\n// size';
			newCodeString = newCodeString + '\n'+this.getButtonsCodeStyle(mainBtns[i], mainBtns[i]);
		}

		code = code.replace(code, newCodeString).trimRight();
		return code;
	};

	Buttons.prototype.getButtonsCodeStyle = function(btnLabel, btnNiceLabel, appendix) {
		var string = '';
		if(!this.btnStyle[btnLabel]) return string;
		// for(var i = 0; i < this.statusList.length; i++) {
		for(var i = 0; i < this.statusPriorityList.length; i++) {
			var spacing = (i==0) ? '  ' : '    ';
			if(this.btnStyle[btnLabel][this.statusPriorityList[i]] && objHasProperty(this.btnStyle[btnLabel][this.statusPriorityList[i]])) {
				if(i!=0) string = string + '\n\n  &'+this.statusPriorityList[i]+' {';
				string = string + this.iframe.getButtonCode(this.btnStyle[btnLabel][this.statusPriorityList[i]], spacing, this.iframe, btnLabel, this.statusPriorityList[i], false);
				if(i!=0) string = string + '\n  }';
			}
		}

		if(btnLabel == '[disabled]') {
			btnNiceLabel = 'form-control--disabled, .form-control[disabled], .form-control[readonly]';
		} else if(btnLabel == '[aria-invalid]') {
			btnNiceLabel = 'form-control[aria-invalid="true"], .form-control--error';
		} else if(btnLabel == 'legend') {
			btnNiceLabel = 'form-legend';
		} else if(btnLabel == 'btn--disabled') {
			btnNiceLabel = 'btn--disabled, .btn[disabled], .btn[readonly]';
		}
		if(appendix) {
			string = appendix + string;
		}
		return '.'+btnNiceLabel+' {'+string+'\n}\n';
	};

	Buttons.prototype.getButtonsVarStyle = function(){
		var cssString = '\n'+this.getCodeVariableFontSize('btn', '--btn-font-size');
		if(this.btnStyle['btn'] && this.btnStyle['btn']['none'] && this.btnStyle['btn']['none']['padding'] && this.btnStyle['btn']['none']['padding'][1]) cssString = cssString + '  --btn-padding-x: '+this.iframe.getButtonsPaddingValue(this.btnStyle['btn']['none']['padding'][1])+';\n';
		if(this.btnStyle['btn'] && this.btnStyle['btn']['none'] && this.btnStyle['btn']['none']['padding'] && this.btnStyle['btn']['none']['padding'][0]) cssString = cssString + '  --btn-padding-y: '+this.iframe.getButtonsPaddingValue(this.btnStyle['btn']['none']['padding'][0])+';\n';
		if(this.btnStyle['btn'] && this.btnStyle['btn']['none'] && this.btnStyle['btn']['none']['appearance']){
			if(this.btnStyle['btn']['none']['appearance'][7] && this.btnStyle['btn']['none']['appearance'][7] > 0) {
				cssString = cssString + '  --btn-radius: '+borderRadiusValues[this.btnStyle['btn']['none']['appearance'][7]]+';';
			} else if(this.btnStyle['btn']['none']['appearance'][2]) {
				cssString = cssString + '  --btn-radius: '+this.btnStyle['btn']['none']['appearance'][2]+';';
			} else {
				cssString = cssString + '  --btn-radius: 0em;';
			}
		} 
		return cssString;
	};

	Buttons.prototype.getCodeVariableFontSize = function(btnLabel, cssVarLabel) {
		var string = '',
			fontBase = '';
		if(this.btnStyle[btnLabel] && this.btnStyle[btnLabel]['none'] && this.btnStyle[btnLabel]['none']['typography']) {
			fontBase = this.iframe.getButtonsFontSizeValue(this.btnStyle[btnLabel]['none']['typography']);
			if(fontBase != '') string = string + '  '+cssVarLabel+': '+fontBase+';\n';
		}
		return string;
	};

	Buttons.prototype.updateFormsCopyCode = function(code) {
		var newCodeString = '',
			mainBtns = getFormsDefault(),
			variablesBtns = this.getFormsVarStyle();
		for(var i = 0; i < mainBtns.length; i++) {
			var appendix = '';
			if(i == 0) appendix = variablesBtns;
			if(i != 0) newCodeString = newCodeString + '\n';
			newCodeString = newCodeString +this.getButtonsCodeStyle(mainBtns[i], mainBtns[i], appendix);
		}

		code = newCodeString.trimRight();
		return code;
	};

	Buttons.prototype.getFormsVarStyle = function() {
		var cssString = '\n'+this.getCodeVariableFontSize('form-control', '--form-control-font-size');
		if(this.btnStyle['form-control'] && this.btnStyle['form-control']['none'] && this.btnStyle['form-control']['none']['padding'] && this.btnStyle['form-control']['none']['padding'][1]) cssString = cssString + '  --form-control-padding-x: '+this.iframe.getButtonsPaddingValue(this.btnStyle['form-control']['none']['padding'][1])+';\n';
		if(this.btnStyle['form-control'] && this.btnStyle['form-control']['none'] && this.btnStyle['form-control']['none']['padding'] && this.btnStyle['form-control']['none']['padding'][0]) cssString = cssString + '  --form-control-padding-y: '+this.iframe.getButtonsPaddingValue(this.btnStyle['form-control']['none']['padding'][0])+';\n';
		if(this.btnStyle['form-control'] && this.btnStyle['form-control']['none'] && this.btnStyle['form-control']['none']['appearance']) {
			if(this.btnStyle['form-control']['none']['appearance'][7] && this.btnStyle['form-control']['none']['appearance'][7] > 0) {
				cssString = cssString + '  --form-control-radius: '+borderRadiusValues[this.btnStyle['form-control']['none']['appearance'][7]]+';';
			} else if(this.btnStyle['form-control']['none']['appearance'][2]) {
				cssString = cssString + '  --form-control-radius: '+this.btnStyle['form-control']['none']['appearance'][2]+';';
			} else {
				cssString = cssString + '  --form-control-radius: 0em;';
			}
		} 
		// if( cssString != '') cssString = ':root{\n'+cssString+'}\n\n';
		return cssString;
	};

	// this variable is defined in the iframe.js as well
	var borderRadiusValues = ['', 'var(--radius-sm)', 'var(--radius-md)', 'var(--radius-lg)'];

	function objHasProperty(obj) {
		var hasProperty = false;
		for(var property in obj) {
			if(obj.hasOwnProperty(property) && obj[property].length > 0) {
				hasProperty = true;
				break;
			}
		}

		return hasProperty;
	};

	function setFormatUnit(value) {
		if(value.trim() == '') return '';
		var input = getValueUnit(value);
		return input[0]+'px';
	};

	function getValueUnit(value) {
		if(value == '' ) return [false, false];
		var number = parseFloat(value),
			unit = value.replace(number, '');
		if(isNaN(number) && value.trim().indexOf('-') == 0) {
			number = '-';
			unit = '';
		}
		return [number, unit];
	};

	function getBgColorPreview(preview) {
		if( !preview.attr('style') ) return 'undefined';
		return preview.attr('style').replace('background-color', '').replace(';', '').replace(':', '').trim();
	};

	function getDefaultStatusBtn(type, content, status) {
		if(status != 0 ) return false;
		if(type == 'buttons' && content == 'btn') return true;
		if(type == 'forms' && (content == 'form-control' || content == 'legend' || content == 'form-label' )) return true;
		return false;
	};

	function getButtonsDefault() {
		return ['btn', 'btn--primary', 'btn--subtle', 'btn--accent', 'btn--disabled', 'btn--sm', 'btn--md', 'btn--lg'];
	};

	function getFormsDefault() {
		return ['form-control', '[disabled]', '[aria-invalid]', 'legend', 'form-label'];
	};

	function getOpacityInput(val) {
		if(val == '100%' || val == '100') return false;
		var newVal = parseInt(val);
		return (isNaN(newVal)) ? false : newVal;
	};

	function getOpacityValueFromLabel(label) {
		if(label.indexOf('transparent') == 0 || label.indexOf('inherit') == 0 || label == '' || label.indexOf('-a') == 0) return false;
		label = label.slice(-4);
		if(label.indexOf('-a') != 0) return false;
		label = parseInt(label.replace('-a', ''));
		if( isNaN(label) ) return false;
		return label;
	};

	function getColorTitlePreview(label) {
		if(!label ||  label == '') return 'not specified';
		if( label.slice(-4).indexOf('-a') != 0 ) return label;
		return label.slice(0, -4);
	};

	function resetColorLabelValue(label) {
		if(label.indexOf('transparent') == 0) return 'transparent';
		if(label.indexOf('inherit') == 0) return 'inherit';
		if(label.indexOf('-a') == 0) return '';
		return label;
	};
	//initialize the Buttons object
	var buttons = document.getElementsByClassName('js-app-sidebar-editor--buttons'),
		buttonObjs = [];
	if( buttons.length > 0 ) {
		for( var i = 0; i < buttons.length; i++) {
			(function(i){ buttonObjs.push(new Buttons(buttons[i]));})(i);
		}
	}

	/***********************************/
	/* 	Shared Styles Interaction      */
	/***********************************/

	this.SharedStyle = function(element, bool) {
		this.element = element;
		//sections
		this.statusSection = $(this.element).find('.js-app-editor-section--states');
		this.appearanceSection = $(this.element).find('.js-app-editor-section--appearance');
		this.borderSection = $(this.element).find('.js-app-editor-section--border');
		this.outlineSection = $(this.element).find('.js-app-editor-section--outline');
		this.typographySection = $(this.element).find('.js-app-editor-section--typography');
		this.fontSelection = this.typographySection.find('.js-font-family-select').find('select');
		this.shadowSection = $(this.element).find('.js-app-editor-section--shadow');
		this.transitionSection = $(this.element).find('.js-app-editor-section--transition');
		this.transformSection = $(this.element).find('.js-app-editor-section--transform');
		this.styleSectionsList = getSharedStyleSectionsList();
		// fields to toggle when a text style is selected (radius + bgcolor)
		this.apperanceTextNone = this.appearanceSection.find('.js-app-editor-property--text-style-none');

		//status
		this.statusList = ['none', ':active', ':hover', ':focus']; //none, :active, :hover, :focus
		this.statusPriorityList = ['none', ':hover', ':focus', ':active'];
		this.statusTag = this.statusSection.find('.js-editor-tag');
		//this will be used to store the custom styles/text styles the user creates
		this.customStyles = [];
		this.customTextStyles = [];

		//list of colors values 
		//no need for this anymore -> will be using the colorSelectionObject list of colours
		this.fontFamilies = [];
		this.fontIds = [];
		this.fontCode = '';

		//what is selected at the moment
		this.selectedStatus = 0; //none
		this.selectedStyle = 'style'; // this is the selected style (could be a style or a text)

		//storing this to check if user has been typing or not
		this.typing = false;

		//array with all selected properties
		this.customStyleArray = new Array(); // this contains the style values
		this.customTextStyleArray = new Array();

		// reusing btn code
		this.btnStyle = this.selectedStyle == 'style' ? this.customStyleArray : this.customTextStyleArray;
		this.selectedButton = 'style--custom-0';

		//store the color preview item the user is interacing with
		this.colorPreviewInteracted = false;

		//shadow copy link
		this.copyFromOrigin = $('.js-app-editor-section__copy-origin');

		//iframe
		this.iframe = window.frames[0];
		this.stylesLoaded = false;
		if(bool) return;

		//check for the frame to be loaded
		this.initFrame();
		//load preset
		this.loadPreset(); //-> you should wait for the colorSelect object to be ready and then load preset
		//reset selection
		this.openToggleSections;
		this.resetUi('all');
		this.resetSectionVisibility('style');
		this.eventListeners();
	};

	SharedStyle.prototype.initFrame = function() {
		var self = this;
		//listen for the onload event of the frame
		onIframeLoad(self.iframe, function(){
			self.frameIsLoaded();
		});
	};

	SharedStyle.prototype.frameIsLoaded = function() {
		var self = this;
		if(self.stylesLoaded) {
			loadProjectColors(this.iframe);
			showIframe();
			// loadProjectColorsForButtons(this.iframe);
			loadProjectTypographyForButtons(this.iframe);
			loadProjectSpacingForButtons(this.iframe);
			self.updateSharedStyleDemo(false);
		} else {
			setTimeout(function(){
				self.frameIsLoaded();
			}, 100);
		}
	};

	SharedStyle.prototype.loadPreset = function() {
		//init this.btnStyle with list of keys (btn types+ states)
		//you should do that after loading data from database as you can have custom buttons (eg button tertiary)
		// this.initStyleArray();
		//load the settings from the database if available
		//or just set default value
		//NOTE !!! before loading preset make sure colorSelectionObject is ready
		this.initListFonts();
		this.initStyles();

		//now the buttons have been set
		this.stylesLoaded = true;
	};

	// SharedStyle.prototype.initStyleArray = function() {
	// 	//this list should contain the custom buttons as well - if present
	// 	var buttonsType = getButtonsDefault();
	// 	for(var i = 0; i < buttonsType.length; i ++) {
	// 		this.btnStyle[buttonsType[i]] = new Array();
	// 		for(var j = 0; j < this.statusList.length; j++) {
	// 			this.btnStyle[buttonsType[i]][this.statusList[j]] = new Array();
	// 			//should loop through sections as well
	// 			for(var k = 0; k < this.buttonsSectionsList.length; k++) {
	// 				this.btnStyle[buttonsType[i]][this.statusList[j]][this.buttonsSectionsList[k]] = new Array();
	// 			}
	// 		}
	// 	}
	// };

	SharedStyle.prototype.initCustomStyleArray = function(type, label) {
		(type == 'text') ? this.initItemStyleArray(this.customTextStyleArray, label) : this.initItemStyleArray(this.customStyleArray, label);
	};

	SharedStyle.prototype.initItemStyleArray = function(item, label) {
		item[label] = new Array();
		for(var j = 0; j < this.statusList.length; j++) {
			item[label][this.statusList[j]] = new Array();
			for(var k = 0; k < this.styleSectionsList.length; k++) {
				item[label][this.statusList[j]][this.styleSectionsList[k]] = new Array();
			}
		}
	};

	SharedStyle.prototype.initListFonts = function() {
		//this depends on fonts set in typography
		if(PROJECT && PROJECT.typography) {
			var typography = JSON.parse(decodeSafeURIComponent(PROJECT.typography));
			this.fontCode = typography['fontCode'];
			this.fontFamilies = Object.values(typography['fontFamilyLabels']);
			this.fontIds = Object.values(typography['fontFamilyIds']);

			this.fontFamilies.unshift('not specified');
			this.fontIds.unshift(0);
		} else {
			this.fontFamilies = ['not specified', '--font-primary'];
			this.fontIds = [0, 1];
		}
		
		var fontList = '';
		//update the select element now that fonts have been loaded
		for(var i = 0; i < this.fontFamilies.length; i++) {
			fontList = fontList + '<option value="'+this.fontIds[i]+'">'+this.fontFamilies[i]+'</option>';
		}

		this.fontSelection.html(fontList);
	};

	SharedStyle.prototype.initStyles = function() {
		if(PROJECT && PROJECT.shared_styles) {
			this.initStyleFromProject(JSON.parse(decodeSafeURIComponent(PROJECT.shared_styles)));
		} else {
			this.initDefaultStyle();
		}
	};

	SharedStyle.prototype.initDefaultStyle = function() {
		// create defualt elements in the array 
		this.initCustomStyleArray('style', 'style--custom-0');
		this.initCustomStyleArray('style', 'style--custom-1');
		this.initCustomStyleArray('style', 'style--custom-2');
		this.initCustomStyleArray('text', 'text--custom-0');
		// push labels to array of labels
		this.customStyles.push(['hover:elevate', 'style--custom-0']);
		this.customStyles.push(['hover:scale', 'style--custom-1']);
		this.customStyles.push(['hover:reduce-opacity', 'style--custom-2']);
		this.customTextStyles.push(['link-subtle', 'text--custom-0']);

		this.customStyleArray['style--custom-0']['none']['shadow'] = [[0, false, '', 3]];
		this.customStyleArray['style--custom-0']['none']['transition'] = [[0, 0.2, 0, false]];
		this.customStyleArray['style--custom-0'][':hover']['shadow'] = [[0, false, '', 4]];

		this.customStyleArray['style--custom-1']['none']['transition'] = [[0, 0.3, 7, false]];
		this.customStyleArray['style--custom-1'][':hover']['transform'] = [[5, '1.1']];

		this.customStyleArray['style--custom-2']['none']['appearance'] = [false, false, false, '1', false, false, false];
		this.customStyleArray['style--custom-2']['none']['transition'] = [[0, 0.3, 0, false]];
		this.customStyleArray['style--custom-2'][':hover']['appearance'] = [false, false, false, '0.9', false, false, false];

		this.customTextStyleArray['text--custom-0']['none']['appearance'] = [false, '--color-contrast-high', false, false, false, false, false];
		this.customTextStyleArray['text--custom-0']['none']['typography'] = [false, false, false, false, false, 1, false, false, false]; 
		this.customTextStyleArray['text--custom-0']['none']['transition'] = [[0, 0.2, 0, false]];
		this.customTextStyleArray['text--custom-0'][':hover']['appearance'] = [false, '--color-primary', false, false, false, false, false];

		console.log(this);
	};

	SharedStyle.prototype.initStyleFromProject = function(buttons) {
		var array = ['customStyles', 'customTextStyles'];
		for(var i = 0; i < array.length; i++) {
			for(var property in buttons[array[i]]) {
				if( buttons[array[i]].hasOwnProperty(property)) {
					this[array[i]].push(Object.values(buttons[array[i]][property]));
				}
			}
		}

		var styles = ['customStyleArray', 'customTextStyleArray'];
		for(var i = 0; i < styles.length; i++) {
			for(var property in buttons[styles[i]]) {
				if( buttons[styles[i]].hasOwnProperty(property)) {
					// Object.values does not work -> should convert to array
					this[styles[i]][property] = Object.values(buttons[styles[i]][property]);
					this[styles[i]][property] = [];
					for(var subproperty in buttons[styles[i]][property]) {
						if( buttons[styles[i]][property].hasOwnProperty(subproperty)) {
							this[styles[i]][property][subproperty] = [];
							for( var val in buttons[styles[i]][property][subproperty]) {
								if(buttons[styles[i]][property][subproperty].hasOwnProperty(val)) {
									if(val == 'border' || val == 'textShadow' || val == 'shadow' || val == 'transform' || val == 'transition') {
										this[styles[i]][property][subproperty][val] = [];
										for( var subVal in buttons[styles[i]][property][subproperty][val]) {
											if(buttons[styles[i]][property][subproperty][val].hasOwnProperty(subVal)) {
												this[styles[i]][property][subproperty][val][subVal] = Object.values(buttons[styles[i]][property][subproperty][val][subVal]);
											}
										}
									} else if(val == 'appearance') {
										var string = this.resetAppearanceArray(buttons[styles[i]][property][subproperty][val]);
										this[styles[i]][property][subproperty][val] = Object.values(string);
									} else {
										this[styles[i]][property][subproperty][val] = Object.values(buttons[styles[i]][property][subproperty][val]);
									}
								}
							}
						}
					}
				}
			}
		}
	};

	SharedStyle.prototype.resetAppearanceArray = function(obj) {
		var empty = true;
		for( var val in obj) {
			empty = false;
			break;
		}

		if(!empty) {
			for(var i= 0; i < 8; i++) {
				if(!obj[i]) obj[i] = false;
			}
		}
		return obj;
	};

	SharedStyle.prototype.resetUi = function(section) {
		if(section == 'all') this.openToggleSections = true;//open/close sections if they have been modified
		//set ui according to selected button/state
		(section == 'all' || section == 'appearance') && this.resetAppearanceSection();
		(section == 'all' || section == 'border') && this.resetBorderSection();
		(section == 'all' || section == 'typography') && this.resetTypographySection();
		(section == 'all' || section == 'shadow') && this.resetShadowSection('shadow', 1);
		(section == 'all' || section == 'textShadow') && this.resetShadowSection('textShadow', 0);
		(section == 'all' || section == 'outline') && this.resetOutlineSection();
		(section == 'all' || section == 'transition') && this.resetTransitionSection();
		(section == 'all' || section == 'transform') && this.resetTransformSection();
		this.openToggleSections = false;
	};

	SharedStyle.prototype.resetStatusTag = function(){
		(this.selectedStatus == 0) ? this.statusTag.parent().addClass('app-editor-section__tags--is-hidden') : this.statusTag.parent().removeClass('app-editor-section__tags--is-hidden');
		this.statusTag.text(this.statusList[this.selectedStatus]);
	};

	SharedStyle.prototype.resetAppearanceSection = function() {
		if(this.appearanceSection.length == 0 ) return;
		this.checkOpacityFieldSet('appearance', 5, 0);
		this.checkOpacityFieldSet('appearance', 6, 1);
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'];
		var selects = this.appearanceSection.find('select'),
			inputs = this.appearanceSection.find('input');
		if(!styleValue || styleValue.length < 1) styleValue = false;
		selects.eq(1).val(styleValue[4] || 0);
		selects.eq(0).val(styleValue[7] || 0);
		inputs.eq(4).val(styleValue[2] || '').end().eq(5).val(styleValue[3] || '');
		// new opacity values
		(styleValue[5] || styleValue[5] === 0) ? inputs.eq(0).val(styleValue[5]+'%') : inputs.eq(0).val('100%');
		(styleValue[6] || styleValue[6] === 0) ? inputs.eq(2).val(styleValue[6]+'%') : inputs.eq(2).val('100%');
		this.setPreviewLabelColor(this.appearanceSection.find('.js-app-editor-color-preview').eq(0), styleValue[0]);
		this.setPreviewLabelColor(this.appearanceSection.find('.js-app-editor-color-preview').eq(1), styleValue[1]);
		this.checkSectionToReset('appearance');

		//check if radius is custom -> show input
		var customSize = this.appearanceSection.find('.js-app-editor-property--custom-value');
		(!styleValue[7] || styleValue[7] == 0) ? customSize.addClass('app-editor-property--custom-value--is-visible') : customSize.removeClass('app-editor-property--custom-value--is-visible');
	};

	SharedStyle.prototype.setPreviewLabelColor = function(element, label) {
		var bg = colorSelectionObject.colorValues[label] || this.getNotListedColorValue(label),
			label = colorSelectionObject.colorValues[label] ? label : this.getNotListedColorLabel(label),
			colorTitle = this.getTitleColorLabel(getColorTitlePreview(label));
		element.attr('style', 'background-color: '+ bg +';').attr('data-color-lb', label).attr('title', colorTitle);
		var inputOpacity = element.next('.js-opacity-field');
		if(inputOpacity) inputOpacity.trigger('reset-slider');
	};

	SharedStyle.prototype.getNotListedColorValue = function(label) {
		if(!label || label == '' || label.length == 4) return '';
		// should be an opacity value now
		return colorSelectionObject.colorValues[label.slice(0, -4)].replace('1)', Number(label.slice(-2)/100).toFixed(2)+')');
	};

	SharedStyle.prototype.getNotListedColorLabel = function(label) {
		if( label && label.indexOf('inherit') == 0) return 'inherit';
		if( label && label.indexOf('transparent') == 0) return 'transparent';
		if(!label || label == '' || label.length == 4) return '';
		return label;
	};

	SharedStyle.prototype.getTitleColorLabel = function(label) {
		if(label.indexOf('color-custom-') > -1) {
			label = colorSelectionObject.customColorLabels[colorSelectionObject.mainColorLabels.indexOf(label.replace('--color-', '')) - 5];
		}
		return label;
	};

	SharedStyle.prototype.resetBorderSection = function() {
		if(this.borderSection.length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['border'];
		//reset list of available borders
		this.resetList(this.borderSection, styleValue);
		var availableItems = this.borderSection.find('.js-app-editor-section__grid'),
			index = 0;
		if(styleValue && styleValue.length > 0) {
			for(var i = 0; i < styleValue.length; i++) {
				//property set
				var selects = availableItems.eq(index).find('select');
				selects.eq(1).val(styleValue[i][1]);
				selects.eq(0).val(styleValue[i][3]);
				availableItems.eq(index).find('input').val(styleValue[i][2]);
				this.setPreviewLabelColor(availableItems.eq(index).find('.js-app-editor-color-preview'), styleValue[i][0]);
				index = index + 1;
			}
		} else {
			availableItems.eq(0).find('select').val(0).end().find('input').val('').end().find('.js-app-editor-color-preview').removeAttr('style').removeAttr('data-color-lb');
		}
		this.checkSectionToReset('border');
	};

	SharedStyle.prototype.resetOutlineSection = function() {
		if(this.outlineSection.length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['outline'];
		if(!styleValue || styleValue.length < 1) styleValue = false;
		var inputs = this.outlineSection.find('input'),
			inputValues = [];
		inputValues[0] = styleValue[2] ? styleValue[2] : '';
		inputValues[1] = styleValue[3] ? styleValue[3] : '';
		var colorIndex;
		if(styleValue[0]) {
			colorIndex = styleValue[0];
		} else if(!styleValue) {
			colorIndex = '--color-primary';
		} else {
			colorIndex = '';
		}
		this.outlineSection.find('select').val(styleValue[1] || 0);
		inputs.eq(0).val(inputValues[0]).end().eq(1).val(inputValues[1]);
		this.setPreviewLabelColor(this.outlineSection.find('.js-app-editor-color-preview'), colorIndex);
		this.checkSectionToReset('outline');
	};

	SharedStyle.prototype.resetTypographySection = function() {
		if(this.typographySection.length == 0 ) return;
		//now get non false values for each item
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['typography'];
		this.setTypographyValues(styleValue);
		this.checkSectionToReset('typography');
	};

	SharedStyle.prototype.resetShadowSection = function(type, indexSection) {
		//first on/none, second color, third value, last inset/outset
		if(this.shadowSection.length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type];
		this.resetList(this.shadowSection.eq(indexSection), styleValue);
		var availableItems = this.shadowSection.eq(indexSection).find('.js-app-editor-section__grid');
		var classLabel = (type == 'textShadow') ? 'grid--text-shadow' : 'grid--shadow';
		if(styleValue && styleValue.length > 0) {
			for(var i = 0; i < styleValue.length; i++) {
				//property set
				var values =  styleValue[i][2].replace(/px/g, '').split(' '),
					inputs = availableItems.eq(i).find('input'),
					selects = availableItems.eq(i).find('select');
				for(var j = 0; j< inputs.length; j++) {
					(values[j]) ? inputs.eq(j).val(values[j]) : inputs.eq(j).val('');
				}
				this.setPreviewLabelColor(availableItems.eq(i).find('.js-app-editor-color-preview'), styleValue[i][1]);
				selects.eq(0).val(styleValue[i][0]);
				if(type != 'textShadow') selects.eq(1).val(styleValue[i][3]);
				(styleValue[i][0] == 1) 
					? availableItems.eq(i).addClass('app-editor-section__'+classLabel+'-off').removeClass('app-editor-section__'+classLabel+'-on')
					: availableItems.eq(i).addClass('app-editor-section__'+classLabel+'-on').removeClass('app-editor-section__'+classLabel+'-off');

				// reset visibility of shadow elements
				resetShadowBlockAppearance(selects.eq(1));
			}
		} else {
			availableItems.eq(0).find('input').val('').end().end().find('.js-app-editor-color-preview').removeAttr('style').removeAttr('data-color-lb').end().find('select').val(0);
		}
		this.checkSectionToReset(type, indexSection);
	};

	SharedStyle.prototype.resetTransitionSection = function() {
		if(this.transitionSection.length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['transition'];
		//reset list of available transition
		this.resetList(this.transitionSection, styleValue);
		var availableItems = this.transitionSection.find('.js-app-editor-section__grid');
		if(styleValue && styleValue.length > 0) {
			for(var i = 0; i < styleValue.length; i++) {
				//property set
				var selects = availableItems.eq(i).find('select'),
					inputs =  availableItems.eq(i).find('input');
				selects.eq(0).val(styleValue[i][0] || 0).end().eq(1).val(styleValue[i][2] || 0);
				inputs.eq(0).val(styleValue[i][1] || '').end().eq(1).val(styleValue[i][3] || '');
			}
		} else {
			availableItems.eq(0).find('select').val(0).end().find('input').val('');
		}
		this.checkSectionToReset('transition');
	};

	SharedStyle.prototype.resetTransformSection = function() {
		if(this.transformSection.length == 0 ) return;
		var styleValue = this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['transform'];
		//reset list of available transition
		this.resetList(this.transformSection, styleValue);
		var availableItems = this.transformSection.find('.js-app-editor-section__grid');
		if(styleValue && styleValue.length > 0) {
			for(var i = 0; i < styleValue.length; i++) {
				//property set
				availableItems.eq(i).find('select').val(styleValue[i][0] || 0);
				availableItems.eq(i).find('input').val(styleValue[i][1] || '');
			}
		} else {
			availableItems.eq(0).find('select').val(0).end().find('input').val('');
		}
		this.checkSectionToReset('transform');
	};

	SharedStyle.prototype.checkOpacityFieldSet = function(type, opacityIndex, colorIndex) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][colorIndex] ) return;
		if(this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][opacityIndex] == null ) {
			// opacity field is not set -> set equal to false or load opacity value already saved
			this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][opacityIndex] = getOpacityValueFromLabel(this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][colorIndex]);
		}
	};

	SharedStyle.prototype.resetList = function(section, styleValue) {
		var list = 0,
			availableItems = section.find('.js-app-editor-section__grid');

		if(styleValue) list = styleValue.length;
		if(list < 2 || availableItems.length > list) {
			var index = (list < 2) ? 0 : availableItems.length - list - 1;
			availableItems.eq(index).nextAll('.js-app-editor-section__grid').remove();
		} else if(list > availableItems.length) {
			var clone = availableItems.eq(0).clone().removeClass('app-editor-section__grid--is-hidden')[0].outerHTML, string = '';
			for (var i = availableItems.length; i < list; i++) {string = string+clone;}
			availableItems.last().after(string);
		}

		//this is not the btn state and the line was removed
		if( list == 0 ) {
			availableItems.eq(0).addClass('app-editor-section__grid--is-hidden');
			section.find('.app-editor-section__hint').removeClass('app-editor-section__hint--is-hidden');
		} else { 
			availableItems.eq(0).removeClass('app-editor-section__grid--is-hidden');
			section.find('.app-editor-section__hint').addClass('app-editor-section__hint--is-hidden');
		}
		//reset labels
		section.find('.js-app-editor-section__grid').addClass('app-editor-section__grid--unlabeled').last().removeClass('app-editor-section__grid--unlabeled');
	};

	SharedStyle.prototype.checkSectionToReset = function(section, index) {
		var sectionElement = this[section+'Section'];
		if(section == 'shadow') sectionElement = this.shadowSection.eq(1);
		if(section == 'textShadow') sectionElement = this.shadowSection.eq(0);
		// //this is the default btn status -> no reset link
		sectionElement.removeClass('app-editor-section--content-edited');
		if(this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][section] && this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][section].length > 0) {
			if(this.openToggleSections) sectionElement.children('.js-app-editor-section__title').removeClass('app-editor-section__title--hide-body');
		} else {
			if(this.openToggleSections) sectionElement.children('.js-app-editor-section__title').addClass('app-editor-section__title--hide-body');
		}
	};

	SharedStyle.prototype.setTypographyValues = function(array) {
		if(!array) array = false;
		var selects = this.typographySection.find('select'),
			inputs = this.typographySection.find('input'),
			customSize = this.typographySection.find('.js-app-editor-property--custom-value');
		
		selects.eq(0).val(array[0] || 0).end().eq(1).val(array[1] || 0).end().eq(2).val(array[4] || 0).end().eq(3).val(array[5] || 0).end().eq(4).val(array[8] || 0);
		inputs.eq(0).val(array[2]|| '').end().eq(1).val(array[3]|| '').end().eq(2).val(array[6]|| '').end().eq(3).val(array[7]|| '');
		//check if size is custom -> show input
		(array[1] && array[1] == 9) ? customSize.addClass('app-editor-property--custom-value--is-visible') : customSize.removeClass('app-editor-property--custom-value--is-visible');
	};

	SharedStyle.prototype.eventListeners = function() {
		var self = this;
		//listen to change of state selection
		this.statusSection.on('change', 'select', function(event){
			self.selectedStatus = $(event.target).val();
			self.resetUi('all');
			self.resetStatusTag();
		});

		//listen to change of selected style in left sidebar
		$(this.element).on('content-selected', function(event, type, target, index, sharedStyle){
			if(sharedStyle == 'style') {
				target = (index) ? self.customStyles[index][1] : self.customStyles[0][1];
			} else {
				target = (index) ? self.customTextStyles[index][1] : self.customTextStyles[0][1];
			}
			self.selectedStyle = sharedStyle;
			self.btnStyle = self.selectedStyle == 'style' ? self.customStyleArray : self.customTextStyleArray;
			self.resetSectionVisibility(sharedStyle);
			self.selectNewButton(target);
		});

		//a new custom style has been created
		$(this.element).on('custom-content-added', function(event, type, title, bool) {
			self.selectedStyle = bool;
			self.btnStyle = self.selectedStyle == 'style' ? self.customStyleArray : self.customTextStyleArray;
			if(bool == 'style') {
				var customLabel = 'style--custom-'+(Number(self.customStyles[self.customStyles.length-1][1].replace('style--custom-', '')) + 1);
				self.customStyles.push([title, customLabel]);
			} else {
				var customLabel = 'text--custom-'+(Number(self.customTextStyles[self.customTextStyles.length-1][1].replace('text--custom-', '')) + 1);
				self.customTextStyles.push([title, customLabel]);
			}
			self.initCustomStyleArray(bool, customLabel);
			self.selectNewButton(customLabel);
			self.updateSharedStylDemoNewStyle(title, customLabel, bool);
		});
		//a custom style name has been updated
		$(this.element).on('custom-content-edited', function(event, type, index, title, section, styleType) {
			(styleType == 'style') ? self.customStyles[index][0] = title : self.customTextStyles[index][0] = title;
			self.updateSharedStylDemoEditStyle(index, title, styleType);
		});
		//a custom style has been removed
		$(this.element).on('custom-content-removed', function(event, type, index, label, styleType) {
			var cutomArray = (styleType == 'style') ? self.customStyles : self.customTextStyles;
			var customLabel = cutomArray[index][1];
			self.btnStyle = styleType == 'style' ? self.customStyleArray : self.customTextStyleArray; 
			self.btnStyle[customLabel] = [];
			cutomArray.splice(index, 1);
			self.updateSharedStylDemoRemoveStyle(index, customLabel, styleType);
		});

		//listen to change of input fields
		listenToParentInput($(this.element), function(event){
			var attribute = getClassStarting($(event.target).parents('.js-app-editor-section').eq(0), 'js-app-editor-section--').replace('js-app-editor-section--', '');
			if(attribute == 'shadow') attribute = $(event.target).parents('.js-app-editor-section').attr('data-shadow');
			if(event.type == 'focusout') {
				if(attribute == 'border' || attribute == 'outline' || (attribute == 'typography' && $(event.target).is('#letterSpacing')) || (attribute == 'appearance' && $(event.target).is('#btnRadius')) ) {
					self.resetUnitValue($(event.target), 'px');
				} else if(attribute == 'typography' && $(event.target).hasClass('js-app-editor-property__custom-size')) {
					self.resetUnitValue($(event.target), 'em');
				} else if(attribute == 'transform') {
					var property = Number($(event.target).parent().prev().find('select').val());
					if(property > 0 && property < 5 ) self.resetUnitValue($(event.target), 'px');
					else if(property > 8) self.resetUnitValue($(event.target), 'deg');
				} else if(attribute == 'shadow' || attribute == 'textShadow') {
					if(!$(event.target).parent().hasClass('js-app-editor__input-group--spread') && $(event.target).val().trim() == '') $(event.target).val('0');
				} else if( $(event.target).is('.js-opacity-field') ) {
					var opacityVal = $(event.target).val(),
						resetOpacity = getPercentageFormat(opacityVal);
					if(opacityVal != resetOpacity) $(event.target).val(resetOpacity);
				} else if(attribute == 'appearance' && $(event.target).is('#opacity') ) {
					var opacityVal = $(event.target).val();
					if(opacityVal.indexOf('%') > -1) {
						$(event.target).val((Number(opacityVal.replace('%', ''))/100).toFixed(2));
					}
				}
			}
			
			if( $(event.target).is('.js-opacity-field') ) {
				// opacity input has been updated -> change icon color preview
				self.colorPreviewInteracted = $(event.target).prev('.js-app-editor-color-preview');
				var label = self.getNewLabelColOpac($(event.target).val());
				$(self.element).trigger('new-color-selection', [label, true]);
			} else {
				self.resetBtnStyle($(event.target), attribute, self.typing);
			}

			self.typing = false;
		});
		
		$(this.element).on('keydown', 'input', function(){
			self.typing = true;
		});

		$(this.element).on('change', 'select', function(event){
			var attribute = getClassStarting($(event.target).parents('.js-app-editor-section').eq(0), 'js-app-editor-section--').replace('js-app-editor-section--', '');
			if(attribute == 'shadow') attribute = $(event.target).parents('.js-app-editor-section').attr('data-shadow');
			//check if transform
			if(attribute == 'transform') {
				var property = $(event.target).val(),
					input = $(event.target).parents('.app-editor__input-group').next().find('input');
				if(property > 0 && property < 5) self.resetUnitValue(input, 'px');
				else if(property > 8) self.resetUnitValue(input, 'deg');
			}
			self.resetBtnStyle($(event.target), attribute, true);
			self.typing = false;
		});
		
		//listen to click on 'add' option
		$(this.element).on('click', '.js-btn-create', function(event) {
			var section = $(event.target).parents('.js-app-editor-section').eq(0),
				sectionType = getClassStarting(section, 'js-app-editor-section--').replace('js-app-editor-section--', '');
			section.children().eq(0).removeClass('app-editor-section__title--hide-body');
			self.addNewItem(section);
			if(sectionType == 'shadow') sectionType = section.attr('data-shadow');
			self.resetBtnStyle('', sectionType, false);
		});
		//listen to click on 'remove' option
		$(this.element).on('click', '.js-btn-delete', function(event) {
			var section = $(event.target).parents('.js-app-editor-section').eq(0),
				sectionType = getClassStarting(section, 'js-app-editor-section--').replace('js-app-editor-section--', '');
			self.removeItem(section, $(event.currentTarget));
			if(sectionType == 'shadow') sectionType = section.attr('data-shadow');
			self.resetBtnStyle('', sectionType, true);
		});

		// //listen to click on preview color
		$(this.element).on('click', '.js-app-editor-color-preview', function(event){
			self.colorPreviewInteracted = $(event.target);
		});

		$(this.element).on('new-color-selection', function(event, label, bool){
			label = resetColorLabelValue(label);
			if(self.colorPreviewInteracted) {
				if( self.colorPreviewInteracted.parents('.js-app-editor-section--border').length > 0 ) {self.borderNewColorSelection(label, self.colorPreviewInteracted.parents('.js-app-editor-section__grid').index(), bool);}
				else if( self.colorPreviewInteracted.parents('.js-app-editor-section--outline').length > 0 ) {self.outlineNewColorSelection(label, bool);}
				else if( self.colorPreviewInteracted.parents('.js-app-editor-section--shadow[data-shadow="textShadow"]').length > 0 ) {self.shadowNewColorSelection(label, 'textShadow', self.colorPreviewInteracted.parents('.js-app-editor-section__grid').index(), bool);}
				else if( self.colorPreviewInteracted.parents('.js-app-editor-section--shadow[data-shadow="shadow"]').length > 0 ) {self.shadowNewColorSelection(label, 'shadow', self.colorPreviewInteracted.parents('.js-app-editor-section__grid').index(), bool);}
				else if( self.colorPreviewInteracted.parents('.js-app-editor-section--appearance').length > 0 ) {self.appearanceNewColorSelection(label, bool, self.colorPreviewInteracted.attr('data-property'));}
				self.updateSharedStyleDemo(true);
			}
		});
	};

	SharedStyle.prototype.resetSectionVisibility = function(target) {
		this.typographySection.toggleClass('app-editor-section--is-hidden', (target == 'style'));
		this.shadowSection.eq(0).toggleClass('app-editor-section--is-hidden', (target == 'style'));
		this.borderSection.toggleClass('app-editor-section--is-hidden', !(target == 'style'));
		this.shadowSection.eq(1).toggleClass('app-editor-section--is-hidden', !(target == 'style'));
		this.apperanceTextNone.toggleClass('is-hidden', !(target == 'style'));
	};

	SharedStyle.prototype.resetUnitValue = function(target, unit) {
		var valueUnit = getValueUnit(target.val());
		if(valueUnit[0] && valueUnit[1] == '' ) target.val(target.val()+unit);
	};

	SharedStyle.prototype.getNewLabelColOpac = function(val) {
		var originalLabel = this.colorPreviewInteracted.attr('data-color-lb'),
			opacityPart = originalLabel.slice(-4);
		if(opacityPart.indexOf('-a') == 0 ) originalLabel = originalLabel.slice(0, -4);
		return originalLabel + getOpInputForSelection(val);
	};

	SharedStyle.prototype.resetBtnStyle = function(target, section, bool) {
		if(section == 'states') return;
		//check if array changed
		var btnStyleArray = this.getNewBtnStyleSection(section, target);
		var boolChanges = this.sectionChanged(this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][section], btnStyleArray[0]);
		if( btnStyleArray[1] ) {
			this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][section] = btnStyleArray[0];
			this.checkSectionToReset(section);//something changed - show reset
		} else {
			//no changes made
			this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][section] = [];
			this.checkSectionToReset(section);//something changed - show reset
		}
		this.resetUi(section);
		if( (btnStyleArray[1] && boolChanges)  || bool) this.updateSharedStyleDemo(boolChanges);
	};

	SharedStyle.prototype.sectionChanged = function(oldVal, newVal) {
		var changed = false;
		if( (!oldVal && newVal) || (oldVal.length != newVal.length)) return true;
		for(var i = 0; i < oldVal.length; i++) {
			if(oldVal[i] != newVal[i]) {
				changed = true;
				break;
			}
		}
		return changed;
	};

	SharedStyle.prototype.getNewBtnStyleSection = function(section, target) {
		var sectionApp = this[section+'Section'];
		if(section == 'shadow') sectionApp = this.shadowSection.eq(1);
		if(section == 'textShadow') sectionApp = this.shadowSection.eq(0);
		
		var inputs = sectionApp.find('input'),
			selects = sectionApp.find('select'),
			colorPreview = sectionApp.find('.js-app-editor-color-preview');
		if(section == 'appearance') return this.resetAppearanceBtnStyle(inputs, selects, colorPreview);
		if(section == 'border') return this.resetBorderBtnStyle(inputs, selects, colorPreview);
		if(section == 'typography') return this.resetTypographyBtnStyle(inputs, selects, colorPreview);
		if(section == 'shadow') return this.resetShadowBtnStyle(sectionApp, 'shadow', 1, inputs, selects, colorPreview);
		if(section == 'textShadow') return this.resetShadowBtnStyle(sectionApp, 'textShadow', 0, inputs, selects, colorPreview);
		if(section == 'outline') return this.resetOutlineBtnStyle(inputs, selects, colorPreview);
		if(section == 'transition') return this.resetTransitionBtnStyle(inputs, selects, colorPreview);
		if(section == 'transform') return this.resetTransformBtnStyle(inputs, selects, colorPreview);
	};

	SharedStyle.prototype.resetAppearanceBtnStyle = function(inputs, selects, colorPreview) {
		var styleArray = [colorPreview.eq(0).attr('data-color-lb'), colorPreview.eq(1).attr('data-color-lb'), inputs.eq(4).val(), inputs.eq(5).val(), Number(selects.eq(1).val()), getOpacityInput(inputs.eq(0).val()), getOpacityInput(inputs.eq(2).val()), Number(selects.eq(0).val())],
			changed = false;
		if(styleArray[0]!= '' || styleArray[1]!= '' || styleArray[2].trim() != '' || styleArray[4]!=0 || styleArray[3].trim() != '' || styleArray[7]!= 0) changed = true;
		return [styleArray, changed];
	};

	SharedStyle.prototype.resetBorderBtnStyle = function(inputs, selects, colorPreview) {
		var borderItems = this.borderSection.find('.js-app-editor-section__grid').not('.app-editor-section__grid--is-hidden'),
			styleArray = [],
			changed = false;
		for(var i = 0; i < borderItems.length; i++) {
			var offsetSelect = i*2;
			styleArray[i] = [colorPreview.eq(i).attr('data-color-lb'), Number(selects.eq(1+offsetSelect).val()), inputs.eq(i).val(), Number(selects.eq(offsetSelect).val())];
		}
		if(borderItems.length > 0) changed = true;
		return [styleArray, changed];
	};

	SharedStyle.prototype.resetOutlineBtnStyle = function(inputs, selects, colorPreview) {
		var styleArray = [colorPreview.eq(0).attr('data-color-lb'), Number(selects.eq(0).val()), inputs.eq(0).val(), inputs.eq(1).val()],
			changed = false;
		if(styleArray[1]!='' || styleArray[0]!=0 || styleArray[2].trim() != '') changed = true;
		return [styleArray, changed];
	};

	SharedStyle.prototype.resetTypographyBtnStyle = function(inputs, selects, colorPreview) {
		var styleArray = [Number(selects.eq(0).val()), Number(selects.eq(1).val()), inputs.eq(0).val(), inputs.eq(1).val(), Number(selects.eq(2).val()), Number(selects.eq(3).val()), inputs.eq(2).val(), inputs.eq(3).val(), Number(selects.eq(4).val())],
			changed = false;
		if(styleArray[1] == 0 || styleArray[1] != 9) styleArray[2] = '';
		for(var i = 0; i < styleArray.length; i++) {
			if(styleArray[i] && styleArray[i] !== 0 && styleArray[i].toString().trim() !== '') {changed = true; break;}
		}
		return [styleArray, changed];
	};

	SharedStyle.prototype.resetShadowBtnStyle = function(section, type, index, inputs, selects, colorPreview) {
		//first on/none, second color, third value, last inset/outset
		var shadowItems = section.find('.js-app-editor-section__grid').not('.app-editor-section__grid--is-hidden'),
			styleArray = [],
			changed = false;
		for(var i = 0; i < shadowItems.length; i++) {
			var offsetInput = (type == 'textShadow') ? i*3 : i*4;
			var offsetSelect = (type == 'textShadow') ? i : i*2;
			var input = setFormatUnit(inputs.eq(offsetInput).val())+' '+setFormatUnit(inputs.eq(offsetInput+1).val())+' '+setFormatUnit(inputs.eq(offsetInput+2).val());
			if(type != 'textShadow') input = input+' '+setFormatUnit(inputs.eq(offsetInput+3).val());
			styleArray[i] = [Number(selects.eq(offsetSelect).val()), colorPreview.eq(i).attr('data-color-lb'), input];
			if(type != 'textShadow') styleArray[i][3] = Number(selects.eq(offsetSelect+1).val());
		}
		if(shadowItems.length > 0) changed = true;
		return [styleArray, changed];
	};

	SharedStyle.prototype.resetTransitionBtnStyle = function(inputs, selects, colorPreview) {
		var transitionItems = this.transitionSection.find('.js-app-editor-section__grid').not('.app-editor-section__grid--is-hidden'),
			styleArray = [],
			changed = false;
		for(var i = 0; i < transitionItems.length; i++) {
			var offset = i*2;
			styleArray[i] = [Number(selects.eq(offset).val()), inputs.eq(offset).val().replace('s', ''), Number(selects.eq(1+offset).val()), inputs.eq(1+offset).val().replace('s', '')];
		}
		if(transitionItems.length > 0) changed = true;
		return [styleArray, changed];
	};

	SharedStyle.prototype.resetTransformBtnStyle = function(inputs, selects, colorPreview) {
		var transformItems = this.transformSection.find('.js-app-editor-section__grid').not('.app-editor-section__grid--is-hidden'),
			styleArray = [],
			changed = false;
		for(var i = 0; i < transformItems.length; i++) {
			styleArray[i] = [Number(selects.eq(i).val()), inputs.eq(i).val()];
		}
		if(transformItems.length > 0) changed = true;
		return [styleArray, changed];
	};

	SharedStyle.prototype.updateSharedStyleDemo = function(bool) {
		this.iframe.updateIframeStyles(this.customStyleArray, this.customTextStyleArray, this.customStyles, this.customTextStyles);
		
		if(bool && IS_LOGGED == '1') SaveAlert.yes();
	};

	SharedStyle.prototype.updateSharedStylDemoNewStyle = function(title, customLabel, type) {
		this.iframe.createIframeStyles(title, customLabel, type);
		if(IS_LOGGED == '1') SaveAlert.yes();
	};

	SharedStyle.prototype.updateSharedStylDemoEditStyle = function(index, label, type) {
		this.iframe.editIframeStyles(index, label, type);
		if(IS_LOGGED == '1') SaveAlert.yes();
	};

	SharedStyle.prototype.updateSharedStylDemoRemoveStyle = function(index, customLabel, type) {
		this.iframe.cancelIframeStyle(index, customLabel, type);
		if(IS_LOGGED == '1') SaveAlert.yes();
	};

	SharedStyle.prototype.selectNewButton = function(target) {
		this.selectedButton = target;
		this.resetUi('all');
	};

	SharedStyle.prototype.borderNewColorSelection = function(label, index, bool) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['border'][index] || this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['border'][index].length == 0) this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['border'][index] = [false, false, false, false];
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['border'][index][0] = label;
		if(bool) this.resetBorderSection();
	};

	SharedStyle.prototype.outlineNewColorSelection = function(label, bool) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['outline'] || this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['outline'].length == 0) this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['outline'] = [false, false, false, false];
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['outline'][0] = label;
		if(bool) this.resetOutlineSection();
	};

	SharedStyle.prototype.shadowNewColorSelection = function(label, type, index, bool) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][index] || this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][index].length == 0) {
			this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][index] = [false, false, false];
			if(type == 'shadow') this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][index][3] = false;
		}
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]][type][index][1] = label;
		if(bool) {
			(type == 'shadow') ? this.resetShadowSection('shadow', 1) : this.resetShadowSection('textShadow', 0);
		}
	};

	SharedStyle.prototype.appearanceNewColorSelection = function(label, bool, id) {
		if(!this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'] || this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'].length == 0) this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'] = [false, false, false, false, false, false, false];
		var index = (id == 'bgColor') ? 0 : 1;
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'][index] = label;
		this.btnStyle[this.selectedButton][this.statusList[this.selectedStatus]]['appearance'][index + 5] = getOpacityValueFromLabel(label);
		if(bool) this.resetAppearanceSection();
	};

	SharedStyle.prototype.removeItem = function(section, target) {
		var items = section.find('.js-app-editor-section__grid');
		if(items.length == 1) {
			//just one element -> hide it
			items.addClass('app-editor-section__grid--is-hidden');
			//reset content
			items.find('select').val(0).end().find('input').val('').end().find('.js-app-editor-color-preview').removeAttr('style').removeAttr('data-color-lb');
			return;
		}
		target.parents('.js-app-editor-section__grid').remove();
	};

	SharedStyle.prototype.addNewItem = function(section) {
		var firstItem = section.find('.js-app-editor-section__grid').eq(0);
		if(firstItem.hasClass('app-editor-section__grid--is-hidden')) {
			//first item is hidden -> just show it
			firstItem.removeClass('app-editor-section__grid--is-hidden app-editor-section__grid--unlabeled');
			//if this is shadow section -> add proper class
			if(section.attr('data-shadow')) {
				(section.attr('data-shadow') == 'textShadow') ? firstItem.addClass('app-editor-section__grid--text-shadow-on') : firstItem.addClass('app-editor-section__grid--shadow-on');
			}
			//reset inital values
			this.resetInitialValues(section);
			return;
		}
		//need to appen new item
		var newItem = firstItem.clone();
		//reset item
		newItem.find('select').val(0).end().find('input').val('').end().find('.js-app-editor-color-preview').removeAttr('style').removeAttr('data-color-lb');
		
		var listItems = section.find('.js-app-editor-section__grid');
		listItems.last().after(newItem[0].outerHTML);
		//reset inital values
		this.resetInitialValues(section);
		//reset labels
		listItems.addClass('app-editor-section__grid--unlabeled').last().removeClass('app-editor-section__grid--unlabeled');
	};

	SharedStyle.prototype.resetInitialValues = function(section) {
		//default values for added items (using the + icon)
		if(section.hasClass('js-app-editor-section--transition')) {
			section.find('.js-app-editor-section__grid').last().find('input').eq(0).val('0.3');
		}
		if(section.attr('data-shadow')) {
			var initial = (section.attr('data-shadow') == 'shadow') ? ['0', '4', '8', '--color-black-a20']: ['0', '1', '2', '--color-black-a25'];
			var lastSection = section.find('.js-app-editor-section__grid').last();
			lastSection.find('input').eq(0).val(initial[0]).end().eq(1).val(initial[1]).end().eq(2).val(initial[2]);
			lastSection.find('.js-app-editor-color-preview').attr('data-color-lb', initial[3]);
		}
		if(section.hasClass('js-app-editor-section--border')) {
			var lastSection = section.find('.js-app-editor-section__grid').last();
			lastSection.find('input').eq(0).val('1px');
			lastSection.find('select').eq(0).val(1);
			lastSection.find('.js-app-editor-color-preview').attr('data-color-lb', '--color-contrast-low');
		}
	};

	SharedStyle.prototype.updateStyleCopyCode = function(code) {
		var newCodeString = '';
		// basic styles
		for(var i = 0; i < this.customStyles.length; i++) {
			newCodeString = newCodeString + '\n';
			newCodeString = newCodeString +this.getStyleCodeStyle(this.customStyles[i][0], this.customStyles[i][1], this.customStyleArray[this.customStyles[i][1]], 'style');
		}
		
		// text styles
		for(var i = 0; i < this.customTextStyles.length; i++) {
			if(i == 0) newCodeString = newCodeString + '\n// text styles';
			newCodeString = newCodeString + '\n'+this.getStyleCodeStyle(this.customTextStyles[i][0], this.customTextStyles[i][1], this.customTextStyleArray[this.customTextStyles[i][1]], 'text');
		}

		code = code.replace(code, newCodeString).trimRight();
		return code;
	};

	SharedStyle.prototype.getStyleCodeStyle = function(btnNiceLabel, btnLabel, styleArray, type) {
		var string = '';
		if(!styleArray) return string;
		for(var i = 0; i < this.statusPriorityList.length; i++) {
			var spacing = (i==0) ? '  ' : '    ';
			if(styleArray[this.statusPriorityList[i]] && objHasProperty(styleArray[this.statusPriorityList[i]])) {
				if(i!=0) string = string + '\n\n  &'+this.statusPriorityList[i]+' {';
				string = string + this.iframe.getButtonCode(styleArray[this.statusPriorityList[i]], spacing, this.iframe, btnLabel, this.statusPriorityList[i], false);
				if(i!=0) string = string + '\n  }';
			}
		}
		btnNiceLabel = btnNiceLabel.replace(/\:/g, '\\:');
		return '.'+btnNiceLabel+' {'+string+'\n}\n';
	};

	SharedStyle.prototype.getArrayToSave = function() {
		var styleArray = [];
		styleArray['customStyleArray'] = this.customStyleArray;
		styleArray['customTextStyleArray'] = this.customTextStyleArray;
		styleArray['customStyles'] = this.customStyles;
		styleArray['customTextStyles'] = this.customTextStyles;
		//save btns style
		// var defaultBtns = getButtonsDefault();
		// for(var i = 0; i <  this.customBtns.length; i++) {
		// 	defaultBtns.push(this.customBtns[i][1]);
		// }

		// for(var i = 0; i < this.customStyleArray.length; i++) {
		// 	styleArray['customStyleArray'][this.customStyleArray[i]] = this.btnStyle[defaultBtns[i]];
		// }
		return styleArray;
	};

	//initialize the SharedStyle object
	var sharedStyles = document.getElementsByClassName('js-app-sidebar-editor--shared-styles'),
		sharedStylesObjs = [];
	if( sharedStyles.length > 0 ) {
		for( var i = 0; i < sharedStyles.length; i++) {
			(function(i){ sharedStylesObjs.push(new SharedStyle(sharedStyles[i]));})(i);
		}
	}

	/************************/
	/* 	Input Event Listening */
	/************************/
	function listenToInput(input, callback) {
		if(input.length > 0)
		input.on('focusout', function(event){
			callback(event);
		});
		input.on('keyup', function(event){
			if ( (event.key && event.key.toLowerCase() === "enter") || (event.keyCode && event.keyCode === "13")) {
				callback(event);
			}
		});
	};

	function listenToParentInput(parent, callback) {
		parent.on('focusout input', 'input', function(event){
			callback(event);
		});
		parent.on('keyup', 'input', function(event){
			if ( (event.key && event.key.toLowerCase() === "enter") || (event.keyCode && event.keyCode === "13")) {
				callback(event);
			}
		});
	};

	function listenToParentString(parent, string, callback) {
		parent.on('focusout', string, function(event){
			callback(event);
		});
		parent.on('keypress', string, function(event){
			if ( (event.key && event.key.toLowerCase() === "enter") || (event.keyCode && event.keyCode === "13")) {
				event.preventDefault();
				callback(event);
			}
		});
	};

	/************************/
	/* 	Sidebar Interaction */
	/************************/
	//content switch - eg, themes in Colors
	var contentSwitch = $('.js-app-content-switch');
	if(contentSwitch.length > 0) {
		var contentType = contentSwitch.attr('data-global').toLowerCase(),
			contentList = contentSwitch.find('.js-app-content-switch__group'),
			appSidebar = $('.js-app-sidebar--globals');
		//open/close list of content
		contentSwitch.on('click', '.js-app-content-item', function(event){
			if( !$(event.target).is('.js-add-content') && $(event.target).parents('.js-add-content').length == 0 ){
				contentSwitch.toggleClass('app-content-switch--is-open');
			}
		});
		//listen for the click on 'add' button - new content item has been created
		contentSwitch.on('click', '.js-add-content', function(event){
			contentSwitch.addClass('app-content-switch--is-open');
			var initialLabel = 'Untitled';
			contentList.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').children('em').attr('contenteditable', 'false');
			var newContentItem = getNewContentSwitch(initialLabel, contentList);
			contentList.find('.app-content-item--is-selected').children('em').attr('contenteditable', 'true').selectText();
			appSidebar.trigger('content-switch-added', [ contentType, initialLabel]);
		});
		//new content item has been selected
		contentList.on('click', 'li', function(event){
			var selectedItem = contentList.children('.app-content-item--is-selected');
			if( !selectedItem.is($(event.currentTarget)) && $(event.target).parents('.js-content-item__cta--remove').length < 1 && !$(event.target).is('.js-content-item__cta--remove')) {
				contentList.children('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').children('em').attr('contenteditable', 'false');
				$(event.currentTarget).addClass('app-content-item--is-selected');
				//need to take care of updating content somewhere else -> trigger event
				appSidebar.trigger('content-switch-selected', [ contentType, $(event.currentTarget).index()]);
			}
		});
		//click on edit icon in the Content Switch section
		contentList.on('click', '.js-content-item__cta--edit', function(event){
			$(event.currentTarget).parents('li').eq(0).trigger('dblclick');
		});
		//click delete icon next to theme name
		contentList.on('click', '.js-content-item__cta--remove', function(event){
			//first -> remove item and select default one
			var theme = $(event.currentTarget).parents('li').eq(0),
				isSelected = theme.hasClass('app-content-item--is-selected'),
				themeIndex = theme.index();
			theme.remove();
			if(isSelected) {
				contentList.children('li').eq(0).addClass('app-content-item--is-selected');
			}
			appSidebar.trigger('content-switch-deleted', [ contentType, themeIndex, isSelected]);
		});

		contentList.on('dblclick', 'li', function(event){
			if($(event.currentTarget).hasClass('js-app-content-item--default')) return;
			$(event.currentTarget).addClass('app-content-item--is-editing').children('em').eq(0).attr('contenteditable', 'true').focus().selectText();
		});

		listenToParentString(contentList, 'li', function(event){
			if($(event.originalEvent.target).is('.js-content-item__cta--edit')) return;
			$(event.currentTarget).removeClass('app-content-item--is-editing').find('em').attr('contenteditable', 'false');
			appSidebar.trigger('content-switch-edited', [ contentType, $(event.currentTarget).index(), $(event.currentTarget).find('em').text()]);
		});

		//--check if we need to load more themes
		if(colorObject && colorObject[0]) {
			//we are on the colors global
			if(colorObject[0].themes.length > 0) {
				for(var i = 1; i < colorObject[0].themes.length; i++)  {
					var newContentItem = getNewContentSwitch(colorObject[0].themes[i], contentList);
					newContentItem.removeClass('app-content-item--is-selected app-content-item--is-editing');
				}
			}
		}
	}

	function getNewContentSwitch(label, contentList) {
		var newContentItem = contentList.children('li').eq(0).clone();
		newContentItem.removeClass('js-app-content-item--default').addClass('app-content-item--is-editable app-content-item--is-editing app-content-item--is-selected').children('em').text(label);
		contentList.append(newContentItem);
		return newContentItem;
	}
	//content groups
	var appContentGroup = $('.js-app-content__group');
	if(appContentGroup.length > 0 ) {
		var contentType = appContentGroup.attr('data-global').toLowerCase(),
			appSidebar = $('.js-app-sidebar--globals'),
			contentItems = appContentGroup.children('li');

		var clickIframe = false;
		//listen to the click on the arrows/entire element - open/close group
		appContentGroup.on('click', '.js-app-content-item--group', function(event){
			if( !$(event.target).is('.js-btn-create') && $(event.target).parents('.js-btn-create').length == 0 ){
				$(event.currentTarget).toggleClass('app-content-item--show-children');
			}
		});
		//select a new content
		appContentGroup.on('click', '.js-app-content-item', function(event){
			var sharedStyle = false; // we are gonna use this for the shared styles global only
			if( !$(event.currentTarget).hasClass('app-content-item--is-selected') ) {//element is not already selected		
				//do not select if the item is being removed (click on trash icon)
				if($(event.target).is('.js-content-item__cta--delete') || $(event.target).parents('.js-content-item__cta--delete').length > 0) return;
				appContentGroup.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected');
				$(event.currentTarget).addClass('app-content-item--is-selected');
				//need to take care of updating content somewhere else -> trigger event
				//if the content is a custom one ->pass index to bjects as well
				var itemIndex = $(event.currentTarget).hasClass('js-app-content-item--is-editable') ? $(event.currentTarget).index() : false;
				var targetLabel = $(event.currentTarget).children('.app-content-item__text').text();
				if( contentType == 'colors' && $(event.currentTarget).attr('data-section').indexOf('color-custom') > -1) {
					targetLabel = $(event.currentTarget).attr('data-section').replace('#color', '--color');
				}
				if(contentType == 'shared styles') {
					sharedStyle = getStyleItemType(event.currentTarget);
				}
				
				appSidebar.trigger('content-selected', [ contentType, targetLabel, itemIndex, sharedStyle]);
				if(!clickIframe) {
					//trigger click inside iframe
					var dataSection = $(event.currentTarget).attr('data-section');
					if(dataSection && dataSection!='') triggerSectionSelection(dataSection);
				}
			}
			clickIframe = false;
		});
		//listen to the click on the plus -> create new content
		appContentGroup.on('click', '.js-btn-create', function(event){
			var parentSection = $(event.currentTarget).parents('.js-app-content-item--is-editable').eq(0).next(),
				items = parentSection.children('.js-app-content-item'),
				 newContentItem = items.eq(0).clone();

			var initialLabel;
			switch(contentType) {
				case 'buttons': initialLabel = 'btn--custom'; break;
				case 'colors' : initialLabel = '--color-'+getColorCustomLabel(items.length); break;
				default:  initialLabel ='Untitled'; break;
			}

			var isFeedbackColor = parentSection.is('.js-app-content__feedback-colors');
			if(isFeedbackColor) {
				initialLabel = '--color-custom';
			}
			
			newContentItem.addClass('app-content-item--is-editable js-app-content-item--is-editable app-content-item--is-selected').children('span').eq(0).text(initialLabel).attr('contenteditable','true');
			appContentGroup.find('.app-content-item--is-selected').removeClass('app-content-item--is-selected app-content-item--is-editing').find('span').attr('contenteditable','false');
			var colorSection = false;
			if( contentType == 'colors') {//I need to update the data-section attribute of the color
				colorSection =  '#color-custom-'+getNewCustomColorIndex(items.last());
				if(isFeedbackColor) {
					colorSection = colorSection.replace('#color-custom-', '#color-custom-fdb-');
				}
				newContentItem.attr('data-section', colorSection);
			}
			if( contentType == 'buttons') {
				newContentItem.attr('data-section', initialLabel);
			}
			if( contentType == 'shared styles') {
				colorSection = getStyleItemType(items.eq(0)[0]);
				newContentItem.attr('data-section', initialLabel);
			}

			parentSection.append(newContentItem);
			appSidebar.trigger('custom-content-added', [ contentType, initialLabel, colorSection]);
			if( contentType == 'colors') {
				parentSection.find('.app-content-item--is-selected').addClass('app-content-item--is-editing').find('span').selectText();
			} else {
				parentSection.find('.app-content-item--is-selected').addClass('app-content-item--is-editing').find('span').selectText();
			}
			//if colors -> check if max number of custom colors have been reached
			if(items.length >= 9 && contentType == 'colors') parentSection.prev().removeClass('app-content-item--is-editable');
		});
		//new custom content - doubleclick/focusout/edit
		appContentGroup.on('dblclick', 'li.js-app-content-item--is-editable', function(event){
			$(event.currentTarget).addClass('app-content-item--is-editing').focus().find('span').eq(0).attr('contenteditable', 'true').selectText();
		});
		appContentGroup.on('click', '.js-content-item__cta--edit', function(event){
			$(event.currentTarget).parents('li').eq(0).trigger('dblclick');
		});
		listenToParentString(appContentGroup, 'li.js-app-content-item--is-editable', function(event){
			if($(event.originalEvent.target).is('.js-content-item__cta--edit') || !$(event.currentTarget).hasClass('app-content-item--is-editing')) return;
			$(event.currentTarget).removeClass('app-content-item--is-editing').find('span').attr('contenteditable', 'false');
			if(contentType == 'colors') {
				//check name contains --color-
				var colorElement = $(event.currentTarget).find('span');
				if(colorElement.text().indexOf('--color-') < 0) colorElement.text('--color-'+colorElement.text().replace('--', ''));
			}
			if(contentType == 'buttons') {
				var btnElement = $(event.currentTarget).find('span');
				if(btnElement.text().indexOf('btn--') < 0) btnElement.text('btn--'+btnElement.text());
				//if button -> make sure no default classes are used
				checkForBtnDefaultClasses(btnElement);
				$(event.currentTarget).attr('data-section', btnElement.text());
			}
			var sharedStyles = false; // used for the shared styles global only
			if(contentType == 'shared styles') {
				sharedStyles = getStyleItemType(event.currentTarget);
				var styleElement = $(event.currentTarget).find('span');
				$(event.currentTarget).attr('data-section', styleElement.text());
			}
			appSidebar.trigger('custom-content-edited', [ contentType, $(event.currentTarget).index(), $(event.currentTarget).find('span').text(), $(event.currentTarget).attr('data-section'), sharedStyles]);
		});
		//remove custom content
		appContentGroup.on('click', '.js-content-item__cta--delete', function(event){
			var item = $(event.currentTarget).parents('li').eq(0),
				itemIndex = item.index(),
				labelItem = item.attr('data-section'),
				actionParent = item.parents('.js-app-content__main-colors').eq(0).prev();
			var sharedStyle = false;
			if(contentType == 'shared styles') {
				sharedStyles = getStyleItemType(item[0]);
			}
			item.remove();
			//now trigger click on first element
			appContentGroup.find('.js-app-content-item').eq(0).trigger('click');
			appSidebar.trigger('custom-content-removed', [ contentType, itemIndex, labelItem, sharedStyles]);
			//make sure - when a custom content is removed - that the + icon is again visible
			actionParent.addClass('app-content-item--is-editable');
		});
		//this event is triggered when a specific section is selected inside the iframe section
		appContentGroup.on('selectSection', function(event, target){
			var selectedItem = $('.js-app-content-item[data-section="'+target+'"]'),
				parentGroup = selectedItem.parent().siblings('.js-app-content-item--group');
			if(parentGroup.length > 0 ) parentGroup.addClass('app-content-item--show-children');
			clickIframe = true;
			selectedItem.trigger('click');
		});
		//this event is triggered when there's an app tab (eg, typography) and a new tab is selected
		appContentGroup.on('content-tab-selected', function(event, type){
			contentItems.addClass('app-content-item--is-hidden');
			var visibleItems = contentItems.filter('[data-tab="'+type+'"]'),
				itemToSelect = visibleItems.eq(0);
			visibleItems.removeClass('app-content-item--is-hidden').eq(0);
			if(itemToSelect.hasClass('js-app-content-item')) {
				itemToSelect.trigger('click');
			} else {
				itemToSelect.find('.js-app-content-item--group').eq(0).addClass('app-content-item--show-children');
				itemToSelect.find('.js-app-content-item').eq(0).trigger('click');
			}
			triggerTabSelection(type);
		});
		//this function is triggered in the typography global -> update list of font-families in the Line-Height Crop group
		var lhcrop = appContentGroup.find('[data-tab="tab-lh-crop"]').find('ul');
		appContentGroup.on('reset-font-list', function(event, index) {
			var lhcropItems = lhcrop.children('li');
			if(lhcropItems.length == index) return;
			if(lhcropItems.length > index) {
				lhcropItems.eq(index-1).nextAll().remove();
			} else {
				populateContentFontList(lhcropItems, index);
			}
		});
		appContentGroup.on('reset-font-label', function(event, index, label) {
			lhcrop.children('li').eq(index).children('span').text(label);
		});

		function populateContentFontList(items, index) {
			var fontString = '',
				clone = items.eq(0).clone().removeClass('app-content-item--is-selected');
			for(var i = items.length; i < index; i++) {
				clone.attr('data-section', '--font-'+getCustomFontId(i)).find('span').eq(0).text(getCustomFontLabel(i));
				fontString = fontString + clone[0].outerHTML;
			}

			lhcrop.append(fontString);
		};

		//--check if we need to load custom colors
		if(colorObject && colorObject[0]) {
			//we are on the colors global
			if(colorObject[0].customColorLabels.length > 0) {
				var list = appContentGroup.find('ul.js-app-content__main-colors'),
					feedbackList = appContentGroup.find('ul.js-app-content__feedback-colors'),
					customColor = list.children('li').eq(0).clone();
				customColor.addClass('app-content-item--is-editable js-app-content-item--is-editable').removeClass('app-content-item--is-selected');
				for(var i = 0; i < colorObject[0].customColorLabels.length; i++)  {
					var color = customColor.clone();
					color.attr('data-section', '#color-'+colorObject[0].mainColorLabels[i+5]).children('span').eq(0).text(colorObject[0].customColorLabels[i]);
					if(colorObject[0].mainColorLabels[i+5].indexOf('custom-fdb') > -1) feedbackList.append(color);
					else list.append(color);
				}
			}
		}
		//--check if we need to load custom buttons
		if(buttonObjs && buttonObjs[0] && buttonObjs[0].customBtns && buttonObjs[0].customBtns.length > 0) {
			var buttonsList = appContentGroup.find('.js-app-content__main-buttons'),
				customBtn = buttonsList.children('li').eq(0).clone(),
				appendString = '';

			customBtn.addClass('app-content-item--is-editable js-app-content-item--is-editable');

			for(var i = 0; i < buttonObjs[0].customBtns.length; i++) {
				customBtn.attr('data-section', buttonObjs[0].customBtns[i][0]).children('span').eq(0).text(buttonObjs[0].customBtns[i][0]);
				appendString = appendString + customBtn.get(0).outerHTML;
			}

			buttonsList.append(appendString);
		}
		// --check if we need to load custom styles/text styles - shared styles
		if(sharedStylesObjs && sharedStylesObjs[0]) {
			if(sharedStylesObjs[0].customStyles && sharedStylesObjs[0].customStyles.length > 1) {
				// styles - skip the first one (defaul hover:elevate)
				var stylesList = appContentGroup.find('.js-app-content__main-styles');
				createStyleItems(sharedStylesObjs[0].customStyles, stylesList);
			}
			if(sharedStylesObjs[0].customTextStyles && sharedStylesObjs[0].customTextStyles.length > 1) {
				// styles - skip the first one (defaul link-subtle)
				var stylesList = appContentGroup.find('.js-app-content__text-styles');
				createStyleItems(sharedStylesObjs[0].customTextStyles, stylesList);
			}
		}

		function createStyleItems(styleObj, list) {
			var customStyle = list.children('li').eq(0).clone(),
				appendString = '';
			customStyle.addClass('app-content-item--is-editable js-app-content-item--is-editable');
			customStyle.removeClass('app-content-item--is-selected');

			for(var i = 1; i < styleObj.length; i++) {
				customStyle.attr('data-section', styleObj[i][0]).children('span').eq(0).text(styleObj[i][0]);
				appendString = appendString + customStyle.get(0).outerHTML;
			}

			list.append(appendString);
		};

		function getStyleItemType(target) {
			var sharedStyle = 'text';
			if(target.closest('.js-app-content__main-styles')) {
				sharedStyle = 'style';
			}
			return sharedStyle;
		};
	}
	//app top tabs
	var contentTabs = $('.js-app--tabs');
	if(contentTabs.length > 0) {
		var tabs = contentTabs.find('.js-app-tabs__item');
		//new content item has been selected
		contentTabs.on('click', '.js-app-tabs__item', function(event){
			if( !$(event.currentTarget).is('.app-tabs__item--selected') ) {
				var selectedTabTapy = $(event.currentTarget).attr('data-tab');
				tabs.removeClass('app-tabs__item--selected');
				$(event.currentTarget).addClass('app-tabs__item--selected');
				//need to take care of updating content somewhere else -> trigger event
				appContentGroup.trigger('content-tab-selected', [selectedTabTapy]);
			}
		});
	}

	//right sidebar - generic interactions
	var rightAppSidebar = $('.js-app-sidebar--globals');
	if( rightAppSidebar.length > 0 ) {
		var colorSelect = $('.js-app-menu--color');
		rightAppSidebar.on('click', '.js-app-editor-section__title', function(event){
			if($(event.target).is('.js-app-editor-section__title-cta') || $(event.target).parents('.js-app-editor-section__title-cta').length > 0) return;
			$(event.currentTarget).toggleClass('app-editor-section__title--hide-body');
		});
		//in the sidebar - show the mq tab clicking on the mq button
		rightAppSidebar.on('click', '.js-btn-responsive-rules', function(event){
			appSidebarEnableMq($(event.currentTarget));
		});
		//in the sidebar - remove the mq tab/reset mq clicking on delete button
		rightAppSidebar.on('click', '.js-app-delete-mq', function(event){
			appSidebarDisableMq($(event.currentTarget), true);
		});
		//in the sidebar - select a new mq clicking on  new mq tab
		rightAppSidebar.on('click', '.js-app-editor-tabs__item', function(event){
			appSidebarSelectMq($(event.currentTarget), true);
		});
		//in the right sidebar -> click on the reset link to reset property to default status (e.g., buttons)
		rightAppSidebar.on('click', '.js-app-editor-section__reset-link', function(event){
			//remove edited section
			var selectedSection = $(event.currentTarget).parents('.js-app-editor-section'),
				mqDelete = selectedSection.find('.js-app-delete-mq');
			selectedSection.removeClass('app-editor-section--content-edited');
			// if(mqDelete.length > 0) appSidebarDisableAndResetMq(mqDelete);
			//trigger reset of variables in js objects
			rightAppSidebar.trigger('reset-status', [selectedSection]);
		});
		//color preview object
		rightAppSidebar.on('click', '.js-app-editor-color-preview', function(event){
			colorSelect.trigger('open-color-selector', [$(event.target)]);
		});
		
		if(colorSelect.length > 0) {
			$(window).on('click', function(event){
				if(!$(event.target).is('.js-app-editor-color-preview') && !$(event.target).is('.js-app-menu--color') && $(event.target).parents('.js-app-menu--color').length < 1) colorSelect.trigger('close-color-selection');
 			});

 			$(window).on('keyup', function(event){
				if ( (event.key && event.key.toLowerCase() === "backspace") || (event.keyCode && event.keyCode === "8")) {
					colorSelect.trigger('delete-opacity');
				}
			});
		}

		// shadow selection -> trigger custom fields
		var shadowList = $('.js-shadow-list');
		if(shadowList.length > 0) {
			shadowList.on('change', function(event){
				resetShadowBlockAppearance($(event.target));
			});
		}
	}

	function resetShadowBlockAppearance(target) {
		var customFields = target.parents('.js-shadow-list').eq(0).siblings('.js-shadow-custom');
		customFields.toggleClass('is-hidden', target.val() > 1);
	};

	function getNotFalseValue(spaceArray, index, subIndex) {
		if( spaceArray[index] !== false ){
			var item = (subIndex !== false) ? spaceArray[index][subIndex] : spaceArray[index];
			if(item !== false) {
				return item;
			} else {
				return getNotFalseValue(spaceArray, index-1, subIndex);
			}

		} else {
			return (index > 0) ? getNotFalseValue(spaceArray, index-1, subIndex) : false;
		}
	};

	function getNotFalseValueArray(spaceArray, index, subindex) {
		//subindex -> is the index of the array that was not modified
		//check first element of array 
		if( spaceArray[index] !== false &&  spaceArray[index].length > 0 ){
			var item = spaceArray[index][subindex];
			if(item !== false) {
				return spaceArray[index];
			} else {
				return getNotFalseValue(spaceArray, index-1, subindex);
			}

		} else {
			return (index > 0) ? getNotFalseValueArray(spaceArray, index-1, subindex) : false;
		}
	};

	function appSidebarEnableMq(target) {
		target.addClass('is-hidden').parents('.js-app-editor-section__title').removeClass('app-editor-section__title--hide-body').next().removeClass('app-editor-tabs--is-hidden');
	};

	function appSidebarDisableMq(target, triggerApp) {
		var tab = target.parents('.js-app-editor-tabs');
		tab.addClass('app-editor-tabs--is-hidden').prev('.js-app-editor-section__title').find('.js-btn-responsive-rules').removeClass('is-hidden');
		//reset selected tab
		tab.find('.js-app-editor-tabs__item').removeClass('app-editor-tabs__item--selected').eq(0).addClass('app-editor-tabs__item--selected');
		if(triggerApp) tab.trigger('reset-mq', [tab.attr('data-tab-section')]);
	};

	function appSidebarSelectMq(target, triggerApp) {
		var tab = target.parents('.js-app-editor-tabs');
		if(target.hasClass('app-editor-tabs__item--selected')) return;
		target.addClass('app-editor-tabs__item--selected').siblings().removeClass('app-editor-tabs__item--selected');
		if(triggerApp) tab.trigger('select-mq', [target.index(), tab.attr('data-tab-section')]);
	};

	function appSidebarDisableAndResetMq(target) {
		appSidebarDisableMq(target);
		resetSectionTab(target.parents('.js-app-editor-tabs'));
	};

	function getSectionTabName(type) {
		var label = type.replace('section-', '');
		return label[0].toUpperCase() + label.substring(1);
	};

	function resetArrayValues(array) {
		for(var i = 1; i < array.length; i++) {
			array[i] = false;
		}
		return array;
	};

	function resetMultiArrayValues(array) {
		for(var i = 1; i < array.length; i++) {
			for(var j = 0; j < array[i].length; j++) {
				array[i][j] = false;
			}
		}
		return array;
	};

	function setSectionTab(tab, array) {//this is used to set the section tab visibility the first time they are loaded
		//first get indexes of not null arrays
		var indexes = [],
			tabElements = tab.find('.js-app-editor-tabs__item'),
			enableTab = false;
		for(var i = 0; i < array.length; i++) {
			var singleIndexes = array[i].reduce( function(out, bool, index){
				return checkArraySingleFalse(bool) ? out.concat(index) : out;
			}, []);
			indexes = indexes.concat(singleIndexes);
		}
		for(var i = 1; i < 5; i++) {
			if(indexes.includes(i)) {
				tabElements.eq(i).addClass('app-editor-tabs__item--is-edited');
				enableTab = true;
			} else {
				tabElements.eq(i).removeClass('app-editor-tabs__item--is-edited');
			}
		}
		if(enableTab) {
			appSidebarEnableMq(tab.prev().find('.js-btn-responsive-rules'));
		} else {
			appSidebarDisableMq(tab.find('.js-app-delete-mq'), false);
		}
	};

	function setSectionTabIndexes(tab, array, selectedTab) {
		var tabElements = tab.find('.js-app-editor-tabs__item');
		for(var i = 0; i < array.length; i++) {
			tabElements.eq(array[i]).addClass('app-editor-tabs__item--is-edited');
		}
		(array.length > 0) 
			? appSidebarEnableMq(tab.prev().find('.js-btn-responsive-rules'))
			: appSidebarDisableMq(tab.find('.js-app-delete-mq'), false);

		tabElements.removeClass('app-editor-tabs__item--selected').eq(selectedTab).addClass('app-editor-tabs__item--selected');
	}

	function checkArraySingleFalse(bool) {
		if(bool.length > 1) {
			var isTrue = false;
			for(var i = 0; i < bool.length; i++) {
				if(bool[i] !== false) {isTrue = true;break;}
			}
			return isTrue;
		} else {
			return (bool !== false);
		}
	};

	function resetSectionTab(tab) {
		tab.find('.app-editor-tabs__item--is-edited').removeClass('app-editor-tabs__item--is-edited');
		tab.find('.js-app-editor-tabs__item').eq(0).addClass('app-editor-tabs__item--selected').nextAll().removeClass('app-editor-tabs__item--selected');
	};

	function updateInteractedSectionTab(index, tab, bool) {
		if(index == 0) return;
		tab.find('.js-app-editor-tabs__item').eq(index).toggleClass('app-editor-tabs__item--is-edited', !bool);
	};

	function getClassStarting(target, value) {
		return $.grep(target[0].className.split(" "), function(v, i){
			return v.indexOf(value) === 0;
		}).join();
	};

	function arrayEquals(array1, array2) { ///!!! need to consider subarray -> like for border
		if(!array2) return checkArrayEmpty(array1);
		var equals = true;
		// for(var i = 0; i < array1.length; i++){if(array1[i] != array2[i]){equals = false; break;}}
		//let's see if this works
		return array1.toString() == array2.toString();
	};

	function checkArrayEmpty(array) {
		var empty = true;
		for(var i = 0; i < array.length; i++) {
			if(array[i] && (array[i].length > 1 || array[i].trim() != '')) {empty = false; break;}
		};
		return empty;
	};

	function getColorCustomLabel(index) {
		switch(index) {
			case 2: return 'secondary'; break;
			case 3: return 'tertiary'; break;
			case 4: return 'quaternary'; break;
			case 5: return 'quinary'; break;
			case 6: return 'senary'; break;
			default: return 'custom';
		};
	};

	function getNewCustomColorIndex(lastItem) {
		if(lastItem.attr('data-section').indexOf('#color-custom') < 0) return '0';
		var value = lastItem.attr('data-section');
		value = value.indexOf('#color-custom-fdb') > -1 ? value.replace('#color-custom-fdb-', '') : value.replace('#color-custom-', '');
		return Number(value) + 1;
	};

	function checkForBtnDefaultClasses(element) {
		var label = element.text();
		var showTooltip = false;
		var newLabel = label;
		if( label == 'btn--disabled') {newLabel = 'btn--disabled-2';showTooltip = true;}
		else if( label == 'btn--primary') {newLabel = 'btn--primary-v2';showTooltip = true;}
		else if( label == 'btn--subtle') {newLabel = 'btn--subtle-v2';showTooltip = true;}
		else if( label == 'btn--accent') {newLabel = 'btn--accent-v2';showTooltip = true;}
		else if( label == 'btn--sm') {newLabel = 'btn--sm-v2';showTooltip = true;}
		else if( label == 'btn--md') {newLabel = 'btn--md-v2';showTooltip = true;}
		else if( label == 'btn--lg') {newLabel = 'btn--lg-v2';showTooltip = true;}
		else if( label == 'btn--icon') {newLabel = 'btn--icon-v2';showTooltip = true;}
		if(showTooltip) {
			newLabel = checkForBtnDuplicates(newLabel);
			element.text(newLabel);
			$('.js-flash-message--button-label').trigger('showFlashMessage');
		}
	};

	function checkForBtnDuplicates(label) {
		var btns = appContentGroup.find('.js-app-content__main-buttons')[0].children;
		for(var i = 0; i < btns.length; i++) {
			var text = btns[i].getElementsByClassName('app-content-item__text')[0].textContent;
			if(text == label) {label = getNewLabelForBtn(label); break;}
		}
		return label;
	};

	function getNewLabelForBtn(label) {
		var arr = label.split('-v'),
			order = parseInt(arr[1]) + 1;
		return arr[0]+'-v'+order;
	};

	//responsive version
	var mobileSidebarToggle = $('.js-app-sidebar-trigger'),
		sidebarSections = $('.js-app-sidebar--toggle');
	if(mobileSidebarToggle.length > 0) {
		mobileSidebarToggle.on('click', 'button', function(event){
			var index = $(event.target).index(),
				sibIndex = index == 0 ? 1 : 0;
			$(event.target).toggleClass('app-sidebar-trigger__btn--selected').siblings().removeClass('app-sidebar-trigger__btn--selected');
			//toggle visible elements
			sidebarSections.eq(index).toggleClass('app-sidebar--is-visible', $(event.target).hasClass('app-sidebar-trigger__btn--selected'));
			sidebarSections.eq(sibIndex).removeClass('app-sidebar--is-visible');
		});
	}


	/* -------------------------------- 

	 copy code/view code function

	--------------------------------- */
	//copy code - detect if there's a copy code element available
	if($('.js-copy-code').length > 0) {
		var clipboard = new ClipboardJS('.js-copy-code', {
		    text: function(trigger) {
		    	var format = $(trigger).attr('data-type'),
		    		container = $(trigger).parents('.js-code-action-wrapper').eq(0);
		        return container.attr('data-'+format);
		    }
		});

		clipboard.on('success', function(event) {
			showCopySuccess(event, false);
			if($(event.trigger).hasClass('js-copy-code--dependencies')) showDependenciesModal(event.trigger);
		});
	}

	if($('.js-modal__copy').length > 0) {
		var clipboard = new ClipboardJS('.js-modal__copy', {
		    text: function(trigger) {
		    	var format = ($(trigger).attr('data-copy')) ? $(trigger).attr('data-copy') : 'html',
		    		code = $(trigger).prev().find('.js-modal__code').text();
		        	return code;
		    }
		});

		clipboard.on('success', function(event) {
			showCopySuccess(event, true);
		});
	}

	//copy code for globals -need to adpt code before copying 
	if($('.js-globals-copy-code').length > 0) {
		var clipboard = new ClipboardJS('.js-globals-copy-code', {
		    text: function(trigger) {
		    	var format = $(trigger).attr('data-type'),
		    		parent = $(trigger).parents('.js-code-action-wrapper').eq(0),
		    		code = parent.attr('data-'+format);
		        code = modifyGlobalCode(code, parent.attr('data-demo'), parent);
		        return code;
		    }
		});

		clipboard.on('success', function(event) {
			showCopySuccess(event, false);
		});
	}

	function showCopySuccess(event, bool) {
		var target = $(event.trigger);
		target.addClass('btn--state-b');
		setTimeout(function(){
			target.removeClass('btn--state-b');
		}, 3000);
		//bind the google analytics event as well
		var componentName = bool ? target.parents('.js-modal-code').eq(0).attr('data-component') : target.parents('.js-code-action-wrapper').eq(0).attr('data-demo');
		ga('send', 'event', 'View Code', 'copyCode', componentName);
	};

	function showDependenciesModal(trigger) {
		var modal = $('.js-modal--dependencies');
		modal.trigger('openModal', [trigger]);
	};

	function showDependenciesModalViewCode(trigger, modal) {
		if(trigger.attr('data-dep-titles') || (trigger.attr('data-ext-dep') &&  trigger.attr('data-ext-dep') != '')) {
			// this is the component gallery - create list
			resetDependenciesListViewCode(modal, trigger.attr('data-dep-url'), trigger.attr('data-dep-titles'), trigger.attr('data-ext-dep'));
		}
		
		modal.find('.js-app-info-banner').addClass('app-info-banner--is-visible');
	};

	var copyCodeWrapper = $('.js-code-action-wrapper');
	if( copyCodeWrapper.length > 0 ) {
		if($('.js-item-gallery').length > 0) {
			$('.js-item-gallery').on('click', '.js-view-code', function(event){
				showViewCodeModal(event, $(event.currentTarget).parents('.js-code-action-wrapper').eq(0));
			});
		} else {
			// detect click on view code
			copyCodeWrapper.on('click', '.js-view-code', function(event){
				showViewCodeModal(event, $(event.delegateTarget));
			});
		}
	}

	function resetDependenciesListViewCode(modal, url, title, external) {
		var banner = modal.find('.js-app-info-banner__list'),
			item = banner.children(0).clone(),
			list = '';

		if(title && title != '' ) {
			var titlesArr = title.split(','),
				urlArr = url.split(',')
			for(var i = 0; i < urlArr.length; i++) {
				item.children('a').attr('href', 'ds/components/app/'+urlArr[i]).text(titlesArr[i]);
				list = list + item.get(0).outerHTML;
			}
		}
		
		// update external dependencies
		if(external && external != '') {
			item.children('a').attr({'target': '_blank', 'rel': 'noopener'});
			var extDep = external.split(',');
			for(var i = 0; i < extDep.length; i++) {
				var resource = extDep[i].split('{');
				item.children('a').attr('href', resource[1].substring(0, resource[1].length - 1)).text(resource[0]+' ↗️');
				list = list + item.get(0).outerHTML;
			}
		}
		banner.html(list);
	};

	function showViewCodeModal(event, parent) {
		// var code = [];
		var modal = $('.js-modal[data-modal-trigger="'+$(event.currentTarget).attr('data-modal')+'"]');
		//hide menu popup
		$('.js-menu-popup.menu-popup--is-visible').removeClass('menu-popup--is-visible');
		//modal is shown automatically using the proper object
		if($(event.currentTarget).hasClass('js-view-code--global')) {
			//get code global -- need to modify i first
			getGlobalCode(parent, '', function(data){
				// populate the modal now
				modal.trigger('showGlobalCode', [data]);
			});
		} else {
			getComponentCode(parent, '', function(data){
				if($(event.currentTarget).hasClass('js-view-code--dependencies')) {
					showDependenciesModalViewCode($(event.currentTarget), modal);
				} else {
					// need to hide the dependencies banner in the modal
					modal.find('.js-app-info-banner').removeClass('app-info-banner--is-visible');
				}
				// populate the modal now
				modal.trigger('showCode');
			});
		}
		//bind the google analytics event as well
		ga('send', 'event', 'View Code', 'showCode', parent.attr('data-demo'));
	};

	function getComponentCode(container, type, callback) {
		var array = [];
		if( !container.attr('data-html') && !container.attr('data-scss') && !container.attr('data-js')) {
			// this should be dynamic
			if(type && type == 'globals') {
				var componentName = container.attr('data-title').toLowerCase();
			} else {
				var componentName = container.attr('data-demo');
			}
			readFileContent(componentName, type, function(data){
				var code = JSON.parse(data);
				container.attr('data-html', code.response.html);
				container.attr('data-scss', code.response.scss);
				container.attr('data-js', code.response.js);
				callback(array);
			});
		} else {
			array[0] = container.attr('data-html');
			array[1] = container.attr('data-scss');
			array[2] = container.attr('data-js');
			callback(array);
		}
	}

	function getGlobalCode(container, type, callback) {
		scss_code = modifyGlobalCode(container.attr('data-scss'), container.attr('data-demo'), container);
		callback(scss_code);
	}

	function readFileContent(component, type, callback) {
		if(type && type == 'globals') {
			var url = 'post/getGlobalCode';
		} else {
			var url = 'post/getComponentCode'
		}
		$.ajax({
      url      : url,
	    data     : 'component='+component,
	    type     : 'POST',
			cache   : 'false',
	        beforeSend : function(){
				//show loader or similar
	        },
	        success    : function(data){
	        	callback(data);
	        },
	        error     : function(jqXHR, textStatus, errorThrown) {
	        	callback('');
	        }
	    });
	}

	function modifyGlobalCode(code, global) {
		//check the globals that needs to be modified
		switch(global.toLowerCase()) {
			case 'colors':
				code = modifyColorsCode(code);
				break;
			case 'buttons':
				code = modifyButtonsCode(code);
				break;
			case 'forms':
				code = modifyFormsCode(code);
				break;
			case 'spacing':
				code = modifySpacingCode(code);
				break;
			case 'typography':
				code = modifyTypographyCode(code);
				break;
			case 'shared styles':
				code = modifySharedStylesCode(code);
				break;
			default:
				code = code;
				break;
		}
		
		return code;
	};

	function modifyColorsCode(code) {
		if(colorObject && colorObject.length > 0) {
			code = colorObject[0].updateCopyCode(code);
		}

		return code;
	};

	function modifySpacingCode(code) {
		if(spacingObject && spacingObject.length > 0) {
			code = spacingObject[0].updateCopyCode(code);
		}

		return code;
	};

	function modifyTypographyCode(code) {
		if(typographyObject && typographyObject.length > 0) {
			code = typographyObject[0].updateCopyCode(code);
		}

		return code;
	};

	function modifyButtonsCode(code) {
		if(buttonObjs && buttonObjs.length > 0) {
			code = buttonObjs[0].updateButtonsCopyCode(code);
		}

		return code;
	};

	function modifyFormsCode(code) {
		if(buttonObjs && buttonObjs.length > 0) {
			code = buttonObjs[0].updateFormsCopyCode(code);
		}

		return code;
	};

	function modifySharedStylesCode(code) {
		if(sharedStylesObjs && sharedStylesObjs.length > 0) {
			code = sharedStylesObjs[0].updateStyleCopyCode(code);
		}

		return code;
	};

	// component dependencies -> close banner in view code
	var closeBanner = $('.js-app-info-banner__close');
	if(closeBanner.length > 0) {
		closeBanner.on('click', function(event){
			event.preventDefault();
			closeBanner.parents('.js-app-info-banner').removeClass('app-info-banner--is-visible');
		});
	}

	//save globals function
	var saveGlobal = $('.js-globals-save-code');
	if(saveGlobal.length > 0) {
		saveGlobal.on('click', function(){
			if(IS_LOGGED == 0) {
				// trigger logIn modal
        logInModalStart(event.currentTarget);
			} else {
				//save project
				saveGlobal.addClass('btn--state-b');
				saveGlobalProject(saveGlobal.attr('data-global').toLowerCase(), function(){
					SaveAlert.no();
					saveGlobal.removeClass('btn--state-b').addClass('btn--state-c');
					setTimeout(function(){
						saveGlobal.removeClass('btn--state-c');
					}, 2000);
				});
			}
		});
		//log in using modal was successfull
		saveGlobal.on('logInSuccess', function(){
			//reset appearance
			resetLoggedInAppearance();
			logInModalClose();
		});
	};

	//reset globals function
	var resetGlobal = document.getElementsByClassName('js-reset-global');
	if(resetGlobal.length > 0) {
		resetGlobal[0].addEventListener('click', function(event){
			var globalType = resetGlobal[0].getAttribute('data-global');
			event.preventDefault();
			if (window.confirm("Are you sure you want to reset the global "+globalType+"? All your custom changes will be removed.")) {
				resetGlobalFn(globalType.toLowerCase(), function(){
					location.reload();
				});
      }
		});
	}

	function saveGlobalProject(global, callback) {
		//check the globals that needs to be modified
		switch(global.toLowerCase()) {
			case 'colors':
				saveColorsCode(callback);
				break;
			case 'buttons':
				saveButtonsCode(callback, 'buttons');
				break;
			case 'forms':
				saveButtonsCode(callback, 'forms');
				break;
			case 'spacing':
				saveSpacingCode(callback);
				break;
			case 'typography':
				saveTypographyCode(callback);
				break;
			case 'shared styles':
				saveSharedStylesCode(callback);
				break;
		}
	};

	function saveColorsCode(callback) {
		//need to define a string for colors
		if(!colorObject || colorObject.length == 0) callback();
		var colorsAll = colorObject[0].getArrayToSave();

		var colorString = JSON.stringify(convArrToObj(colorsAll));
		updateGlobalsProject('project_id='+PROJECT.id+'&colors='+colorString, callback);
	};

	function saveTypographyCode(callback) {
		if(!typographyObject || typographyObject.length == 0) callback();
		var typographyAll = typographyObject[0].getArrayToSave();
		var typographyString = encodeURIComponent(JSON.stringify(convArrToObj(typographyAll)));
		updateGlobalsProject('project_id='+PROJECT.id+'&typography='+typographyString, callback);
	};

	function saveSpacingCode(callback) {
		if(!spacingObject || spacingObject.length == 0) callback();
		var spacingAll = spacingObject[0].getArrayToSave();
		var spacingString = encodeURIComponent(JSON.stringify(convArrToObj(spacingAll)));
		updateGlobalsProject('project_id='+PROJECT.id+'&spacing='+spacingString, callback);
	};

	function saveButtonsCode(callback, type) {
		if(!buttonObjs || buttonObjs.length == 0) callback();
		if(type == 'buttons') {
			var buttonsString = encodeURIComponent(JSON.stringify(convArrToObj(buttonObjs[0].getButtonsArrayToSave())));
			saveString = '&buttons='+buttonsString;
		} else {
			var buttonsString = encodeURIComponent(JSON.stringify(convArrToObj(buttonObjs[0].getFormsArrayToSave())));
			saveString = '&form='+buttonsString;
		}
		
		updateGlobalsProject('project_id='+PROJECT.id+saveString, callback);
	};

	function saveSharedStylesCode(callback) {
		if(!sharedStylesObjs || sharedStylesObjs.length == 0) callback();
		var sharedStyleAll = sharedStylesObjs[0].getArrayToSave();
		var sharedStyleString = encodeURIComponent(JSON.stringify(convArrToObj(sharedStyleAll)));
		updateGlobalsProject('project_id='+PROJECT.id+'&shared_styles='+sharedStyleString, callback);
	};

	function updateGlobalsProject(options, callback) {
		$.ajax({
		  url      : 'post/updateGlobalsProject',
		  data     : options,
		  type     : 'POST',
		  dataType: 'json',
			cache   : 'false'
		}).done(function(data){
			console.log(data);
      if(data.status == 1) {
      	$('.js-flash-message--project-update').trigger('showFlashMessage');
      	saveGlobal.removeClass('btn--state-b');
    	} else {
      	callback();
    	}
    }).fail(function(data){
      $('.js-flash-message--project-update').trigger('showFlashMessage');
			saveGlobal.removeClass('btn--state-b');
    }).always(function(data){
      
    });
	};

	function convArrToObj(array){
    var thisEleObj = new Object();
    if(typeof array == "object"){
      for(var i in array){
        var thisEle = convArrToObj(array[i]);
        thisEleObj[i] = thisEle;
      }
    }else {
      thisEleObj = array;
    }
    return thisEleObj;
	};

	function resetGlobalFn(type, callback) {
		//check the globals that needs to be modified
		switch(type) {
			case 'colors':
				updateGlobalsProject('project_id='+PROJECT.id+'&colors=',callback);
				break;
			case 'buttons':
				updateGlobalsProject('project_id='+PROJECT.id+'&buttons=',callback);
				break;
			case 'forms':
				updateGlobalsProject('project_id='+PROJECT.id+'&form=',callback);
				break;
			case 'spacing':
				updateGlobalsProject('project_id='+PROJECT.id+'&spacing=',callback);
				break;
			case 'typography':
				updateGlobalsProject('project_id='+PROJECT.id+'&typography=',callback);
				break;
		}
	};

	function decodeSafeURIComponent(string) {
		return  decodeURIComponent(string.replace(/%"/g, '%25"'));
	};

  // Save Alert
  var SaveAlert = {
    yes: function(){ window.onbeforeunload = function() { return true; }; },
    no : function(){ window.onbeforeunload = null; }
  };

  function showIframe() {
  	$('.js-app-canvas').find('iframe').addClass('app-canvas__iframe--content-is-loaded').end().find('.js-app-canvas__loader').remove();
  }
}());

//select text of a contentEditable element
jQuery.fn.selectText = function(){
	var doc = document;
	var element = this[0];
	if (doc.body.createTextRange) {
		var range = document.body.createTextRange();
		range.moveToElementText(element);
		range.select();
	} else if (window.getSelection) {
		var selection = window.getSelection();        
		var range = document.createRange();
		range.selectNodeContents(element);
		selection.removeAllRanges();
		selection.addRange(range);
	}
};